{
    "pipes": [
        {
            "name": "PipesPipe",
            "id": "pipe-PipesPipe-b1ae6c6388b78b019b16330e1938a39c",
            "file": "src/app/core/shared/pipes.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "unknown",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "unknown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pipes",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'pipes'\n})\nexport class PipesPipe implements PipeTransform {\n\n  transform(value: unknown, ...args: unknown[]): unknown {\n    return null;\n  }\n\n}\n"
        },
        {
            "name": "RenameSectionPipe",
            "id": "pipe-RenameSectionPipe-451c5ca3907a06df6f825cb79a828682",
            "file": "src/app/shared/pipes/rename-section.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "renameSection",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'renameSection'\n})\nexport class RenameSectionPipe implements PipeTransform {\n\n  transform(value: string): string {\n    switch (value) {\n      case 'slider':\n        return 'Slajder'\n      case 'faq':\n        return 'Pitanja i odgovori'\n      case 'statistics':\n        return 'Zašto mi'\n      case 'banner':\n        return 'Baneri'\n      case 'team':\n        return 'Članovi tima'\n      case 'reviews':\n        return 'Recenzije'\n      case 'company_value':\n        return 'Vrednosti kompanije'\n      case 'clients':\n        return 'Klijenti'\n      case 'popular_products':\n        return 'Popularni proizvodi'\n      case 'popular_categories':\n        return 'Popularne kategorije'\n      default:\n        return '[ERROR]'\n    }\n  }\n\n}\n"
        },
        {
            "name": "RolesPipe",
            "id": "pipe-RolesPipe-154622d06a2461cbcd459d6f3548f911",
            "file": "src/app/shared/pipes/roles.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "roles",
                    "defaultValue": "Role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "role",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Role } from '../models/role';\n\n@Pipe({\n  name: 'role'\n})\nexport class RolesPipe implements PipeTransform {\n  public roles = Role;\n  transform(value: string): string {\n    // Convert Role ID to string (1 = Admin, 2 = Tehnolog...)\n    return Object.keys(this.roles)[Object.values(this.roles).indexOf(value)];\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "PaginatorApi",
            "id": "interface-PaginatorApi-663967a82896cd2afccb356d36b66519",
            "file": "src/app/shared/models/paginator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PaginatorApi {\r\n  current_page: number;\r\n  data: any[];\r\n  first_page_url: string;\r\n  from: number;\r\n  last_page: number;\r\n  last_page_url: string;\r\n  links: any;\r\n  next_page_url: string;\r\n  path: string;\r\n  per_page: number;\r\n  prev_page_url: string;\r\n  to: number;\r\n  total: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "current_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "first_page_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "last_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "last_page_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "next_page_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "per_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "prev_page_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ReorderData",
            "id": "interface-ReorderData-6c7338a09466deb501d42cc38efe3cbf",
            "file": "src/app/shared/models/reorder-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ReorderData {\r\n  id:number;\r\n  image?: string;\r\n  title?: string;\r\n  subtitle?: string;\r\n  post_status?: number;\r\n  post_name?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "post_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "post_status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RouteInfo",
            "id": "interface-RouteInfo-bc805b0dbabfd679562675a2d223b3eb",
            "file": "src/app/shared/models/route-info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RouteInfo {\r\n  path?: string;\r\n  title: string;\r\n  role?: string[];\r\n  icon?: string;\r\n  opened?: boolean;\r\n  type?: string;\r\n  children?: RouteInfo[];\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouteInfo[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "opened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AboutFieldsService",
            "id": "injectable-AboutFieldsService-0a05874e0f3f80bba992aa9a764e41fe",
            "file": "src/app/modules/pages/about/about-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        placeholder: 'About',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'rich-editor',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Sadržaj',\r\n        formControlName: 'content',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12'\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AboutFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        placeholder: 'About',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'rich-editor',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Sadržaj',\r\n        formControlName: 'content',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12'\r\n    }\r\n  ];\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-3f2cc9113ce176be84104bfbdd694f29",
            "file": "src/app/core/authentication/auth.service.ts",
            "properties": [
                {
                    "name": "roles",
                    "defaultValue": "Role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userSubject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getResetPasswordEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAuthorized",
                    "args": [
                        {
                            "name": "authorizedUsers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "authorizedUsers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "resetPasswordData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resetPasswordData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Role } from 'src/app/shared/models/role';\nimport { UserData } from 'src/app/shared/models/user-data';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport { User } from 'src/app/shared/models/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private userSubject: BehaviorSubject<User>;\n  public user: Observable<User>;\n  public roles = Role;\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.userSubject = new BehaviorSubject<User>(\n      JSON.parse(localStorage.getItem('user'))\n    );\n    this.user = this.userSubject.asObservable();\n  }\n\n  public get userValue(): User {\n    return this.userSubject.value;\n  }\n\n  login(credentials) {\n    return this.http\n      .post<any>(`${environment.apiUrl}/api/login`, credentials)\n      .pipe(\n        map((user) => {\n          // Store user and token to local storage\n          localStorage.setItem('user', JSON.stringify(user));\n          this.userSubject.next(user);\n          return user;\n        })\n      );\n  }\n\n  logout() {\n    return this.http.post(`${environment.apiUrl}/api/logout`, '')\n    .pipe(\n      map((responseData) => {\n        // remove user from local storage to log user out\n        localStorage.removeItem('user');\n        this.userSubject.next(null);\n        this.router.navigate(['/login']);\n        return responseData;\n      })\n    );\n  }\n\n  isAuthorized(authorizedUsers: string[]): boolean {\n    const currentUserRole = Object.keys(this.roles)[\n      Object.values(this.roles).indexOf(this.userValue.user.role_id)\n    ];\n    if (authorizedUsers.includes(currentUserRole)) {\n      return false;\n    }\n    return true;\n  }\n\n  getResetPasswordEmail(email: string){\n    return this.http.post(`${environment.apiUrl}/api/accounts/password/change`,email);\n  }\n\n  resetPassword(resetPasswordData){\n    return this.http.post(`${environment.apiUrl}/api/accounts/password/reset`,resetPasswordData);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userValue": {
                    "name": "userValue",
                    "getSignature": {
                        "name": "userValue",
                        "type": "",
                        "returnType": "User",
                        "line": 26
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "BannersFieldsService",
            "id": "injectable-BannersFieldsService-2b37b7b16e69ce7e22857f8b100154c8",
            "file": "src/app/modules/sections/banners/banners-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12 p-sm-5',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Odgovor',\r\n            formControlName: 'content',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Link banera',\r\n            type: 'text',\r\n            placeholder: 'https://',\r\n            formControlName: 'slug',\r\n          }\r\n        },\r\n      ]\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "sectionFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov sekcije',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Kratak opis',\r\n            type: 'text',\r\n            formControlName: 'description',\r\n          }\r\n        },\r\n      ]\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BannersFieldsService {\r\n  sectionFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov sekcije',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Kratak opis',\r\n            type: 'text',\r\n            formControlName: 'description',\r\n          }\r\n        },\r\n      ]\r\n    }\r\n  ]\r\n\r\n  mainFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12 p-sm-5',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Odgovor',\r\n            formControlName: 'content',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Link banera',\r\n            type: 'text',\r\n            placeholder: 'https://',\r\n            formControlName: 'slug',\r\n          }\r\n        },\r\n      ]\r\n    }\r\n  ]\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 62
            },
            "type": "injectable"
        },
        {
            "name": "BlogFieldsService",
            "id": "injectable-BlogFieldsService-013d52a6c14b8e7bd28187a139689d97",
            "file": "src/app/modules/pages/blog/blog-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        placeholder: 'Blog',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "singlePostFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Naslov',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'rich-editor',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Sadržaj',\r\n        formControlName: 'content',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BlogFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        placeholder: 'Blog',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12',\r\n    },\r\n  ];\r\n\r\n  singlePostFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Naslov',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'rich-editor',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Sadržaj',\r\n        formControlName: 'content',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12',\r\n    },\r\n  ];\r\n\r\n  constructor() {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 49
            },
            "type": "injectable"
        },
        {
            "name": "CategoriesFieldsService",
            "id": "injectable-CategoriesFieldsService-b200f7298833c8bf9f05b7690eefafd3",
            "file": "src/app/modules/products/categories/categories-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12',\r\n      controlType: 'input',\r\n      options: {\r\n        label: 'Naziv kategorije',\r\n        type: 'text',\r\n        formControlName: 'name',\r\n      },\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategoriesFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12',\r\n      controlType: 'input',\r\n      options: {\r\n        label: 'Naziv kategorije',\r\n        type: 'text',\r\n        formControlName: 'name',\r\n      },\r\n    },\r\n  ];\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "type": "injectable"
        },
        {
            "name": "CategoriesService",
            "id": "injectable-CategoriesService-76a73ed4fcd99a59e1ee9d706c13b310",
            "file": "src/app/core/services/categories.service.ts",
            "properties": [
                {
                    "name": "categoriesFilter",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "subcategoriesFilter",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "createCategory",
                    "args": [
                        {
                            "name": "categoryData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCategory",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllCategories",
                    "args": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllCategoriesNoPagination",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllCatSubcatNoPagination",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllSubcategories",
                    "args": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllSubcategoriesNoPagination",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOneCategory",
                    "args": [
                        {
                            "name": "catIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "catIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCategory",
                    "args": [
                        {
                            "name": "categoryData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCategoryStatus",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoriesService {\n  categoriesFilter = new BehaviorSubject<any>(null);\n  subcategoriesFilter = new BehaviorSubject<any>(null);\n\n  constructor(private http: HttpClient) {}\n\n  // * CREATE category\n  createCategory(categoryData) {\n    return this.http.post(`${environment.apiUrl}/api/categories`, categoryData);\n  }\n\n  // ? UPDATE category\n  updateCategory(categoryData) {\n    return this.http.post(`${environment.apiUrl}/api/categories`, categoryData);\n  }\n\n  // ? UPDATE STATUS - category\n  updateCategoryStatus(categoryId: number, status: { status: number }) {\n    return this.http.post(\n      `${environment.apiUrl}/api/categories/update-status/${categoryId}`,\n      status\n    );\n  }\n\n  // ! DELETE category\n  deleteCategory(categoryId: number) {\n    return this.http.delete(\n      `${environment.apiUrl}/api/categories/${categoryId}`\n    );\n  }\n\n  // * GET ALL categories\n  getAllCategories(pageIndex: number, queryParams: string = '') {\n    return this.http.get(\n      `${environment.apiUrl}/api/categories?page=${pageIndex}${queryParams}`\n    );\n  }\n\n  // * GET ALL categories - No pagination\n  getAllCategoriesNoPagination() {\n    return this.http.get(`${environment.apiUrl}/api/categories/dropdown`);\n  }\n\n  // * GET ALL categories - No pagination\n  getAllSubcategoriesNoPagination(categoryId: number) {\n    return this.http.get(`${environment.apiUrl}/api/categories/dropdown?parent=true&category=${categoryId}`);\n  }\n\n  // * GET ALL categories - No pagination\n  getAllCatSubcatNoPagination() {\n    return this.http.get(`${environment.apiUrl}/api/categories-subcategories/dropdown`);\n  }\n\n  // * GET ONE category\n  getOneCategory(catIndex: number) {\n    return this.http.get(`${environment.apiUrl}/api/categories/${catIndex}`);\n  }\n\n  // * GET ALL subategories\n  getAllSubcategories(pageIndex: number, queryParams: string = '') {\n    return this.http.get(\n      `${environment.apiUrl}/api/categories?page=${pageIndex}&parent=true${queryParams}`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CompanyValueFieldsService",
            "id": "injectable-CompanyValueFieldsService-5936c82b49591b9e5bbd6fa6dcc4eb65",
            "file": "src/app/modules/sections/company-value/company-value-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12 p-sm-5',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Kratak opis',\r\n            rows: 5,\r\n            formControlName: 'content',\r\n          }\r\n        },\r\n      ]\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "sectionFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Naslov sekcije',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      }\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CompanyValueFieldsService {\r\n  sectionFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Naslov sekcije',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      }\r\n    },\r\n  ]\r\n\r\n  mainFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12 p-sm-5',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Kratak opis',\r\n            rows: 5,\r\n            formControlName: 'content',\r\n          }\r\n        },\r\n      ]\r\n    }\r\n  ]\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 42
            },
            "type": "injectable"
        },
        {
            "name": "ConfirmService",
            "id": "injectable-ConfirmService-1992795d9b4df19426bea5109d0b1c09",
            "file": "src/app/core/services/confirm.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "confirmObj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "confirmObj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ConfirmationService } from 'primeng/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfirmService {\n\n  constructor(\n    private confirmationService: ConfirmationService\n  ) { }\n\n  confirm(event,confirmObj:{accept: Function}){\n    this.confirmationService.confirm({\n      target: event.target,\n      message: 'Da li ste sigurni da želite da obrišete stranicu?',\n      icon: 'pi pi-exclamation-triangle',\n      acceptLabel: 'Da',\n      rejectLabel: 'Ne',\n      accept: () => {\n        confirmObj.accept();\n      },\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ContactFieldsService",
            "id": "injectable-ContactFieldsService-450ed825296e23c3b4132eea349348db",
            "file": "src/app/modules/pages/contact/contact-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        placeholder: 'Contact',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'rich-editor',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Sadržaj',\r\n        formControlName: 'content',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12'\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContactFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        placeholder: 'Contact',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'rich-editor',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Sadržaj',\r\n        formControlName: 'content',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12'\r\n    }\r\n  ];\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "type": "injectable"
        },
        {
            "name": "CtaFieldsService",
            "id": "injectable-CtaFieldsService-3206a000af68ded50b2855fa702d4b06",
            "file": "src/app/modules/sections/cta/cta-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      controlType: 'input',\r\n      options: {\r\n        label: 'Naslov',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      controlType: 'input',\r\n      options: {\r\n        label: 'Tekst dugmeta',\r\n        type: 'text',\r\n        formControlName: 'button_text',\r\n      },\r\n    },\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      controlType: 'input',\r\n      options: {\r\n        label: 'Link dugmeta',\r\n        type: 'text',\r\n        placeholder: 'https://',\r\n        formControlName: 'button_link',\r\n      },\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CtaFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      controlType: 'input',\r\n      options: {\r\n        label: 'Naslov',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      controlType: 'input',\r\n      options: {\r\n        label: 'Tekst dugmeta',\r\n        type: 'text',\r\n        formControlName: 'button_text',\r\n      },\r\n    },\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      controlType: 'input',\r\n      options: {\r\n        label: 'Link dugmeta',\r\n        type: 'text',\r\n        placeholder: 'https://',\r\n        formControlName: 'button_link',\r\n      },\r\n    },\r\n  ];\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "type": "injectable"
        },
        {
            "name": "DownloadFieldsService",
            "id": "injectable-DownloadFieldsService-bbe31010447047b14f8843c6ec797777",
            "file": "src/app/modules/pages/download/download-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        placeholder: 'npr. Preuzimanje',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12'\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "singlePostFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        type: 'text',\r\n        label: 'Naziv fajla',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DownloadFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        placeholder: 'npr. Preuzimanje',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12'\r\n    }\r\n  ];\r\n\r\n  singlePostFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        type: 'text',\r\n        label: 'Naziv fajla',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n  ];\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 36
            },
            "type": "injectable"
        },
        {
            "name": "FaqFieldsService",
            "id": "injectable-FaqFieldsService-fdb85713ba4f22c68266efe22f8b5ef4",
            "file": "src/app/modules/sections/faq/faq-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Pitanje',\r\n        containerClass: ' p-mb-0',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      }\r\n    },\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Odgovor',\r\n        formControlName: 'content',\r\n      }\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "sectionFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Naslov sekcije',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      }\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FaqFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Pitanje',\r\n        containerClass: ' p-mb-0',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      }\r\n    },\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Odgovor',\r\n        formControlName: 'content',\r\n      }\r\n    },\r\n  ]\r\n\r\n  sectionFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Naslov sekcije',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      }\r\n    },\r\n  ]\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 39
            },
            "type": "injectable"
        },
        {
            "name": "HelperService",
            "id": "injectable-HelperService-5e4e7bdd04130e31080b342ca0e0f9a8",
            "file": "src/app/core/services/helper.service.ts",
            "properties": [
                {
                    "name": "darkMode",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HelperService {\r\n  darkMode = new BehaviorSubject<any>(null);\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "HomepageFieldsService",
            "id": "injectable-HomepageFieldsService-1a3b25a5b91e1c39b4cb866e70831fc1",
            "file": "src/app/modules/pages/homepage/homepage-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        placeholder: 'Home',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12'\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HomepageFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        placeholder: 'Home',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12'\r\n    }\r\n  ];\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "type": "injectable"
        },
        {
            "name": "HomeSliderFieldsService",
            "id": "injectable-HomeSliderFieldsService-8113d09980170a84350074cc41ddc141",
            "file": "src/app/modules/sections/home-slider/home-slider-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options:{\r\n            label: 'Naslov',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options:{\r\n            label: 'Podnaslov',\r\n            type: 'text',\r\n            formControlName: 'subtitle',\r\n          }\r\n        },\r\n      ]\r\n    },\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options:{\r\n            label: 'Link dugmeta',\r\n            type: 'text',\r\n            formControlName: 'button_link',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options:{\r\n            label: 'Tekst dugmeta',\r\n            type: 'text',\r\n            formControlName: 'button_text',\r\n          }\r\n        },\r\n      ]\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HomeSliderFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options:{\r\n            label: 'Naslov',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options:{\r\n            label: 'Podnaslov',\r\n            type: 'text',\r\n            formControlName: 'subtitle',\r\n          }\r\n        },\r\n      ]\r\n    },\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options:{\r\n            label: 'Link dugmeta',\r\n            type: 'text',\r\n            formControlName: 'button_link',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options:{\r\n            label: 'Tekst dugmeta',\r\n            type: 'text',\r\n            formControlName: 'button_text',\r\n          }\r\n        },\r\n      ]\r\n    },\r\n  ]\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 51
            },
            "type": "injectable"
        },
        {
            "name": "MenuService",
            "id": "injectable-MenuService-59f9f727172bbf04a8a2301cf71f5700",
            "file": "src/app/core/services/menu.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "menuId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "menuData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "menuId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "menuData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "menuId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "menuId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "menuId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "menuData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "menuId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "menuData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MenuService {\n\n  constructor(private http: HttpClient) { }\n\n  update(menuId:number,menuData) {\n    return this.http.post(`${environment.apiUrl}/api/menu/${menuId}/add-items`,menuData);\n  }\n\n  delete(menuId:number,menuData) {\n    return this.http.post(`${environment.apiUrl}/api/menu/${menuId}/delete-items`,menuData);\n  }\n\n  getAll(menuId: number) {\n    return this.http.get(`${environment.apiUrl}/api/menu/${menuId}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MenuToggleService",
            "id": "injectable-MenuToggleService-7fa062658ae3e42135d8b973ce3510dc",
            "file": "src/app/core/services/menu-toggle.service.ts",
            "properties": [
                {
                    "name": "currentState",
                    "defaultValue": "this.toggleState.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "toggleState",
                    "defaultValue": "new BehaviorSubject(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MenuToggleService {\n  private toggleState = new BehaviorSubject(null);\n  currentState = this.toggleState.asObservable();\n\n  constructor() { }\n\n  changeState(state: boolean) {\n    this.toggleState.next(state)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "MessServiceService",
            "id": "injectable-MessServiceService-68fa3bac46405d56669c188118e4a4e1",
            "file": "src/app/core/services/mess-service.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addError",
                    "args": [
                        {
                            "name": "mess",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mess",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSuccess",
                    "args": [
                        {
                            "name": "mess",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mess",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addWarn",
                    "args": [
                        {
                            "name": "mess",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mess",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MessageService } from 'primeng/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessServiceService {\n\n  constructor(\n    private messageService: MessageService\n  ) { }\n\n  addSuccess(mess:{severity:string,title:string,detail:string, sticky?:boolean}){\n    this.messageService.add({key: 'br', severity:mess.severity, summary: mess.title, detail: mess.detail, sticky: mess.sticky});\n  }\n\n  addWarn(mess:{severity:string,title:string,detail:string, sticky?:boolean}){\n    this.messageService.add({key: 'br-warn', severity:mess.severity, summary: mess.title, detail: mess.detail, sticky: mess.sticky});\n  }\n\n  addError(mess:{severity:string,title:string,detail:string, sticky?:boolean}){\n    this.messageService.add({key: 'br-error', severity:mess.severity, summary: mess.title, detail: mess.detail, sticky: mess.sticky});\n  }\n\n  clearErrors() {\n    this.messageService.clear('br-error');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OrdersFieldsService",
            "id": "injectable-OrdersFieldsService-f2b1477935e9b0e6c0a7d206851df022",
            "file": "src/app/modules/orders/orders-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12 p-sm-6',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Korisnik',\r\n            type: 'text',\r\n            formControlName: 'name',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Telefon',\r\n            type: 'text',\r\n            formControlName: 'phone',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Napomena',\r\n            formControlName: 'note',\r\n          },\r\n        },\r\n      ]\r\n    },\r\n    {\r\n      colSize: 'p-col-12 p-sm-6',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Email',\r\n            type: 'text',\r\n            formControlName: 'email',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Datum',\r\n            type: 'text',\r\n            formControlName: 'created_at',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Opis',\r\n            formControlName: 'description',\r\n          },\r\n        },\r\n      ]\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrdersFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12 p-sm-6',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Korisnik',\r\n            type: 'text',\r\n            formControlName: 'name',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Telefon',\r\n            type: 'text',\r\n            formControlName: 'phone',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Napomena',\r\n            formControlName: 'note',\r\n          },\r\n        },\r\n      ]\r\n    },\r\n    {\r\n      colSize: 'p-col-12 p-sm-6',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Email',\r\n            type: 'text',\r\n            formControlName: 'email',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Datum',\r\n            type: 'text',\r\n            formControlName: 'created_at',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Opis',\r\n            formControlName: 'description',\r\n          },\r\n        },\r\n      ]\r\n    },\r\n  ];\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 65
            },
            "type": "injectable"
        },
        {
            "name": "OrdersService",
            "id": "injectable-OrdersService-0657d9f9e4031c0355cb352ef95d5d36",
            "file": "src/app/core/services/orders.service.ts",
            "properties": [
                {
                    "name": "ordersFilter",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "orderId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orderId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOne",
                    "args": [
                        {
                            "name": "orderId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orderId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStatus",
                    "args": [
                        {
                            "name": "orderId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orderId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrdersService {\n  ordersFilter = new BehaviorSubject<any>(null);\n\n  constructor(private http: HttpClient) {}\n\n  getAll(pageIndex: number, queryParams: string = '') {\n    return this.http.get(\n      `${environment.apiUrl}/api/orders?page=${pageIndex}${queryParams}`\n    );\n  }\n\n  getOne(orderId: number) {\n    return this.http.get(`${environment.apiUrl}/api/orders/${orderId}`);\n  }\n\n  updateStatus(orderId: number, status: { status: number }) {\n    return this.http.post(\n      `${environment.apiUrl}/api/orders/update-status/${orderId}`,\n      status\n    );\n  }\n\n  delete(orderId: number) {\n    return this.http.delete(`${environment.apiUrl}/api/orders/${orderId}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OurClientsFieldsService",
            "id": "injectable-OurClientsFieldsService-ec3c296c478949b5673e12d0e6ac9bc3",
            "file": "src/app/modules/sections/our-clients/our-clients-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Ime klijenta',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      }\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Link',\r\n        type: 'text',\r\n        placeholder: 'https://',\r\n        formControlName: 'slug',\r\n      }\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "sectionFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Naslov sekcije',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      }\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OurClientsFieldsService {\r\n  sectionFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Naslov sekcije',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      }\r\n    },\r\n  ]\r\n\r\n  mainFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Ime klijenta',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      }\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Link',\r\n        type: 'text',\r\n        placeholder: 'https://',\r\n        formControlName: 'slug',\r\n      }\r\n    },\r\n  ]\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 40
            },
            "type": "injectable"
        },
        {
            "name": "PopularCategoriesFieldsService",
            "id": "injectable-PopularCategoriesFieldsService-4da913c93677ba63e92681fab08d9b43",
            "file": "src/app/modules/sections/popular-categories/popular-categories-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12',\r\n      group: [\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Kratak opis',\r\n            rows: 3,\r\n            formControlName: 'description',\r\n          },\r\n        }\r\n      ],\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "mainFieldsRight",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      options: {\r\n        label: 'Link',\r\n        type: 'text',\r\n        formControlName: 'category_link',\r\n      },\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "sectionFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov sekcije',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Kratak opis',\r\n            rows: 2,\r\n            formControlName: 'description',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Tekst dugmeta',\r\n            type: 'text',\r\n            formControlName: 'button_text',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Link dugmeta',\r\n            type: 'text',\r\n            placeholder: 'https://',\r\n            formControlName: 'button_link',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PopularCategoriesFieldsService {\r\n  sectionFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov sekcije',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Kratak opis',\r\n            rows: 2,\r\n            formControlName: 'description',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Tekst dugmeta',\r\n            type: 'text',\r\n            formControlName: 'button_text',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Link dugmeta',\r\n            type: 'text',\r\n            placeholder: 'https://',\r\n            formControlName: 'button_link',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  mainFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12',\r\n      group: [\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Kratak opis',\r\n            rows: 3,\r\n            formControlName: 'description',\r\n          },\r\n        }\r\n      ],\r\n    },\r\n  ];\r\n\r\n  mainFieldsRight: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      options: {\r\n        label: 'Link',\r\n        type: 'text',\r\n        formControlName: 'category_link',\r\n      },\r\n    }\r\n  ];\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 74
            },
            "type": "injectable"
        },
        {
            "name": "PopularProductsFieldsService",
            "id": "injectable-PopularProductsFieldsService-e07f5e01a6d988077cd4b4959443ccc8",
            "file": "src/app/modules/sections/popular-products/popular-products-fields.service.ts",
            "properties": [
                {
                    "name": "sectionFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov sekcije',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Kratak opis',\r\n            rows: 2,\r\n            formControlName: 'description',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Tekst dugmeta',\r\n            type: 'text',\r\n            formControlName: 'button_text',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Link dugmeta',\r\n            type: 'text',\r\n            placeholder: 'https://',\r\n            formControlName: 'button_link',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PopularProductsFieldsService {\r\n  sectionFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov sekcije',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Kratak opis',\r\n            rows: 2,\r\n            formControlName: 'description',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Tekst dugmeta',\r\n            type: 'text',\r\n            formControlName: 'button_text',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Link dugmeta',\r\n            type: 'text',\r\n            placeholder: 'https://',\r\n            formControlName: 'button_link',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  constructor() {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 47
            },
            "type": "injectable"
        },
        {
            "name": "PopupsFieldsService",
            "id": "injectable-PopupsFieldsService-5cae678e6d21efdd37173646f6bc54b6",
            "file": "src/app/modules/sections/popups/popups-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Sadržaj',\r\n            rows: 5,\r\n            formControlName: 'content',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Tekst dugmeta',\r\n            type: 'text',\r\n            formControlName: 'button_text',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Link dugmeta',\r\n            type: 'text',\r\n            placeholder: 'https://',\r\n            formControlName: 'button_link',\r\n          },\r\n        },\r\n      ]\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PopupsFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'textarea',\r\n          options: {\r\n            label: 'Sadržaj',\r\n            rows: 5,\r\n            formControlName: 'content',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Tekst dugmeta',\r\n            type: 'text',\r\n            formControlName: 'button_text',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Link dugmeta',\r\n            type: 'text',\r\n            placeholder: 'https://',\r\n            formControlName: 'button_link',\r\n          },\r\n        },\r\n      ]\r\n    }\r\n  ];\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 53
            },
            "type": "injectable"
        },
        {
            "name": "PostsService",
            "id": "injectable-PostsService-2668897eab465d97194433c4a2694a8f",
            "file": "src/app/core/services/posts.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createPost",
                    "args": [
                        {
                            "name": "postData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePost",
                    "args": [
                        {
                            "name": "postDataId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postDataId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllGlobalSections",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllPages",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPost",
                    "args": [
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateOrder",
                    "args": [
                        {
                            "name": "order",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "order",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePost",
                    "args": [
                        {
                            "name": "postData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePostStatus",
                    "args": [
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostsService {\n\n  constructor(private http: HttpClient) { }\n\n  // * CREATE post\n  createPost(postData) {\n    return this.http.post(`${environment.apiUrl}/api/posts`,postData);\n  }\n\n  // ! DELETE post\n  deletePost(postDataId: number){\n    return this.http.delete(`${environment.apiUrl}/api/posts/${postDataId}`);\n  }\n\n  // ? UPDATE post\n  updatePost(postData){\n    return this.http.post(`${environment.apiUrl}/api/posts`,postData);\n  }\n\n  // ? UPDATE STATUS - post\n  updatePostStatus(postId: number, status: {status: number}){\n    return this.http.post(`${environment.apiUrl}/api/posts/update-status/${postId}`,status);\n  }\n\n  // ? UPDATE ORDER - post\n  updateOrder(order){\n    return this.http.post(`${environment.apiUrl}/api/posts/update-orders`,order);\n  }\n\n  // * GET ONE - post\n  getPost(postId: number){\n    return this.http.get(`${environment.apiUrl}/api/posts/${postId}`);\n  }\n\n  // * GET ALL - pages\n  getAllPages(){\n    return this.http.get(`${environment.apiUrl}/api/posts`);\n  }\n\n  // * GET ALL - Global sections\n  getAllGlobalSections(){\n    return this.http.get(`${environment.apiUrl}/api/posts?post_type[]=global_section`);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductsFieldsService",
            "id": "injectable-ProductsFieldsService-8da3aa97e775bf8004a211d22db3f56a",
            "file": "src/app/modules/pages/products/products-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        placeholder: 'Products',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductsFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        placeholder: 'Products',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12',\r\n    },\r\n  ];\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "type": "injectable"
        },
        {
            "name": "ProductsListFieldsService",
            "id": "injectable-ProductsListFieldsService-192e7318d6cb61a355ae852a3d5c6604",
            "file": "src/app/modules/products/products-list/products-list-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        label: 'Naziv proizvoda',\r\n        containerClass: 'p-mb-0',\r\n        formControlName: 'name',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        rows: 3,\r\n        containerClass: 'p-mb-0',\r\n        label: 'Kraći opis proizvoda',\r\n        formControlName: 'description'\r\n      }\r\n    },\r\n    {\r\n      controlType: 'rich-editor',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Opis proizvoda',\r\n        formControlName: 'description2'\r\n      }\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12'\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "mainInfo",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        label: 'Šifra proizvoda',\r\n        containerClass: 'p-mb-0',\r\n        formControlName: 'real_id',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        label: 'Cena',\r\n        containerClass: 'p-mb-0',\r\n        formControlName: 'price',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        label: 'Količina',\r\n        formControlName: 'quantity',\r\n      },\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductsListFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        label: 'Naziv proizvoda',\r\n        containerClass: 'p-mb-0',\r\n        formControlName: 'name',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        rows: 3,\r\n        containerClass: 'p-mb-0',\r\n        label: 'Kraći opis proizvoda',\r\n        formControlName: 'description'\r\n      }\r\n    },\r\n    {\r\n      controlType: 'rich-editor',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Opis proizvoda',\r\n        formControlName: 'description2'\r\n      }\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12'\r\n    }\r\n  ];\r\n\r\n  mainInfo: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        label: 'Šifra proizvoda',\r\n        containerClass: 'p-mb-0',\r\n        formControlName: 'real_id',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        label: 'Cena',\r\n        containerClass: 'p-mb-0',\r\n        formControlName: 'price',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        label: 'Količina',\r\n        formControlName: 'quantity',\r\n      },\r\n    },\r\n  ]\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 73
            },
            "type": "injectable"
        },
        {
            "name": "ProductsService",
            "id": "injectable-ProductsService-30ccb37f463c6c7d6fcaab98c297233e",
            "file": "src/app/core/services/products.service.ts",
            "properties": [
                {
                    "name": "productsFilter",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "productData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProductsNoPagination",
                    "args": [
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "queryParams",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOneProducts",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "syncProduct",
                    "args": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "productData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProductStatus",
                    "args": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n  productsFilter = new BehaviorSubject<any>(null);\n\n  constructor(private http: HttpClient) { }\n\n  // * GET ALL products\n  getAllProducts(pageIndex: number, queryParams: string = ''){\n    return this.http.get(`${environment.apiUrl}/api/models?page=${pageIndex}${queryParams}`);\n  }\n\n  // * GET ALL products - No pagination\n  getAllProductsNoPagination(queryParams: string = '') {\n    return this.http.get(`${environment.apiUrl}/api/models/dropdown?active=1${queryParams}`);\n  }\n\n  // * GET ONE product\n  getOneProducts(id: number){\n    return this.http.get(`${environment.apiUrl}/api/models/${id}`);\n  }\n\n  // * CREATE product\n  createProduct(productData) {\n    return this.http.post(`${environment.apiUrl}/api/models`,productData);\n  }\n\n  // ? SYNC product\n  syncProduct(productId: number){\n    return this.http.post(`${environment.apiUrl}/api/models/sync-stock/${productId}`, 'Sync');\n  }\n\n  // ! DELETE product\n  deleteProduct(id: number) {\n    return this.http.delete(\n      `${environment.apiUrl}/api/models/${id}`\n    );\n  }\n\n  // ? UPDATE STATUS - product\n  updateProductStatus(productId: number, status: {status: number}){\n    return this.http.post(`${environment.apiUrl}/api/models/update-status/${productId}`,status);\n  }\n\n  // ? UPDATE product\n  updateProduct(productData) {\n    return this.http.post(`${environment.apiUrl}/api/models`,productData);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReviewsFieldsService",
            "id": "injectable-ReviewsFieldsService-db2b7f33758aa5f94f11c6dfc53b05a0",
            "file": "src/app/modules/sections/reviews/reviews-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-mb-0',\r\n      options: {\r\n        label: 'Klijent',\r\n        containerClass: 'p-mb-0',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12 ',\r\n      options: {\r\n        label: 'Recenzija',\r\n        type: 'text',\r\n        formControlName: 'content',\r\n      },\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "mainSectionFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Naslov sekcije',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReviewsFieldsService {\r\n  mainSectionFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Naslov sekcije',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n  ];\r\n\r\n\r\n  mainFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-mb-0',\r\n      options: {\r\n        label: 'Klijent',\r\n        containerClass: 'p-mb-0',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12 ',\r\n      options: {\r\n        label: 'Recenzija',\r\n        type: 'text',\r\n        formControlName: 'content',\r\n      },\r\n    },\r\n  ];\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 41
            },
            "type": "injectable"
        },
        {
            "name": "SettingsFieldsService",
            "id": "injectable-SettingsFieldsService-da8f54b1599c1e3ddd0ee4b651ecb06d",
            "file": "src/app/modules/settings/settings-page/settings-fields.service.ts",
            "properties": [
                {
                    "name": "contactFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Adresa',\r\n            type: 'text',\r\n            formControlName: 'address',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Telefon',\r\n            type: 'text',\r\n            formControlName: 'phone',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Mobilni telefon',\r\n            type: 'text',\r\n            formControlName: 'mob_phone',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Email',\r\n            type: 'text',\r\n            formControlName: 'email',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Mail za prijem porudžbina',\r\n            type: 'text',\r\n            formControlName: 'orders_mail',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Radni dani: Pon-Pet',\r\n            type: 'text',\r\n            placeholder: 'npr. 09-17h',\r\n            formControlName: 'wd_mon_fri',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Radni dani: Subota',\r\n            type: 'text',\r\n            placeholder: 'npr. 09-17h',\r\n            formControlName: 'wd_sat',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Radni dani: Nedelja',\r\n            type: 'text',\r\n            placeholder: 'npr. 09-17h',\r\n            formControlName: 'wd_sun',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "generalFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Ime sajta',\r\n        containerClass: ' p-mb-0',\r\n        type: 'text',\r\n        formControlName: 'app_name',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Charset',\r\n        containerClass: ' p-mb-0',\r\n        type: 'text',\r\n        formControlName: 'charset',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Copyright',\r\n        containerClass: ' p-mb-0',\r\n        type: 'text',\r\n        formControlName: 'copyright',\r\n      },\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "scriptsFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12 p-sm-6',\r\n      options: {\r\n        label: 'Google analitika',\r\n        containerClass: ' p-mb-0',\r\n        formControlName: 'google_analytics',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12 p-sm-6',\r\n      options: {\r\n        label: 'HotJar',\r\n        containerClass: ' p-mb-0',\r\n        formControlName: 'hot_jar',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12 p-sm-6',\r\n      options: {\r\n        label: 'Google mapa',\r\n        formControlName: 'google_map',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12 p-sm-6',\r\n      options: {\r\n        label: 'Facebook messenger',\r\n        formControlName: 'fb_messenger',\r\n      },\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "socialFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Facebook',\r\n        containerClass: ' p-mb-0',\r\n        placeholder: 'https://',\r\n        type: 'text',\r\n        formControlName: 'facebook',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Youtube',\r\n        containerClass: ' p-mb-0',\r\n        placeholder: 'https://',\r\n        type: 'text',\r\n        formControlName: 'youtube',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Twitter',\r\n        containerClass: ' p-mb-0',\r\n        placeholder: 'https://',\r\n        type: 'text',\r\n        formControlName: 'twitter',\r\n      },\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SettingsFieldsService {\r\n  generalFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Ime sajta',\r\n        containerClass: ' p-mb-0',\r\n        type: 'text',\r\n        formControlName: 'app_name',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Charset',\r\n        containerClass: ' p-mb-0',\r\n        type: 'text',\r\n        formControlName: 'charset',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Copyright',\r\n        containerClass: ' p-mb-0',\r\n        type: 'text',\r\n        formControlName: 'copyright',\r\n      },\r\n    },\r\n  ];\r\n\r\n  scriptsFields: FormField[] = [\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12 p-sm-6',\r\n      options: {\r\n        label: 'Google analitika',\r\n        containerClass: ' p-mb-0',\r\n        formControlName: 'google_analytics',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12 p-sm-6',\r\n      options: {\r\n        label: 'HotJar',\r\n        containerClass: ' p-mb-0',\r\n        formControlName: 'hot_jar',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12 p-sm-6',\r\n      options: {\r\n        label: 'Google mapa',\r\n        formControlName: 'google_map',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'textarea',\r\n      colSize: 'p-col-12 p-sm-6',\r\n      options: {\r\n        label: 'Facebook messenger',\r\n        formControlName: 'fb_messenger',\r\n      },\r\n    },\r\n  ];\r\n\r\n  socialFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Facebook',\r\n        containerClass: ' p-mb-0',\r\n        placeholder: 'https://',\r\n        type: 'text',\r\n        formControlName: 'facebook',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Youtube',\r\n        containerClass: ' p-mb-0',\r\n        placeholder: 'https://',\r\n        type: 'text',\r\n        formControlName: 'youtube',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Twitter',\r\n        containerClass: ' p-mb-0',\r\n        placeholder: 'https://',\r\n        type: 'text',\r\n        formControlName: 'twitter',\r\n      },\r\n    },\r\n  ];\r\n\r\n  contactFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Adresa',\r\n            type: 'text',\r\n            formControlName: 'address',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Telefon',\r\n            type: 'text',\r\n            formControlName: 'phone',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Mobilni telefon',\r\n            type: 'text',\r\n            formControlName: 'mob_phone',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Email',\r\n            type: 'text',\r\n            formControlName: 'email',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Mail za prijem porudžbina',\r\n            type: 'text',\r\n            formControlName: 'orders_mail',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Radni dani: Pon-Pet',\r\n            type: 'text',\r\n            placeholder: 'npr. 09-17h',\r\n            formControlName: 'wd_mon_fri',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Radni dani: Subota',\r\n            type: 'text',\r\n            placeholder: 'npr. 09-17h',\r\n            formControlName: 'wd_sat',\r\n          },\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Radni dani: Nedelja',\r\n            type: 'text',\r\n            placeholder: 'npr. 09-17h',\r\n            formControlName: 'wd_sun',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 192
            },
            "type": "injectable"
        },
        {
            "name": "SettingsService",
            "id": "injectable-SettingsService-89f10a06761576f1c1d4d7924ef79c90",
            "file": "src/app/core/services/settings.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOne",
                    "args": [
                        {
                            "name": "settingsField",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settingsField",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "settingsData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settingsData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SettingsService {\n\n  constructor(private http: HttpClient) {}\n\n  update(settingsData) {\n    return this.http.post(`${environment.apiUrl}/api/app-options/set`,settingsData);\n  }\n\n  getAll() {\n    return this.http.get(`${environment.apiUrl}/api/app-options/get`);\n  }\n\n  getOne(settingsField){\n    return this.http.get(`${environment.apiUrl}/api/app-options/${settingsField}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SubcategoriesFieldsService",
            "id": "injectable-SubcategoriesFieldsService-2fbea8c2d0298d12ac7a0ad060db0e78",
            "file": "src/app/modules/products/subcategories/subcategories-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12',\r\n      controlType: 'input',\r\n      options: {\r\n        label: 'Naziv podkategorije',\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        formControlName: 'name',\r\n      },\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SubcategoriesFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12',\r\n      controlType: 'input',\r\n      options: {\r\n        label: 'Naziv podkategorije',\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        formControlName: 'name',\r\n      },\r\n    },\r\n  ];\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "type": "injectable"
        },
        {
            "name": "TeamFieldsService",
            "id": "injectable-TeamFieldsService-0d80e01bf2c0f77f54d12d64201329a4",
            "file": "src/app/modules/sections/team/team-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Ime i prezime',\r\n        type: 'text',\r\n        formControlName: 'name',\r\n      }\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Uloga',\r\n        type: 'text',\r\n        formControlName: 'role',\r\n      }\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TeamFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Ime i prezime',\r\n        type: 'text',\r\n        formControlName: 'name',\r\n      }\r\n    },\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Uloga',\r\n        type: 'text',\r\n        formControlName: 'role',\r\n      }\r\n    },\r\n  ]\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "type": "injectable"
        },
        {
            "name": "TemplateOneFieldsService",
            "id": "injectable-TemplateOneFieldsService-8778272383b467803506399e67609a09",
            "file": "src/app/modules/page-templates/template-one/template-one-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'rich-editor',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Sadržaj',\r\n        formControlName: 'content',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12'\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TemplateOneFieldsService {\r\n  mainFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        type: 'text',\r\n        containerClass: 'p-mb-0',\r\n        label: 'Ime stranice',\r\n        formControlName: 'title',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'rich-editor',\r\n      colSize: 'p-col-12',\r\n      options: {\r\n        label: 'Sadržaj',\r\n        formControlName: 'content',\r\n      },\r\n    },\r\n    {\r\n      controlType: 'page-seo',\r\n      colSize: 'p-col-12'\r\n    }\r\n  ];\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "type": "injectable"
        },
        {
            "name": "UsersFieldsService",
            "id": "injectable-UsersFieldsService-5b9a0049a6dd231de2c205f330454ce8",
            "file": "src/app/modules/users/users-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\nimport { Role } from 'src/app/shared/models/role';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UsersFieldsService {\r\n  roles: any[];\r\n  mainFields: FormField[] = [];\r\n\r\n  constructor() {\r\n    this.roles = Object.entries(Role)\r\n      .filter((e) => !isNaN(e[0] as any))\r\n      .map((e) => ({ name: e[1], role_id: +e[0] }));\r\n\r\n    this.mainFields = [\r\n      {\r\n        colSize: 'p-col-12 p-sm-4',\r\n        group: [\r\n          {\r\n            controlType: 'input',\r\n            options: {\r\n              label: 'Ime i prezime',\r\n              type: 'text',\r\n              formControlName: 'name',\r\n            },\r\n          },\r\n          {\r\n            colSize: 'p-col-12 p-sm-4',\r\n            controlType: 'dropdown',\r\n            options: {\r\n              label: 'Uloga',\r\n              formControlName: 'role_id',\r\n              optionValue: 'role_id',\r\n              optionLabel: 'name',\r\n              dropdownOptions: this.roles,\r\n            },\r\n          },\r\n          {\r\n            controlType: 'input',\r\n            options: {\r\n              label: 'Mobilni telefon',\r\n              type: 'text',\r\n              formControlName: 'phone',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        colSize: 'p-col-12 p-sm-4',\r\n        group: [\r\n          {\r\n            controlType: 'input',\r\n            options: {\r\n              label: 'Mail',\r\n              type: 'text',\r\n              formControlName: 'email',\r\n            },\r\n          },\r\n          {\r\n            controlType: 'input-password',\r\n            options: {\r\n              label: 'Šifra',\r\n              formControlName: 'password',\r\n            },\r\n          },\r\n          {\r\n            controlType: 'input-password',\r\n            options: {\r\n              label: 'Ponovi šifru',\r\n              formControlName: 'password_confirmation',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "UsersService",
            "id": "injectable-UsersService-8d02260f5bb0362fa2521df8b1c8ca1b",
            "file": "src/app/core/services/users.service.ts",
            "properties": [
                {
                    "name": "usersFilter",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "user",
                            "type": "UserData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "UserData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "queryParams",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "queryParams",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOne",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "UserData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "UserData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { UserData } from 'src/app/shared/models/user-data';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  usersFilter = new BehaviorSubject<any>(null);\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  create(user: UserData){\n    return this.http.post(`${environment.apiUrl}/api/users`,user);\n  }\n\n  delete(userId: number){\n    return this.http.delete(`${environment.apiUrl}/api/users/${userId}`);\n  }\n\n  update(userId: number, user: UserData){\n    return this.http.patch<UserData>(`${environment.apiUrl}/api/users/${userId}`,user);\n  }\n\n  getAll(queryParams){\n    return this.http.get<any>(`${environment.apiUrl}/api/users?${queryParams}`);\n  }\n\n  getOne(userId: number){\n    return this.http.get<any>(`${environment.apiUrl}/api/users/${userId}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "WhyUsFieldsService",
            "id": "injectable-WhyUsFieldsService-02b304db17f11996ad73df663ffa3ccb",
            "file": "src/app/modules/sections/why-us/why-us-fields.service.ts",
            "properties": [
                {
                    "name": "mainFields",
                    "defaultValue": "[\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Broj',\r\n            type: 'text',\r\n            formControlName: 'number',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Podnaslov',\r\n            type: 'text',\r\n            formControlName: 'subtitle',\r\n          }\r\n        },\r\n      ]\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "sectionFields",
                    "defaultValue": "[\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Naslov sekcije',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      }\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormField } from 'src/app/shared/models/form-field';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WhyUsFieldsService {\r\n  sectionFields: FormField[] = [\r\n    {\r\n      controlType: 'input',\r\n      colSize: 'p-col-12 p-sm-4',\r\n      options: {\r\n        label: 'Naslov sekcije',\r\n        type: 'text',\r\n        formControlName: 'title',\r\n      }\r\n    },\r\n  ]\r\n\r\n  mainFields: FormField[] = [\r\n    {\r\n      colSize: 'p-col-12 p-sm-4',\r\n      group: [\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Naslov',\r\n            type: 'text',\r\n            formControlName: 'title',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Broj',\r\n            type: 'text',\r\n            formControlName: 'number',\r\n          }\r\n        },\r\n        {\r\n          controlType: 'input',\r\n          options: {\r\n            label: 'Podnaslov',\r\n            type: 'text',\r\n            formControlName: 'subtitle',\r\n          }\r\n        },\r\n      ]\r\n    }\r\n  ]\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 50
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-2d9f2f4c39774f81f687fab87c2f21bd",
            "file": "src/app/core/guards/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  Router,\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  ActivatedRoute,\r\n} from '@angular/router';\r\nimport { AuthService } from '../authentication/auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private router: Router, private authService: AuthService) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const user = this.authService.userValue;\r\n    if (user) {\r\n      // check if route is restricted by role\r\n      if (\r\n        route.data.roles &&\r\n        route.data.roles.indexOf(user.user.role_id) === -1\r\n      ) {\r\n        // role not authorised so redirect to home page\r\n        this.router.navigate(['/']);\r\n        return false;\r\n      }\r\n\r\n      // authorised so return true\r\n      return true;\r\n    }\r\n\r\n    // not logged in so redirect to login page with the return url\r\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\r\n    return false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "ErrorInterceptor",
            "id": "injectable-ErrorInterceptor-09e998b7a274541a16ec18e794af4cb0",
            "file": "src/app/core/interceptors/error.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { AuthService } from '../authentication/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n    constructor(private authenticationService: AuthService, private router: Router) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(catchError(err => {\r\n            if ([401, 403].indexOf(err.status) !== -1) {\r\n              console.log('ODJAVI SE');\r\n                // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\r\n                localStorage.removeItem('user');\r\n                this.router.navigate(['/login']);\r\n                this.authenticationService.logout();\r\n            }\r\n\r\n            const error = err;\r\n            return throwError(error);\r\n        }))\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "JwtInterceptor",
            "id": "injectable-JwtInterceptor-c477d140f6adf56f89f3fc1a8e646ca1",
            "file": "src/app/core/interceptors/jwt.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { AuthService } from '../authentication/auth.service';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n    constructor(private authenticationService: AuthService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // add auth header with jwt if user is logged in and request is to api url\r\n        const user = this.authenticationService.userValue;\r\n        const isLoggedIn = user && user.access_token;\r\n        const isApiUrl = request.url.startsWith(environment.apiUrl);\r\n        if (isLoggedIn && isApiUrl) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${user.access_token}`\r\n                }\r\n            });\r\n        }\r\n\r\n        return next.handle(request);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "fileList",
            "id": "class-fileList-94aa831e7ad4d9e2c8e2f09323d4e750",
            "file": "src/app/shared/models/file-list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class fileList {\r\n    originalFile: File;\r\n    imageLocalUrl: string;\r\n    imageUrl?: string;\r\n    fileName?: string;\r\n  }\r\n",
            "properties": [
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "imageLocalUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "originalFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormField",
            "id": "class-FormField-f238cc57188953f34b5787434f3dc8f6",
            "file": "src/app/shared/models/form-field.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class FormField {\r\n  group?: FormField[];\r\n  controlType?: string;\r\n  colSize?: string;\r\n  options?: {\r\n    id?:number;\r\n    rows?: number|string;\r\n    label?: string;\r\n    class?: string;\r\n    containerClass?: string;\r\n    type?: string;\r\n    dropdownOptions?: any;\r\n    optionValue?: string;\r\n    optionLabel?: string;\r\n    placeholder?: string;\r\n    fieldFormGroup?: string;\r\n    formControlName?: string;\r\n    errorMessage?: string;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "colSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "InputField",
            "id": "class-InputField-992e217165b29f4b2a18078e85906453",
            "file": "src/app/shared/models/input-field.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormGroup } from \"@angular/forms\";\r\n\r\nexport class InputField {\r\n  id?:number;\r\n  label?: string;\r\n  class?: string;\r\n  containerClass?: string;\r\n  type?: string;\r\n  placeholder?: string;\r\n  formControlName?: string;\r\n  formGroup?: FormGroup;\r\n  formGroupName?: any;\r\n  errorMessage?: string;\r\n  dropdownOptions?: any;\r\n  optionValue?:string;\r\n  optionLabel?:string;\r\n  fieldFormGroup?: string;\r\n\r\n  constructor(obj?){\r\n    if(obj !== null || obj !== undefined){\r\n      Object.assign(this,obj)\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "obj",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "obj",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "containerClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "dropdownOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "fieldFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "formGroupName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TextareaField",
            "id": "class-TextareaField-8c2efc08068a70fc58810b701469df29",
            "file": "src/app/shared/models/textarea-field.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormGroup } from \"@angular/forms\";\r\n\r\nexport class TextareaField {\r\n  id?:number;\r\n  label?: string;\r\n  class?: string;\r\n  containerClass?: string;\r\n  rows?: string;\r\n  cols?:string;\r\n  placeholder?: string;\r\n  formControlName?: string;\r\n  formGroup?: FormGroup;\r\n  errorMessage?: string;\r\n\r\n  constructor(obj?){\r\n    if(obj !== null || obj !== undefined){\r\n      Object.assign(this,obj)\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "obj",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "obj",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "containerClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-5de96d01096d855d85a46c876d3b4d66",
            "file": "src/app/shared/models/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UserData } from \"./user-data\";\r\n\r\nexport class User {\r\n  access_token: string;\r\n  token_type: string;\r\n  expires_in: number;\r\n  user: UserData;\r\n}\r\n",
            "properties": [
                {
                    "name": "access_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "expires_in",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "token_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserData",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserData",
            "id": "class-UserData-27a5978cea3f3fd3bf5f6b3243847c98",
            "file": "src/app/shared/models/user-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class UserData {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  email_verified_at: any;\r\n  role_id: number;\r\n  phone: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email_verified_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "role_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "updated_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AboutComponent",
            "id": "component-AboutComponent-e447d5597fe01724a66018d10dd66b96",
            "file": "src/app/modules/pages/about/about.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about",
            "styleUrls": [
                "./about.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./about.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "enAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AboutFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "sections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "websiteUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { RenameSectionPipe } from 'src/app/shared/pipes/rename-section.pipe';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AboutFieldsService } from './about-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-about',\r\n  templateUrl: './about.component.html',\r\n  styleUrls: ['./about.component.scss'],\r\n})\r\nexport class AboutComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  sections;\r\n  pageForm: FormGroup;\r\n  pageId: number;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  srAttachments: FormArray;\r\n  enAttachments: FormArray;\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData: ReorderData[] = [];\r\n  websiteUrl = environment.apiUrl;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private postsService: PostsService,\r\n    private renameSection: RenameSectionPipe,\r\n    private messService: MessServiceService,\r\n    public fieldsService: AboutFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      id: ['2'],\r\n      post_type: ['page'],\r\n      post_status: [1],\r\n      post_name: ['about'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const pageForm = this.pageForm.getRawValue();\r\n    pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(pageForm);\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili stranicu',\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n          this.loading = false;\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.pageForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  updatePageView() {\r\n    this.reorderData = [];\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.pageId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.pageData = response;\r\n        this.websiteUrl = `${this.websiteUrl}/${response.locale.sr.slug}`;\r\n\r\n        this.sections = response.posts;\r\n        if (this.sections) {\r\n          this.sections.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n            this.reorderData.push({\r\n              title: this.renameSection.transform(element.post_name),\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n            });\r\n          });\r\n        }\r\n\r\n        response.locale.sr.attachments.forEach((attachment) => {\r\n          this.getLangAttachments('sr').push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n\r\n          // Show old images\r\n          this.fileList.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n            fileName: attachment.name,\r\n          });\r\n        });\r\n\r\n        response.locale.en.attachments.forEach((attachment) => {\r\n          this.getLangAttachments('en').push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n        });\r\n\r\n        response.locale.de.attachments.forEach((attachment) => {\r\n          this.getLangAttachments('de').push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n        });\r\n\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.pageData.locale[langCode].title,\r\n      content: this.pageData.locale[langCode].content,\r\n      slug: this.pageData.locale[langCode].slug,\r\n      meta_title: this.pageData.locale[langCode].meta_title,\r\n      meta_description: this.pageData.locale[langCode].meta_description,\r\n      meta_keywords: this.pageData.locale[langCode].meta_keywords,\r\n    });\r\n  }\r\n\r\n  patchForm() {\r\n    this.patchLangForm('sr');\r\n    this.patchLangForm('en');\r\n    this.patchLangForm('de');\r\n\r\n    this.pageForm.patchValue({\r\n      post_status: this.pageData.post_status,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./about.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renameSection",
                        "type": "RenameSectionPipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "AboutFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renameSection",
                        "type": "RenameSectionPipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "AboutFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"GENERAL\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!pageData\"\r\n  [pageData]=\"pageData\"\r\n  [formGroup]=\"pageForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"true\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Izaberi sliku</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"5\"\r\n          >\r\n          </app-image-upload>\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\">\r\n              Preporučena dimenzija za sliku je format 16:9</span\r\n            >\r\n          </section>\r\n        </div>\r\n      </div>\r\n      <div class=\"p-col-12\">\r\n        <h2 class=\"p-mt-0\">SEKCIJE</h2>\r\n      </div>\r\n      <div class=\"p-col-12\">\r\n        <p-panel header=\"Sve sekcije\">\r\n          <app-post-reorder\r\n            [arrayForOrder]=\"postOrder\"\r\n            [orderItems]=\"reorderData\"\r\n            (itemDeleted)=\"updatePageView()\"\r\n            [showDelete]=\"false\"\r\n            [reorderSections]=\"true\"\r\n          >\r\n          </app-post-reorder>\r\n        </p-panel>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1e2adc8b670c029b7c8e77f857a6c2f3",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title:string;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n\n\n"
        },
        {
            "name": "AuthLayoutComponent",
            "id": "component-AuthLayoutComponent-e7a9aa1e43efad04560c34f30dac4b0f",
            "file": "src/app/includes/layout/auth-layout/auth-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth-layout",
            "styleUrls": [
                "./auth-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth-layout',\n  templateUrl: './auth-layout.component.html',\n  styleUrls: ['./auth-layout.component.scss']\n})\nexport class AuthLayoutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./auth-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- * AUTH LAYOUT -->\n<router-outlet></router-outlet>\n\n<!-- * Message -->\n<p-toast position=\"bottom-right\" key=\"br\"></p-toast>\n\n<!-- * Message -->\n<p-toast position=\"bottom-right\" key=\"br-error\"></p-toast>\n"
        },
        {
            "name": "BannersAddComponent",
            "id": "component-BannersAddComponent-b6303e436e98e396b13dcff54bfa4f34",
            "file": "src/app/modules/sections/banners/banners-add/banners-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-banners-add",
            "styleUrls": [
                "./banners-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./banners-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BannersFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { BannersFieldsService } from '../banners-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-banners-add',\r\n  templateUrl: './banners-add.component.html',\r\n  styleUrls: ['./banners-add.component.scss'],\r\n})\r\nexport class BannersAddComponent implements OnInit {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  fd = new FormData();\r\n  fileList: fileList[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: BannersFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      parent: ['10'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          slug: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          slug: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          slug: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi slajd.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string){\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./banners-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "BannersFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "BannersFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"BANERI - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "BannersComponent",
            "id": "component-BannersComponent-7bf062b06a25774a6951578acb727e79",
            "file": "src/app/modules/sections/banners/banners.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-banners",
            "styleUrls": [
                "./banners.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./banners.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BannersFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sectionsOrder",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "teamMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { environment } from 'src/environments/environment';\r\nimport { BannersFieldsService } from './banners-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-banners',\r\n  templateUrl: './banners.component.html',\r\n  styleUrls: ['./banners.component.scss'],\r\n})\r\nexport class BannersComponent implements OnInit, OnDestroy {\r\n  orderItems;\r\n  teamMembers;\r\n  postForm: FormGroup;\r\n  postData;\r\n  loading = false;\r\n  postId: number;\r\n  subscriptions: Subscription[] = [];\r\n  mediaUrl = environment.mediaUrl;\r\n  sectionsOrder: { id: number }[] = [];\r\n  fd = new FormData();\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData: ReorderData[] = [];\r\n\r\n  constructor(\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private confirmationService: ConfirmationService,\r\n    public fieldsService: BannersFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.postId = +this.route.snapshot.params.sectionId;\r\n\r\n    // Form init\r\n    this.postForm = this.fb.group({\r\n      id: ['10'],\r\n      post_type: ['post'],\r\n      post_name: ['banner'],\r\n      parent: ['1'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: [''],\r\n          description: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          description: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          description: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete baner?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste baner.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Submit\r\n  onSubmit() {\r\n    const pageForm = this.postForm.getRawValue();\r\n    // pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(pageForm);\r\n\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili stranicu',\r\n          });\r\n          // this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        this.orderItems = response.posts;\r\n        if (response.posts) {\r\n          this.orderItems.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.title,\r\n              subtitle: element.locale.sr.content,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n              image: element.locale.sr.attachments[0]\r\n                ? element.locale.sr.attachments[0].name\r\n                : null,\r\n            });\r\n          });\r\n        }\r\n        this.loading = false;\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  patchForm() {\r\n    this.getLangFormGroup('sr').patchValue({\r\n      title: this.postData.locale.sr.title,\r\n      description: this.postData.locale.sr.description,\r\n    });\r\n    this.getLangFormGroup('en').patchValue({\r\n      title: this.postData.locale.en.title,\r\n      description: this.postData.locale.en.description,\r\n    });\r\n    this.getLangFormGroup('de').patchValue({\r\n      title: this.postData.locale.de.title,\r\n      description: this.postData.locale.de.description,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./banners.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "BannersFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "BannersFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"BANERI\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showAddButton]=\"true\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Baneri\">\r\n            <p-panel header=\"Svi baneri\">\r\n              <app-post-reorder\r\n                [arrayForOrder]=\"postOrder\"\r\n                [orderItems]=\"reorderData\"\r\n                (itemDeleted)=\"updatePageView()\"\r\n              >\r\n              </app-post-reorder>\r\n            </p-panel>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Opis sekcije\">\r\n            <p-tabView>\r\n              <p-tabPanel header=\"Srpski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('sr')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Engleski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('en')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Nemački\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('de')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n            </p-tabView>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "BannersEditComponent",
            "id": "component-BannersEditComponent-deaee4126f6bb14608f24da263489759",
            "file": "src/app/modules/sections/banners/banners-edit/banners-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-banners-edit",
            "styleUrls": [
                "./banners-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./banners-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BannersFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangAttachments",
                    "args": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { BannersFieldsService } from '../banners-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-banners-edit',\r\n  templateUrl: './banners-edit.component.html',\r\n  styleUrls: ['./banners-edit.component.scss'],\r\n})\r\nexport class BannersEditComponent implements OnInit {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  postId: number;\r\n  postData;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: BannersFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get post ID\r\n    this.postId = +this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['10'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          slug: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          slug: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          slug: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        response.locale.sr.attachments.forEach((attachment) => {\r\n          this.getLangAttachments('sr').push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n\r\n          // Show old images\r\n          this.fileList.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n            fileName: attachment.name,\r\n          });\r\n        });\r\n        this.patchLangAttachments(response, 'en');\r\n        this.patchLangAttachments(response, 'de');\r\n\r\n        // this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi blog post.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  patchLangAttachments(attachArray, langCode: string) {\r\n    attachArray.locale[langCode].attachments.forEach((attachment) => {\r\n      this.getLangAttachments(langCode).push(\r\n        this.fb.group({\r\n          title: [attachment.title],\r\n          alt: [attachment.alt],\r\n          name: [attachment.name],\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n      content: this.postData.locale[langCode].content,\r\n      slug: this.postData.locale[langCode].slug,\r\n    });\r\n  }\r\n\r\n  patchForm() {\r\n    this.patchLangForm('sr');\r\n    this.patchLangForm('en');\r\n    this.patchLangForm('de');\r\n\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./banners-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "BannersFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "BannersFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"BANERI - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  [pageData]=\"postData\"\r\n  [skeletonLoad]=\"!postData\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"post\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "BlockUiComponent",
            "id": "component-BlockUiComponent-8bbf3af4ffcff119c49de08a399c63ad",
            "file": "src/app/shared/components/block-ui/block-ui.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-block-ui",
            "styleUrls": [
                "./block-ui.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./block-ui.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-block-ui',\n  templateUrl: './block-ui.component.html',\n  styleUrls: ['./block-ui.component.scss']\n})\nexport class BlockUiComponent implements OnInit {\n  @Input() loading = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './../../../../assets/scss/partials/mixins';\r\n\r\n.block-ui {\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  top: 0px;\r\n  left: 0px;\r\n  z-index: 1000;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n\r\n  .block-ui-message {\r\n    background-color:#fff;\r\n    padding: 4rem 2rem;\r\n    border-radius: 5px;\r\n    display: flex;\r\n    flex-flow: column;\r\n    align-items: center;\r\n\r\n    @include xs{\r\n      width: 93vw !important;\r\n    }\r\n    h2{\r\n      text-transform: uppercase;\r\n      line-height: 1.9rem;\r\n    }\r\n    bold{\r\n      color:var(--pink-400) ;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./block-ui.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"block-ui\" *ngIf=\"loading\">\n  <section class=\"block-ui-message\">\n    <i\n      class=\"pi pi-spin pi-spinner p-mb-3\"\n      style=\"font-size: 2rem; font-weight: bold\"\n    ></i>\n    <h2 class=\"p-text-center\">\n      <ng-content></ng-content>\n    </h2>\n  </section>\n</div>\n"
        },
        {
            "name": "BlogAddComponent",
            "id": "component-BlogAddComponent-61c13ddae52af15396c3b6e16657ca0e",
            "file": "src/app/modules/pages/blog/blog-add/blog-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-blog-add",
            "styleUrls": [
                "./blog-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./blog-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "deAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "enAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlogFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { BlogFieldsService } from '../blog-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-blog-add',\r\n  templateUrl: './blog-add.component.html',\r\n  styleUrls: ['./blog-add.component.scss'],\r\n})\r\nexport class BlogAddComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  enAttachments: FormArray;\r\n  deAttachments: FormArray;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: BlogFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      parent: ['4'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          posts: this.fb.group({\r\n            post_type: ['post'],\r\n            title: [''],\r\n            content: [''],\r\n            slug: [''],\r\n            meta_title: [''],\r\n            meta_keywords: [''],\r\n            meta_description: [''],\r\n            attachments: this.fb.array([]),\r\n          }),\r\n        }),\r\n        en: this.fb.group({\r\n          posts: this.fb.group({\r\n            post_type: ['post'],\r\n            title: [''],\r\n            content: [''],\r\n            slug: [''],\r\n            meta_title: [''],\r\n            meta_keywords: [''],\r\n            meta_description: [''],\r\n            attachments: this.fb.array([]),\r\n          }),\r\n        }),\r\n        de: this.fb.group({\r\n          posts: this.fb.group({\r\n            post_type: ['post'],\r\n            title: [''],\r\n            content: [''],\r\n            slug: [''],\r\n            meta_title: [''],\r\n            meta_keywords: [''],\r\n            meta_description: [''],\r\n            attachments: this.fb.array([]),\r\n          }),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.srAttachments = this.postForm.get(\r\n      'locale.sr.posts.attachments'\r\n    ) as FormArray;\r\n    this.enAttachments = this.postForm.get(\r\n      'locale.en.posts.attachments'\r\n    ) as FormArray;\r\n    this.deAttachments = this.postForm.get(\r\n      'locale.de.posts.attachments'\r\n    ) as FormArray;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi blog post.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}.posts`);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./blog-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "BlogFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "BlogFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"BLOG - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView styleClass=\"p-p-0\">\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.singlePostFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.singlePostFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.singlePostFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Naslovna slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"srAttachments\"\r\n            [enAttachments]=\"enAttachments\"\r\n            [deAttachments]=\"deAttachments\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\">\r\n              Preporučena dimenzija za sliku je format 16:9</span\r\n            >\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "BlogComponent",
            "id": "component-BlogComponent-f915f545f8cc17ac97f272d1f92f210c",
            "file": "src/app/modules/pages/blog/blog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-blog",
            "styleUrls": [
                "./blog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./blog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "blogPosts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlogFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { BlogFieldsService } from './blog-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-blog',\r\n  templateUrl: './blog.component.html',\r\n  styleUrls: ['./blog.component.scss'],\r\n})\r\nexport class BlogComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  pageForm: FormGroup;\r\n  pageData;\r\n  pageId: number;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  blogPosts;\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData: ReorderData[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private route: ActivatedRoute,\r\n    private confirmationService: ConfirmationService,\r\n    public fieldsService: BlogFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      id: [''],\r\n      post_type: ['page'],\r\n      post_status: [''],\r\n      post_name: ['blog'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete post?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste post.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    const pageForm = this.pageForm.getRawValue();\r\n    pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(pageForm);\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili stranicu',\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.pageData.locale[langCode].title,\r\n      content: this.pageData.locale[langCode].content,\r\n      slug: this.pageData.locale[langCode].slug,\r\n      meta_title: this.pageData.locale[langCode].meta_title,\r\n      meta_description: this.pageData.locale[langCode].meta_description,\r\n      meta_keywords: this.pageData.locale[langCode].meta_keywords,\r\n    });\r\n  }\r\n\r\n  patchForm() {\r\n    this.patchLangForm('sr');\r\n    this.patchLangForm('en');\r\n    this.patchLangForm('de');\r\n\r\n    this.pageForm.patchValue({\r\n      id: this.pageId,\r\n      post_status: this.pageData.post_status,\r\n    });\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.pageId).subscribe((response: any) => {\r\n        this.pageData = response;\r\n\r\n        this.blogPosts = response.posts;\r\n\r\n        // Add to list for order\r\n        if (response.posts) {\r\n          this.blogPosts.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.posts.title,\r\n              subtitle: element.created_at,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n            });\r\n          });\r\n        }\r\n\r\n        this.loading = false;\r\n        this.patchForm();\r\n        console.log(response);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./blog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "BlogFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "BlogFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"GENERAL\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!pageData\"\r\n  [pageData]=\"pageData\"\r\n  [formGroup]=\"pageForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"true\"\r\n>\r\n  <ng-container buttons>\r\n    <a [routerLink]=\"['./add']\" class=\"main-btn p-mr-2\">\r\n      Dodaj post <i class=\"pi pi-plus\"></i>\r\n    </a>\r\n  </ng-container>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n      <div class=\"p-col-12\">\r\n        <p-panel header=\"Svi blog postovi\" *ngIf=\"blogPosts\">\r\n          <app-post-reorder\r\n            [arrayForOrder]=\"postOrder\"\r\n            [orderItems]=\"reorderData\"\r\n            (itemDeleted)=\"updatePageView()\"\r\n          >\r\n          </app-post-reorder>\r\n        </p-panel>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "BlogEditComponent",
            "id": "component-BlogEditComponent-62caa2f413a55e24d572c9b56f84c027",
            "file": "src/app/modules/pages/blog/blog-edit/blog-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-blog-edit",
            "styleUrls": [
                "./blog-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./blog-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "deAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "enAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BlogFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { BlogFieldsService } from '../blog-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-blog-edit',\r\n  templateUrl: './blog-edit.component.html',\r\n  styleUrls: ['./blog-edit.component.scss'],\r\n})\r\nexport class BlogEditComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  enAttachments: FormArray;\r\n  deAttachments: FormArray;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  postId: number;\r\n  postData;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: BlogFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get post ID\r\n    this.postId = +this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['4'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          posts: this.fb.group({\r\n            post_type: ['post'],\r\n            title: [''],\r\n            content: [''],\r\n            slug: [''],\r\n            meta_title: [''],\r\n            meta_keywords: [''],\r\n            meta_description: [''],\r\n            attachments: this.fb.array([]),\r\n          }),\r\n        }),\r\n        en: this.fb.group({\r\n          posts: this.fb.group({\r\n            post_type: ['post'],\r\n            title: [''],\r\n            content: [''],\r\n            slug: [''],\r\n            meta_title: [''],\r\n            meta_keywords: [''],\r\n            meta_description: [''],\r\n            attachments: this.fb.array([]),\r\n          }),\r\n        }),\r\n        de: this.fb.group({\r\n          posts: this.fb.group({\r\n            post_type: ['post'],\r\n            title: [''],\r\n            content: [''],\r\n            slug: [''],\r\n            meta_title: [''],\r\n            meta_keywords: [''],\r\n            meta_description: [''],\r\n            attachments: this.fb.array([]),\r\n          }),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.srAttachments = this.postForm.get(\r\n      'locale.sr.posts.attachments'\r\n    ) as FormArray;\r\n\r\n    this.enAttachments = this.postForm.get(\r\n      'locale.en.posts.attachments'\r\n    ) as FormArray;\r\n\r\n    this.deAttachments = this.postForm.get(\r\n      'locale.de.posts.attachments'\r\n    ) as FormArray;\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n\r\n        response.locale.sr.posts.attachments.forEach((attachment) => {\r\n          this.srAttachments.push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n\r\n          // Show old images\r\n          this.fileList.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n          });\r\n        });\r\n\r\n        response.locale.en.posts.attachments.forEach((attachment) => {\r\n          this.enAttachments.push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n        });\r\n\r\n        response.locale.de.posts.attachments.forEach((attachment) => {\r\n          this.deAttachments.push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n        });\r\n\r\n        this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi blog post.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}.posts`);\r\n  }\r\n\r\n  patchForm() {\r\n    this.getLangFormGroup('sr').patchValue({\r\n      title: this.postData.locale.sr.posts.title,\r\n      content: this.postData.locale.sr.posts.content,\r\n      slug: this.postData.locale.sr.slug,\r\n      meta_title: this.postData.locale.sr.meta_title,\r\n      meta_description: this.postData.locale.sr.meta_description,\r\n      meta_keywords: this.postData.locale.sr.meta_keywords,\r\n    });\r\n\r\n    this.getLangFormGroup('en').patchValue({\r\n      title: this.postData.locale.en.posts.title,\r\n      content: this.postData.locale.en.posts.content,\r\n      slug: this.postData.locale.en.slug,\r\n      meta_title: this.postData.locale.en.meta_title,\r\n      meta_description: this.postData.locale.en.meta_description,\r\n      meta_keywords: this.postData.locale.en.meta_keywords,\r\n    });\r\n\r\n    this.getLangFormGroup('de').patchValue({\r\n      title: this.postData.locale.de.posts.title,\r\n      content: this.postData.locale.de.posts.content,\r\n      slug: this.postData.locale.de.slug,\r\n      meta_title: this.postData.locale.de.meta_title,\r\n      meta_description: this.postData.locale.de.meta_description,\r\n      meta_keywords: this.postData.locale.de.meta_keywords,\r\n    });\r\n\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n      post_status: this.postData.post_status,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./blog-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "BlogFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "BlogFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"BLOG - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  [skeletonLoad]=\"!postData\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [pageData]=\"postData\"\r\n  [showPreviewButton]=\"true\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView styleClass=\"p-p-0\">\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.singlePostFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.singlePostFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.singlePostFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Naslovna slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"srAttachments\"\r\n            [enAttachments]=\"enAttachments\"\r\n            [deAttachments]=\"deAttachments\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\">\r\n              Preporučena dimenzija za sliku je format 16:9</span\r\n            >\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-0791e112a6746ed698c4da604297b2c1",
            "file": "src/app/shared/components/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "Location"
                },
                {
                    "name": "{ provide: LocationStrategy, useClass: PathLocationStrategy }"
                }
            ],
            "selector": "app-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breadcrumb",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "createBreadcrumbs",
                    "args": [
                        {
                            "name": "routeSegmets",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "routeSegmets",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { LocationStrategy, PathLocationStrategy } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute, NavigationEnd, PRIMARY_OUTLET } from '@angular/router';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-breadcrumb',\r\n  templateUrl: './breadcrumb.component.html',\r\n  styleUrls: ['./breadcrumb.component.scss'],\r\n  providers: [\r\n    Location,\r\n    { provide: LocationStrategy, useClass: PathLocationStrategy },\r\n  ],\r\n})\r\nexport class BreadcrumbComponent implements OnInit {\r\n  breadcrumbs: any[] = [];\r\n  breadcrumb: any[] = [];\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createBreadcrumbs(this.activatedRoute.snapshot['_urlSegment'].segments);\r\n\r\n    this.router.events\r\n      .pipe(filter((event) => event instanceof NavigationEnd))\r\n      .pipe(map(() => this.activatedRoute))\r\n      .pipe(\r\n        map((route) => {\r\n          while (route.firstChild) {\r\n            route = route.firstChild;\r\n          }\r\n          return route;\r\n        })\r\n      )\r\n      .pipe(filter((route) => route.outlet === PRIMARY_OUTLET))\r\n      .subscribe((route) => {\r\n        this.breadcrumb = [];\r\n\r\n        this.createBreadcrumbs(route.snapshot.url);\r\n\r\n      });\r\n  }\r\n\r\n  createBreadcrumbs(routeSegmets: any[]){\r\n    routeSegmets.forEach((element, index) => {\r\n      let path: any = element.path;\r\n      let urlSegment = {};\r\n\r\n      if (isNaN(path)) {\r\n        let segmetArray = routeSegmets.slice(0, index + 1);\r\n        let url = '/#/' + segmetArray.join('/');\r\n        if (!isNaN(routeSegmets[index + 1])) {\r\n          url = url + '/' + routeSegmets[index + 1];\r\n        }\r\n        urlSegment = {\r\n          label: element.path.replace('_', ' '),\r\n          url: url,\r\n        };\r\n\r\n        this.breadcrumb.push(urlSegment);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/assets/scss/partials/mixins';\r\n\r\n::ng-deep{\r\n  .p-breadcrumb{\r\n    padding: .2rem;\r\n    border: none;\r\n  }\r\n  .p-breadcrumb ul li{\r\n    display: flex;\r\n  }\r\n  .p-breadcrumb ul li.p-breadcrumb-chevron{\r\n    font-size: .5rem;\r\n  }\r\n  .p-breadcrumb ul li .p-menuitem-link .p-menuitem-text{\r\n    font-size: .7rem;\r\n    text-transform: capitalize;\r\n  }\r\n  .p-breadcrumb ul li .p-menuitem-link{\r\n    margin-bottom: 2px;\r\n  }\r\n  .p-breadcrumb ul li .p-menuitem-link .p-menuitem-icon{\r\n    font-size: .8rem;\r\n    margin-top: 0px;\r\n    display: block;\r\n  }\r\n\r\n  p-breadcrumb{\r\n    @include xs{\r\n      display: none;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p-breadcrumb [home]=\"{icon: 'pi pi-home', routerLink: '/'}\" [model]=\"breadcrumb\"></p-breadcrumb>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-f3b151fe24f8ac2c6deb29eba1d6724d",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "btnStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "\"main\" | \"second\""
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "routerLink",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any[]"
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "tooltipPosition",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "\"top\" | \"left\" | \"right\" | \"bottom\""
                },
                {
                    "name": "tooltipTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"button\" | \"submit\""
                }
            ],
            "outputsClass": [
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Output",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "routerLink",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"main\" | \"second\"",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'btnStyle'"
                        }
                    ]
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "tooltipPosition",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top\" | \"left\" | \"right\" | \"bottom\"",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "tooltipTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"button\" | \"submit\"",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n})\r\nexport class ButtonComponent implements OnInit {\r\n  @Input() icon: string;\r\n  @Input() type: 'button' | 'submit';\r\n  @Input('btnStyle') style: 'main' | 'second';\r\n  @Input() disabled: boolean = false;\r\n  @Input() text: string;\r\n  @Input() tooltipTitle: string;\r\n  @Input() tooltipPosition: 'top' | 'left' | 'right' | 'bottom' = 'top';\r\n  @Input() routerLink: any[] = null;\r\n  @Input() styleClass: string;\r\n  @Output() click: EventEmitter<any> = new EventEmitter<any>();\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onClick() {\r\n    this.click.emit(true);\r\n    console.log('KLIK');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button\r\n  [class.main-btn]=\"style === 'main'\"\r\n  [type]=\"type\"\r\n  [disabled]=\"disabled\"\r\n  [ngClass]=\"{ disabled: disabled, 'second-btn small-btn': style === 'second' }\"\r\n  [pTooltip]=\"tooltipTitle\"\r\n  [tooltipPosition]=\"tooltipPosition\"\r\n  [routerLink]=\"routerLink\"\r\n  [class]=\"styleClass\"\r\n>\r\n  <ng-content></ng-content> {{ text }}\r\n  <i *ngIf=\"icon\" [ngClass]=\"'pi pi-' + icon\"></i>\r\n</button>\r\n"
        },
        {
            "name": "CategoriesComponent",
            "id": "component-CategoriesComponent-f78e8bda29eac6ef10e1704c468e26f8",
            "file": "src/app/modules/products/categories/categories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-categories",
            "styleUrls": [
                "./categories.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./categories.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiOrNot",
                    "defaultValue": "[\n    { label: 'Svi', value: '' },\n    { label: 'Promobox', value: '&api=1' },\n    { label: 'Custom', value: '&api=0' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "hideFilters",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "paginator",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "paginatorElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Paginator",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'paginatorElement'"
                        }
                    ]
                },
                {
                    "name": "searchForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "searchInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput', {static: false}"
                        }
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResetSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCurrentPage",
                    "args": [
                        {
                            "name": "currentPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTable",
                    "args": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ConfirmationService } from 'primeng/api';\nimport { Paginator } from 'primeng/paginator';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\nimport { CategoriesService } from 'src/app/core/services/categories.service';\nimport { MenuToggleService } from 'src/app/core/services/menu-toggle.service';\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\nimport { PaginatorApi } from 'src/app/shared/models/paginator';\n\n@Component({\n  selector: 'app-categories',\n  templateUrl: './categories.component.html',\n  styleUrls: ['./categories.component.scss'],\n})\nexport class CategoriesComponent implements OnInit, OnDestroy, AfterViewInit {\n  loading = false;\n  categories;\n  subscriptions: Subscription[] = [];\n  paginator: any = {};\n  @ViewChild('paginatorElement') paginatorElement: Paginator;\n  searchForm: FormGroup;\n  apiOrNot = [\n    { label: 'Svi', value: '' },\n    { label: 'Promobox', value: '&api=1' },\n    { label: 'Custom', value: '&api=0' },\n  ];\n  @ViewChild('searchInput', { static: false }) searchInput: ElementRef;\n  hideFilters = true;\n\n  constructor(\n    private categoriesService: CategoriesService,\n    private messService: MessServiceService,\n    private menuToggle: MenuToggleService,\n    private fb: FormBuilder,\n    private confirmationService: ConfirmationService,\n    private cdr: ChangeDetectorRef\n  ) {}\n\n  // * Lifecycles === //\n  ngOnInit(): void {\n    // Init search form\n    this.searchForm = this.fb.group({\n      name: [''],\n      apiOrNot: [''],\n    });\n\n    if (window.innerWidth < 500) {\n      this.subscriptions.push(\n        this.menuToggle.currentState.subscribe((state) => {\n          if (state != null) {\n            this.hideFilters = true;\n          }\n        })\n      );\n    } else {\n      this.hideFilters = false;\n    }\n  }\n\n  ngAfterViewInit() {\n    // * Debounce search\n    fromEvent(this.searchInput.nativeElement, 'keyup')\n      .pipe(\n        // get value\n        map((event: any) => {\n          return event.target.value;\n        }),\n        // Time in milliseconds between key events\n        debounceTime(500),\n        // If previous query is diffent from current\n        distinctUntilChanged()\n        // subscription for response\n      )\n      .subscribe((text: string) => {\n        this.onSearch();\n      });\n\n    this.subscriptions.push(\n      this.categoriesService.categoriesFilter.subscribe((response) => {\n        if (response) {\n          this.searchForm.patchValue({\n            name: response.name,\n            apiOrNot: response.apiOrNot,\n          });\n          this.onSearch();\n        } else {\n          // Get all users\n          this.updateTable(1);\n        }\n      })\n    );\n\n    this.cdr.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n    this.saveFilter();\n  }\n\n  // * Search === //\n  onSearch() {\n    const searchForm = this.searchForm.getRawValue();\n    // Get active users\n    this.loading = true;\n    this.subscriptions.push(\n      this.categoriesService\n        .getAllCategories(1, `&name=${searchForm.name}${searchForm.apiOrNot}`)\n        .subscribe((response: PaginatorApi) => {\n          this.categories = response.data;\n          this.paginator = response;\n          console.log(response);\n          if (this.paginatorElement.getPage().toString() === 'NaN') {\n            this.updateCurrentPage(2);\n          } else {\n            this.updateCurrentPage(1);\n          }\n          this.loading = false;\n        })\n    );\n  }\n\n  // * Change status === //\n  onChangeStatus(event, categoryId: number) {\n    console.log(event);\n    const status = {\n      status: event.checked ? 1 : 0,\n    };\n    this.subscriptions.push(\n      this.categoriesService.updateCategoryStatus(categoryId, status).subscribe(\n        () => {\n          this.messService.addSuccess({\n            severity: 'success',\n            title: 'Uspešno menjanje statusa',\n            detail: 'Uspešno ste promenili vidljivost kategorije.',\n          });\n          // this.updateTable(1);\n        },\n        (error) => {\n          console.log(error);\n        }\n      )\n    );\n  }\n\n  // * Delete === //\n  onDelete(event: Event, categoryId: number) {\n    this.confirmationService.confirm({\n      target: event.target,\n      message: 'Da li ste sigurni da želite da obrišete kategoriju?',\n      icon: 'pi pi-exclamation-triangle',\n      acceptLabel: 'Da',\n      rejectLabel: 'Ne',\n      accept: () => {\n        this.subscriptions.push(\n          this.categoriesService.deleteCategory(categoryId).subscribe(\n            () => {\n              this.messService.addSuccess({\n                severity: 'success',\n                title: 'Uspešno brisanje',\n                detail: 'Obrisali ste kategoriju.',\n              });\n              this.updateTable(1);\n              this.updateCurrentPage(1);\n            },\n            (error) => {\n              this.messService.addError({\n                severity: 'error',\n                title: 'Greška',\n                detail: 'Došlo je do greške, pokušajte ponovo!',\n              });\n            }\n          )\n        );\n      },\n    });\n  }\n\n  // * Helpers === //\n  updateTable(pageIndex: number) {\n    const searchForm = this.searchForm.getRawValue();\n    // Get active users\n    this.loading = true;\n    this.subscriptions.push(\n      this.categoriesService\n        .getAllCategories(\n          pageIndex,\n          `&name=${searchForm.name}${searchForm.apiOrNot}`\n        )\n        .subscribe((response: PaginatorApi) => {\n          this.categories = response.data;\n          this.paginator = response;\n          console.log(response);\n          this.loading = false;\n        })\n    );\n  }\n\n  onResetSearch() {\n    this.searchForm.controls['name'].setValue('');\n    this.onSearch();\n  }\n\n  private updateCurrentPage(currentPage: number): void {\n    this.paginatorElement.changePage(currentPage - 1);\n  }\n\n  onPageChange(event) {\n    this.updateTable(event.page + 1);\n  }\n\n  saveFilter() {\n    this.categoriesService.categoriesFilter.next(this.searchForm.getRawValue());\n  }\n\n  resetFilter() {\n    this.searchForm.patchValue({\n      name: '',\n      apiOrNot: '',\n    });\n    this.updateTable(1);\n    this.saveFilter();\n  }\n\n  toggleFilters() {\n    this.hideFilters = !this.hideFilters;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./categories.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"main\"\r\n  headerTitle=\"KATEGORIJE\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!categories\"\r\n  [showAddButton]=\"true\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <p-table\r\n            #dt1\r\n            [value]=\"categories\"\r\n            dataKey=\"id\"\r\n            [rows]=\"10\"\r\n            [showCurrentPageReport]=\"true\"\r\n            [rowsPerPageOptions]=\"[10, 25, 50]\"\r\n            [loading]=\"loading\"\r\n            styleClass=\"p-datatable-customers p-datatable-gridlines p-datatable-responsive-demo\"\r\n            [paginator]=\"false\"\r\n            currentPageReportTemplate=\"Prikaz od {first}. do {last}. operacije od ukupno {totalRecords}\"\r\n          >\r\n            <ng-template pTemplate=\"caption\">\r\n              <form\r\n                class=\"page-control\"\r\n                [formGroup]=\"searchForm\"\r\n                (ngSubmit)=\"onSearch()\"\r\n                [ngClass]=\"{ 'toggle-filters': hideFilters }\"\r\n              >\r\n                <section\r\n                  class=\"filter-dark-bg\"\r\n                  (click)=\"toggleFilters()\"\r\n                ></section>\r\n                <button\r\n                  class=\"close-bar\"\r\n                  type=\"button\"\r\n                  (click)=\"toggleFilters()\"\r\n                >\r\n                  <div class=\"bar\"></div>\r\n                </button>\r\n                <div class=\"input-fields\">\r\n                  <p-selectButton\r\n                    styleClass=\"p-mr-2 filter-item\"\r\n                    (onChange)=\"onSearch()\"\r\n                    [options]=\"apiOrNot\"\r\n                    formControlName=\"apiOrNot\"\r\n                    optionLabel=\"label\"\r\n                    optionValue=\"value\"\r\n                  ></p-selectButton>\r\n                  <div class=\"p-inputgroup w-fit-content filter-item\">\r\n                    <span class=\"p-input-icon-left\">\r\n                      <i class=\"pi pi-search\"></i>\r\n                      <input\r\n                        pInputText\r\n                        type=\"text\"\r\n                        formControlName=\"name\"\r\n                        placeholder=\"Pretraži ime\"\r\n                        class=\"w-100\"\r\n                        #searchInput\r\n                      />\r\n                    </span>\r\n                    <button\r\n                      type=\"button\"\r\n                      (click)=\"onResetSearch()\"\r\n                      pButton\r\n                      icon=\"pi pi-times\"\r\n                      styleClass=\"p-button-warn\"\r\n                    ></button>\r\n                  </div>\r\n                </div>\r\n                <div class=\"filter-buttons\">\r\n                  <button\r\n                    type=\"button\"\r\n                    (click)=\"resetFilter()\"\r\n                    pTooltip=\"Resetuj filtere\"\r\n                    icon=\"false\"\r\n                    pButton\r\n                    tooltipPosition=\"top\"\r\n                    class=\"main-btn only-icon-btn p-mr-1\"\r\n                  >\r\n                    <i class=\"pi pi-refresh\"></i>\r\n                  </button>\r\n                  <button type=\"submit\" pButton class=\"main-btn\">\r\n                    Pretraži <i class=\"pi pi-search\"></i>\r\n                  </button>\r\n                </div>\r\n              </form>\r\n              <button\r\n                class=\"main-btn w-100 toggle-filter-btn\"\r\n                type=\"button\"\r\n                (click)=\"toggleFilters()\"\r\n              >\r\n                Filteri <i class=\"pi pi-search\"></i>\r\n              </button>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"header\">\r\n              <tr>\r\n                <th>\r\n                  <div class=\"p-d-flex p-jc-between p-ai-center\">\r\n                    Naziv kategorije\r\n                  </div>\r\n                </th>\r\n                <th style=\"width: 8rem\">\r\n                  <div class=\"p-text-center\">Objavljena</div>\r\n                </th>\r\n                <th style=\"width: 8rem\">\r\n                  <div class=\"p-text-center\">Akcija</div>\r\n                </th>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template\r\n              pTemplate=\"body\"\r\n              let-categories\r\n              let-expanded=\"expanded\"\r\n              let-i=\"rowIndex\"\r\n            >\r\n              <tr>\r\n                <td>\r\n                  <span class=\"p-column-title\">Kategorija</span>\r\n                  {{ categories.languages[0].translation.name }}\r\n                </td>\r\n                <td>\r\n                  <div class=\"p-d-flex p-ai-center\">\r\n                    <span class=\"p-column-title\">Status</span>\r\n                    <p-inputSwitch\r\n                      [ngModel]=\"categories.active === 1 ? true : false\"\r\n                      (onChange)=\"\r\n                        onChangeStatus($event, categories.category_id)\r\n                      \"\r\n                      [name]=\"categories.languages[0].translation.name + i\"\r\n                    ></p-inputSwitch>\r\n                  </div>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Akcija</span>\r\n                  <ng-container *ngIf=\"categories.from_api !== 1\">\r\n                    <a\r\n                      class=\"second-btn small-btn p-mr-2\"\r\n                      pTooltip=\"Izmeni\"\r\n                      tooltipPosition=\"top\"\r\n                      [routerLink]=\"['edit', categories.category_id]\"\r\n                    >\r\n                      <i class=\"pi pi-pencil\"></i>\r\n                    </a>\r\n                    <button\r\n                      class=\"second-btn small-btn\"\r\n                      type=\"button\"\r\n                      pTooltip=\"Izbriši\"\r\n                      tooltipPosition=\"top\"\r\n                      (click)=\"onDelete($event, categories.category_id)\"\r\n                    >\r\n                      <i class=\"pi pi-trash\"></i>\r\n                    </button>\r\n                  </ng-container>\r\n                </td>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"emptymessage\">\r\n              <tr>\r\n                <td colspan=\"7\">Ni jedna kategorija nije pronađena.</td>\r\n              </tr>\r\n            </ng-template>\r\n          </p-table>\r\n          <p-paginator\r\n            #paginatorElement\r\n            [first]=\"1\"\r\n            [rows]=\"paginator.per_page\"\r\n            [showJumpToPageDropdown]=\"true\"\r\n            [showPageLinks]=\"true\"\r\n            [totalRecords]=\"paginator.total\"\r\n            (onPageChange)=\"onPageChange($event)\"\r\n            [showPageLinks]=\"false\"\r\n          ></p-paginator>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "CategoryAddComponent",
            "id": "component-CategoryAddComponent-e64012da61fc4889664b1246d02c1411",
            "file": "src/app/modules/products/categories/category-add/category-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-add",
            "styleUrls": [
                "./category-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./category-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addCatForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CategoriesFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "icon",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "image",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { CategoriesService } from 'src/app/core/services/categories.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { CategoriesFieldsService } from '../categories-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-category-add',\r\n  templateUrl: './category-add.component.html',\r\n  styleUrls: ['./category-add.component.scss'],\r\n})\r\nexport class CategoryAddComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  icon: fileList[] = [];\r\n  image: fileList[] = [];\r\n  addCatForm: FormGroup;\r\n  fd = new FormData();\r\n  subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private messService: MessServiceService,\r\n    private categoriesService: CategoriesService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    public fieldsService: CategoriesFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    this.addCatForm = this.fb.group({\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          name: ['', Validators.required],\r\n        }),\r\n        en: this.fb.group({\r\n          name: ['', Validators.required],\r\n        }),\r\n        de: this.fb.group({\r\n          name: ['', Validators.required],\r\n        }),\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Add category === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const catForm = this.addCatForm.getRawValue();\r\n    // catForm.post_status = catForm.post_status ? 1 : 0;\r\n    if (this.icon[0]) {\r\n      this.fd.append('icon', this.icon[0].originalFile);\r\n    }\r\n    if (this.image[0]) {\r\n      this.fd.append('image', this.image[0].originalFile);\r\n    }\r\n\r\n    this.fd.append('data', JSON.stringify(catForm));\r\n    console.log(this.fd.getAll('icon[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.addCatForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.categoriesService.createCategory(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu kategoriju.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.addCatForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./category-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "CategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "CategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"KATEGORIJE - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"addCatForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-6 p-pb-0\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Ikonica</label>\r\n          <app-image-upload\r\n            [instanceIndex]=\"0\"\r\n            [fileList]=\"icon\"\r\n            [fileSize]=\"0.5\"\r\n            [includeSeo]=\"false\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n        </div>\r\n      </div>\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [instanceIndex]=\"1\"\r\n            [fileList]=\"image\"\r\n            [includeSeo]=\"false\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\">\r\n              Preporučena dimenzija za sliku je 700x150</span\r\n            >\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "CategoryEditComponent",
            "id": "component-CategoryEditComponent-558be65cd0e4b3993bc3de10de71cc25",
            "file": "src/app/modules/products/categories/category-edit/category-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-edit",
            "styleUrls": [
                "./category-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./category-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "currentCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "editCatForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CategoriesFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "icon",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "image",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { CategoriesService } from 'src/app/core/services/categories.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { CategoriesFieldsService } from '../categories-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-category-edit',\r\n  templateUrl: './category-edit.component.html',\r\n  styleUrls: ['./category-edit.component.scss'],\r\n})\r\nexport class CategoryEditComponent implements OnInit {\r\n  loading = false;\r\n  editCatForm: FormGroup;\r\n  currentCategory;\r\n  categoryId: number;\r\n  subscriptions: Subscription[] = [];\r\n  icon: fileList[] = [];\r\n  image: fileList[] = [];\r\n  fd = new FormData();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private categoriesService: CategoriesService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    public fieldsService: CategoriesFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get category ID\r\n    this.categoryId = +this.route.snapshot.params.id;\r\n\r\n    this.editCatForm = this.fb.group({\r\n      id: [this.categoryId],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          name: ['', Validators.required],\r\n        }),\r\n        en: this.fb.group({\r\n          name: ['', Validators.required],\r\n        }),\r\n        de: this.fb.group({\r\n          name: ['', Validators.required],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get current category data & update form\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getOneCategory(this.categoryId)\r\n        .subscribe((response: any) => {\r\n          this.currentCategory = response;\r\n          console.log(response);\r\n\r\n          // Show old icon\r\n          if (response.icon) {\r\n            this.icon.push({\r\n              originalFile: null,\r\n              imageLocalUrl: `${environment.mediaUrl}/${response.icon}`,\r\n            });\r\n          }\r\n          // Show old image\r\n          if (response.image) {\r\n            this.image.push({\r\n              originalFile: null,\r\n              imageLocalUrl: `${environment.mediaUrl}/${response.image}`,\r\n            });\r\n          }\r\n\r\n          // Patch form\r\n          this.getLangFormGroup('sr').patchValue({\r\n            name: response.languages[0].translation.name,\r\n          });\r\n          this.getLangFormGroup('en').patchValue({\r\n            name: response.languages[1].translation.name,\r\n          });\r\n          this.getLangFormGroup('de').patchValue({\r\n            name: response.languages[2].translation.name,\r\n          });\r\n        })\r\n    );\r\n  }\r\n\r\n  // * Add category === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const catForm = this.editCatForm.getRawValue();\r\n    // catForm.post_status = catForm.post_status ? 1 : 0;\r\n    if (this.icon[0]) {\r\n      this.fd.append('icon', this.icon[0].originalFile);\r\n    }\r\n    if (this.image[0]) {\r\n      this.fd.append('image', this.image[0].originalFile);\r\n    }\r\n    this.fd.append('data', JSON.stringify(catForm));\r\n    console.log(this.fd.getAll('icon[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.editCatForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.categoriesService.updateCategory(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu kategoriju.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.editCatForm.get(`locale.${langCode}`);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./category-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "CategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "CategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"KATEGORIJE - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!currentCategory\"\r\n  [formGroup]=\"editCatForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"card-body\">\r\n      <div class=\"p-grid\">\r\n        <div class=\"p-col-12 p-sm-6 p-pb-0\">\r\n          <p-tabView>\r\n            <p-tabPanel header=\"Srpski\">\r\n              <app-form-builder\r\n                [form]=\"getLangFormGroup('sr')\"\r\n                [fields]=\"fieldsService.mainFields\"\r\n              ></app-form-builder>\r\n            </p-tabPanel>\r\n            <p-tabPanel header=\"Engleski\">\r\n              <app-form-builder\r\n                [form]=\"getLangFormGroup('en')\"\r\n                [fields]=\"fieldsService.mainFields\"\r\n              ></app-form-builder>\r\n            </p-tabPanel>\r\n            <p-tabPanel header=\"Nemački\">\r\n              <app-form-builder\r\n                [form]=\"getLangFormGroup('de')\"\r\n                [fields]=\"fieldsService.mainFields\"\r\n              ></app-form-builder>\r\n            </p-tabPanel>\r\n          </p-tabView>\r\n        </div>\r\n      </div>\r\n      <div class=\"p-grid\">\r\n        <div class=\"p-col-12\">\r\n          <div class=\"p-field w-100\">\r\n            <label>Ikonica</label>\r\n            <app-image-upload\r\n              [fileList]=\"icon\"\r\n              [fileSize]=\"0.5\"\r\n              [includeSeo]=\"false\"\r\n              [maxImages]=\"1\"\r\n            ></app-image-upload>\r\n          </div>\r\n        </div>\r\n        <div class=\"p-col-12\">\r\n          <div class=\"p-field w-100\">\r\n            <label>Slika</label>\r\n            <app-image-upload\r\n              [fileList]=\"image\"\r\n              [includeSeo]=\"false\"\r\n              [maxImages]=\"1\"\r\n            ></app-image-upload>\r\n            <section class=\"p-mt-2\">\r\n              <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n              <span class=\"p-ml-1\">\r\n                Preporučena dimenzija za sliku je 700x150</span\r\n              >\r\n            </section>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "CloseIconComponent",
            "id": "component-CloseIconComponent-0e1d229f7538e4832c4da4e205025745",
            "file": "src/app/shared/components/close-icon/close-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-close-icon",
            "styleUrls": [
                "./close-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./close-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { MenuToggleService } from 'src/app/core/services/menu-toggle.service';\n\n@Component({\n  selector: 'app-close-icon',\n  templateUrl: './close-icon.component.html',\n  styleUrls: ['./close-icon.component.scss']\n})\nexport class CloseIconComponent implements OnInit, OnDestroy {\n  isOpen: boolean;\n  styleClass;\n  subscriptions: Subscription[] = [];\n\n  constructor(private menuToggle: MenuToggleService) { }\n\n  ngOnInit(): void {\n    this.subscriptions.push(\n      this.menuToggle.currentState.subscribe(state => {\n        this.toggle();\n      })\n    )\n    this.isOpen = window.innerWidth < 500 ? false : true;\n    this.toggle();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\n  }\n\n  toggle(){\n    this.isOpen = !this.isOpen\n    this.styleClass = this.isOpen ? 'is-closed' : 'is-open';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './../../../../assets/scss/partials/variables';\r\n\r\n// vars\r\n$color: #fff;\t\t  // icon color\r\n$blue: transparent;\t  // background color\r\n$animation: 0.6s;\t// animation speed\r\n$scale: .4;\t\t\t  // icon scale 68/68 default\r\n\r\n\r\n// spacing + background-color\r\n.hamburglar {\r\n  transform: scale($scale);\r\n  margin: auto;\r\n  position: relative;\r\n  display: block;\r\n  width: 68px;\r\n  height: 68px;\r\n  background: $blue;\r\n  -webkit-touch-callout: none;\r\n\tuser-select: none;\r\n}\r\n\r\n// transition mask\r\n.path-burger {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 68px;\r\n  width: 68px;\r\n  // two masks because... browser support.\r\n  mask: url(#mask);\r\n  -webkit-mask-box-image: url(https://raygun.io/upload/mask.svg);\r\n}\r\n\r\n.animate-path {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 68px;\r\n  height: 68px;\r\n}\r\n\r\n// what this does is create a small square that I then rotate behind an svg mask, giving the apparence of the line animating\r\n.path-rotation {\r\n  height: 34px;\r\n  width: 34px;\r\n  margin: 34px 34px 0 0;\r\n  transform: rotate(0deg);\r\n  transform-origin: 100% 0;\r\n  &:before {\r\n    content: '';\r\n    display: block;\r\n    width: 30px;\r\n    height: 34px;\r\n    margin: 0 4px 0 0;\r\n    background: $color;\r\n  }\r\n}\r\n\r\n// box rotation animation\r\n@keyframes rotate-out {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  40% {\r\n    transform: rotate(180deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n@keyframes rotate-in {\r\n  0% {\r\n    transform: rotate(360deg);\r\n  }\r\n  40% {\r\n    transform: rotate(180deg);\r\n  }\r\n  100% {\r\n    transform: rotate(0deg);\r\n  }\r\n}\r\n\r\n// offset moves\r\n// dasharray is the dash size\r\n// need to be able to control dash space size.\r\n\r\n.hamburglar.is-open {\r\n  .path {\r\n    animation: dash-in $animation linear normal;\r\n    animation-fill-mode:forwards;\r\n  }\r\n  .animate-path {\r\n    animation: rotate-in $animation linear normal;\r\n    animation-fill-mode:forwards;\r\n  }\r\n}\r\n\r\n.hamburglar.is-closed {\r\n  .path {\r\n    animation: dash-out $animation linear normal;\r\n    animation-fill-mode:forwards;\r\n  }\r\n  .animate-path {\r\n    animation: rotate-out $animation linear normal;\r\n    animation-fill-mode:forwards;\r\n  }\r\n}\r\n\r\n.path {\r\n  stroke-dasharray: 240;\r\n  stroke-dashoffset: 240;\r\n  stroke-linejoin: round;\r\n}\r\n\r\n@keyframes dash-in {\r\n  0% {\r\n    stroke-dashoffset: 240;\r\n  }\r\n  40% {\r\n    stroke-dashoffset: 240;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: 0;\r\n  }\r\n}\r\n@keyframes dash-out {\r\n  0% {\r\n    stroke-dashoffset: 0;\r\n  }\r\n  40% {\r\n    stroke-dashoffset: 240;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: 240;\r\n  }\r\n}\r\n\r\n\r\n\r\n// All good burgers need filling!\r\n\r\n.burger-icon {\r\n  position: absolute;\r\n  padding: 20px 16px;\r\n  height: 68px;\r\n  width: 68px;\r\n}\r\n\r\n.burger-container {\r\n  position: relative;\r\n  height: 28px;\r\n  width: 36px;\r\n}\r\n\r\n.burger-bun-top,\r\n.burger-bun-bot,\r\n.burger-filling {\r\n  position: absolute;\r\n  display: block;\r\n  height: 4px;\r\n  width: 36px;\r\n  border-radius: 2px;\r\n  background: $color;\r\n  transition: all .3s;\r\n}\r\n\r\n.hamburglar:hover{\r\n  .burger-bun-top,\r\n  .burger-bun-bot,\r\n  .burger-filling {\r\n    background: $main-color;\r\n    transition: all .3s;\r\n  }\r\n}\r\n\r\n.burger-bun-top {\r\n  top: 0;\r\n  transform-origin: 34px 2px;\r\n}\r\n\r\n.burger-bun-bot {\r\n  bottom: 0;\r\n  transform-origin: 34px 2px;\r\n}\r\n//.burger-filling {\r\n//  @include transition(all,($animation/2.5),ease-in-//out);\r\n//}\r\n// relative parent is the button\r\n.burger-filling {\r\n  top: 12px;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// burger ring container\r\n.burger-ring {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 68px;\r\n  height: 68px;\r\n}\r\n\r\n.svg-ring {\r\n  width: 68px;\r\n  height: 68px;\r\n}\r\n\r\n\r\n// bun animations\r\n.hamburglar.is-open {\r\n  .burger-bun-top {\r\n    animation: bun-top-out $animation linear normal;\r\n    animation-fill-mode:forwards;\r\n  }\r\n  .burger-bun-bot {\r\n    animation: bun-bot-out $animation linear normal;\r\n    animation-fill-mode:forwards;\r\n  }\r\n}\r\n.hamburglar.is-closed {\r\n  .burger-bun-top {\r\n    animation: bun-top-in $animation linear normal;\r\n    animation-fill-mode:forwards;\r\n  }\r\n  .burger-bun-bot {\r\n    animation: bun-bot-in $animation linear normal;\r\n    animation-fill-mode:forwards;\r\n  }\r\n}\r\n\r\n@keyframes bun-top-out {\r\n  0% {\r\n    left: 0;\r\n    top: 0;\r\n    transform: rotate(0deg);\r\n  }\r\n  20% {\r\n    left: 0;\r\n    top: 0;\r\n    transform: rotate(15deg);\r\n  }\r\n  80% {\r\n    left: -5px;\r\n    top: 0;\r\n    transform: rotate(-60deg);\r\n  }\r\n  100% {\r\n    left: -5px;\r\n    top: 1px;\r\n    transform: rotate(-45deg);\r\n  }\r\n}\r\n\r\n@keyframes bun-bot-out {\r\n  0% {\r\n    left: 0;\r\n    transform: rotate(0deg);\r\n  }\r\n  20% {\r\n    left: 0;\r\n    transform: rotate(-15deg);\r\n  }\r\n  80% {\r\n    left: -5px;\r\n    transform: rotate(60deg);\r\n  }\r\n  100% {\r\n    left: -5px;\r\n    transform: rotate(45deg);\r\n  }\r\n}\r\n\r\n\r\n@keyframes bun-top-in {\r\n  0% {\r\n    left: -5px;\r\n    bot: 0;\r\n    transform: rotate(-45deg);\r\n  }\r\n  20% {\r\n    left: -5px;\r\n    bot: 0;\r\n    transform: rotate(-60deg);\r\n  }\r\n  80% {\r\n    left: 0;\r\n    bot: 0;\r\n    transform: rotate(15deg);\r\n  }\r\n  100% {\r\n    left: 0;\r\n    bot: 1px;\r\n    transform: rotate(0deg);\r\n  }\r\n}\r\n\r\n@keyframes bun-bot-in {\r\n  0% {\r\n    left: -5px;\r\n    transform: rotate(45deg);\r\n  }\r\n  20% {\r\n    left: -5px;\r\n    bot: 0;\r\n    transform: rotate(60deg);\r\n  }\r\n  80% {\r\n    left: 0;\r\n    bot: 0;\r\n    transform: rotate(-15deg);\r\n  }\r\n  100% {\r\n    left: 0;\r\n    transform: rotate(0deg);\r\n  }\r\n}\r\n\r\n\r\n// burger filling\r\n.hamburglar.is-open {\r\n  .burger-filling {\r\n    animation: burger-fill-out $animation linear normal;\r\n    animation-fill-mode:forwards;\r\n  }\r\n}\r\n\r\n.hamburglar.is-closed {\r\n  .burger-filling {\r\n    animation: burger-fill-in $animation linear normal;\r\n    animation-fill-mode:forwards;\r\n  }\r\n}\r\n\r\n@keyframes burger-fill-in {\r\n  0% {\r\n    width: 0;\r\n    left: 36px;\r\n  }\r\n  40% {\r\n    width: 0;\r\n    left: 40px;\r\n  }\r\n  80% {\r\n    width: 36px;\r\n    left: -6px;\r\n  }\r\n  100% {\r\n    width: 36px;\r\n    left: 0px;\r\n  }\r\n}\r\n\r\n@keyframes burger-fill-out {\r\n  0% {\r\n    width: 36px;\r\n    left: 0px;\r\n  }\r\n  20% {\r\n    width: 42px;\r\n    left: -6px;\r\n  }\r\n\r\n  40% {\r\n    width: 0;\r\n    left: 40px;\r\n  }\r\n\r\n  100% {\r\n    width: 0;\r\n    left: 36px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./close-icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div id=\"hamburger\" class=\"hamburglar\" [class]=\"styleClass\">\n  <div class=\"burger-icon\">\n    <div class=\"burger-container\">\n      <span class=\"burger-bun-top\"></span>\n      <span class=\"burger-filling\"></span>\n      <span class=\"burger-bun-bot\"></span>\n    </div>\n  </div>\n\n  <!-- svg ring containter -->\n  <div class=\"burger-ring\">\n    <svg class=\"svg-ring\">\n      <path\n        class=\"path\"\n        fill=\"none\"\n        stroke=\"#fff\"\n        stroke-miterlimit=\"2\"\n        stroke-width=\"4\"\n        d=\"M 34 2 C 16.3 2 2 16.3 2 34 s 14.3 32 32 32 s 32 -14.3 32 -32 S 51.7 2 34 2\"\n      />\n    </svg>\n  </div>\n  <!-- the masked path that animates the fill to the ring -->\n\n  <svg width=\"0\" height=\"0\">\n    <mask id=\"mask\">\n      <path\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"none\"\n        stroke=\"#ff0000\"\n        stroke-miterlimit=\"10\"\n        stroke-width=\"4\"\n        d=\"M 34 2 c 11.6 0 21.8 6.2 27.4 15.5 c 2.9 4.8 5 16.5 -9.4 16.5 h -4\"\n      />\n    </mask>\n  </svg>\n  <div class=\"path-burger\">\n    <div class=\"animate-path\">\n      <div class=\"path-rotation\"></div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CompanyValueAddComponent",
            "id": "component-CompanyValueAddComponent-2979025b07aaccb510a7c9858808344d",
            "file": "src/app/modules/sections/company-value/company-value-add/company-value-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-company-value-add",
            "styleUrls": [
                "./company-value-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./company-value-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompanyValueFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { CompanyValueFieldsService } from '../company-value-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-company-value-add',\r\n  templateUrl: './company-value-add.component.html',\r\n  styleUrls: ['./company-value-add.component.scss']\r\n})\r\nexport class CompanyValueAddComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  fd = new FormData();\r\n  fileList: fileList[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: CompanyValueFieldsService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      parent: ['12'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          content: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n  }\r\n\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu ikonicu.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string){\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./company-value-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "CompanyValueFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "CompanyValueFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"VREDNOSTI KOMPANIJE - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"post\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Ikonica</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\"> Preporučena dimenzija za sliku je 80x80</span>\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "CompanyValueComponent",
            "id": "component-CompanyValueComponent-70f94b73363a7cf5f539357617552223",
            "file": "src/app/modules/sections/company-value/company-value.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-company-value",
            "styleUrls": [
                "./company-value.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./company-value.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompanyValueFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { environment } from 'src/environments/environment';\r\nimport { CompanyValueFieldsService } from './company-value-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-company-value',\r\n  templateUrl: './company-value.component.html',\r\n  styleUrls: ['./company-value.component.scss'],\r\n})\r\nexport class CompanyValueComponent implements OnInit {\r\n  orderItems;\r\n  postForm: FormGroup;\r\n  postData;\r\n  loading = false;\r\n  postId: number;\r\n  subscriptions: Subscription[] = [];\r\n  mediaUrl = environment.mediaUrl;\r\n  fd = new FormData();\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData: ReorderData[] = [];\r\n\r\n  constructor(\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private confirmationService: ConfirmationService,\r\n    public fieldsService: CompanyValueFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.postId = +this.route.snapshot.params.sectionId;\r\n\r\n    // Form init\r\n    this.postForm = this.fb.group({\r\n      id: ['12'],\r\n      post_type: ['post'],\r\n      post_name: ['company_value'],\r\n      parent: ['1'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          post_type: ['post'],\r\n          title: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          post_type: ['post'],\r\n          title: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          post_type: ['post'],\r\n          title: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit\r\n  onSubmit() {\r\n    const pageForm = this.postForm.getRawValue();\r\n    console.log(pageForm);\r\n\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili stranicu',\r\n          });\r\n          // this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete unos?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste unos.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        // this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.orderItems = response.posts;\r\n        if (this.orderItems) {\r\n          this.orderItems.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.title,\r\n              subtitle: element.locale.sr.content,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n              image: element.locale.en.attachments[0]\r\n                ? element.locale.en.attachments[0].name\r\n                : null,\r\n            });\r\n          });\r\n        }\r\n        this.loading = false;\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  patchForm() {\r\n    this.getLangFormGroup('sr').patchValue({\r\n      title: this.postData.locale.sr.title,\r\n    });\r\n    this.getLangFormGroup('en').patchValue({\r\n      title: this.postData.locale.en.title,\r\n    });\r\n    this.getLangFormGroup('de').patchValue({\r\n      title: this.postData.locale.de.title,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./company-value.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "CompanyValueFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "CompanyValueFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"VREDNOSTI KOMPANIJE\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showAddButton]=\"true\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Ikonice\">\r\n            <p-panel header=\"Sve ikonice\">\r\n              <app-post-reorder\r\n                [arrayForOrder]=\"postOrder\"\r\n                [orderItems]=\"reorderData\"\r\n                (itemDeleted)=\"updatePageView()\"\r\n              >\r\n              </app-post-reorder>\r\n            </p-panel>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Opis sekcije\">\r\n            <p-tabView>\r\n              <p-tabPanel header=\"Srpski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('sr')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Engleski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('en')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Nemački\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('de')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n            </p-tabView>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "CompanyValueEditComponent",
            "id": "component-CompanyValueEditComponent-06583d757235a1e74b5233a99823d514",
            "file": "src/app/modules/sections/company-value/company-value-edit/company-value-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-company-value-edit",
            "styleUrls": [
                "./company-value-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./company-value-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompanyValueFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangAttachments",
                    "args": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { CompanyValueFieldsService } from '../company-value-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-company-value-edit',\r\n  templateUrl: './company-value-edit.component.html',\r\n  styleUrls: ['./company-value-edit.component.scss']\r\n})\r\nexport class CompanyValueEditComponent implements OnInit {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  postId: number;\r\n  postData;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: CompanyValueFieldsService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    // Get post ID\r\n    this.postId = +this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['12'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          content: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        response.locale.sr.attachments.forEach(\r\n          (attachment) => {\r\n            this.getLangAttachments('sr').push(\r\n              this.fb.group({\r\n                title: [attachment.title],\r\n                alt: [attachment.alt],\r\n                name: [attachment.name],\r\n              })\r\n            );\r\n\r\n            // Show old images\r\n            this.fileList.push({\r\n              originalFile: null,\r\n              imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n              fileName: attachment.name,\r\n            });\r\n          }\r\n        );\r\n\r\n        this.patchLangAttachments(response,'en');\r\n        this.patchLangAttachments(response,'de');\r\n\r\n        this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi blog post.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string){\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  patchLangAttachments(attachArray,langCode: string){\r\n    attachArray.locale[langCode].attachments.forEach(\r\n      (attachment) => {\r\n        this.getLangAttachments(langCode).push(\r\n          this.fb.group({\r\n            title: [attachment.title],\r\n            alt: [attachment.alt],\r\n            name: [attachment.name],\r\n          })\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  patchLangForm(langCode: string){\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n      content: this.postData.locale[langCode].content,\r\n    });\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./company-value-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "CompanyValueFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "CompanyValueFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"VREDNOSTI KOMPANIJE - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"post\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Ikonica</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\"> Preporučena dimenzija za sliku je 80x80</span>\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "ContactComponent",
            "id": "component-ContactComponent-3f16727045e907bdd9900a20058f3e5b",
            "file": "src/app/modules/pages/contact/contact.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contact",
            "styleUrls": [
                "./contact.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./contact.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContactFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "websiteUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ContactFieldsService } from './contact-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-contact',\r\n  templateUrl: './contact.component.html',\r\n  styleUrls: ['./contact.component.scss'],\r\n})\r\nexport class ContactComponent implements OnInit, OnDestroy {\r\n  pageForm: FormGroup;\r\n  pageId: number;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  websiteUrl = environment.apiUrl;\r\n  loading = false;\r\n\r\n  constructor(\r\n    private messService: MessServiceService,\r\n    private postsService: PostsService,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: ContactFieldsService,\r\n    private fb: FormBuilder\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      id: [''],\r\n      post_type: ['page'],\r\n      post_status: [''],\r\n      post_name: ['contact'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          content: [''],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.pageId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.websiteUrl = `${this.websiteUrl}/${response.locale.sr.slug}`;\r\n\r\n        this.pageData = response;\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const pageForm = this.pageForm.getRawValue();\r\n    pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(pageForm);\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili stranicu',\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.pageData.locale[langCode].title,\r\n      content: this.pageData.locale[langCode].content,\r\n      slug: this.pageData.locale[langCode].slug,\r\n      meta_title: this.pageData.locale[langCode].meta_title,\r\n      meta_description: this.pageData.locale[langCode].meta_description,\r\n      meta_keywords: this.pageData.locale[langCode].meta_keywords,\r\n    });\r\n  }\r\n\r\n  patchForm() {\r\n    this.patchLangForm('sr');\r\n    this.patchLangForm('en');\r\n    this.patchLangForm('de');\r\n\r\n    this.pageForm.patchValue({\r\n      id: this.pageData.id,\r\n      post_status: this.pageData.post_status,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./contact.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "ContactFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "ContactFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"GENERAL\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!pageData\"\r\n  [pageData]=\"pageData\"\r\n  [formGroup]=\"pageForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"true\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "ContentLayoutComponent",
            "id": "component-ContentLayoutComponent-3749b13e1d77b5e46b6dc1d9c932a0e4",
            "file": "src/app/shared/components/templates/content-layout/content-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-content-layout",
            "styleUrls": [
                "./content-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./content-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any[]"
                },
                {
                    "name": "blockUiText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "FormGroup"
                },
                {
                    "name": "headerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "headerType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"main\" | \"inner\""
                },
                {
                    "name": "layoutType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "\"page\" | \"section\" | \"post\""
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "any"
                },
                {
                    "name": "showAddButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "showOnOff",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "showPreviewButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "skeletonLoad",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "onSubmit",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "backPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "blockUiText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "dataForPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "headerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "headerType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"main\" | \"inner\"",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "layoutType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"page\" | \"section\" | \"post\"",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Output",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "sectionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "showAddButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "showOnOff",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "showPreviewButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "skeletonLoad",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "websiteUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangePageStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { environment } from 'src/environments/environment';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-content-layout',\r\n  templateUrl: './content-layout.component.html',\r\n  styleUrls: ['./content-layout.component.scss'],\r\n})\r\nexport class ContentLayoutComponent implements OnInit {\r\n  @Input() loading: boolean = false;\r\n  @Input() formGroup: FormGroup;\r\n  @Input() skeletonLoad: boolean = false;\r\n  @Input() headerTitle: string;\r\n  @Input() headerType: 'main' | 'inner';\r\n  @Input() backPath: any[];\r\n  @Input() showPreviewButton: boolean = false;\r\n  @Input() showAddButton: boolean = false;\r\n  @Input() showOnOff: boolean = true;\r\n  @Output() onSubmit = new EventEmitter<any>();\r\n  @Input() blockUiText: string;\r\n  @Input() layoutType: 'page' | 'section' | 'post';\r\n  // @Input() pageData: any;\r\n  pageId;\r\n  sectionId;\r\n  dataForPage;\r\n  websiteUrl = environment.apiUrl;\r\n  @Input() set pageData(value) {\r\n    if (value) {\r\n      this.dataForPage = value;\r\n      this.websiteUrl = `${this.websiteUrl}/${value.locale?.sr.slug}`;\r\n    }\r\n  }\r\n  subscriptions: Subscription[] = [];\r\n  constructor(\r\n    private messService: MessServiceService,\r\n    private postsService: PostsService,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    if (this.layoutType === 'section') {\r\n      this.pageId = +this.route.snapshot.params['sectionId'];\r\n    } else if (this.layoutType === 'post') {\r\n      this.pageId = +this.route.snapshot.params['postId'];\r\n    } else {\r\n      this.pageId = +this.route.snapshot.params['id'];\r\n    }\r\n  }\r\n\r\n  onSubmitForm() {\r\n    this.onSubmit.emit(true);\r\n  }\r\n\r\n  onChangePageStatus(event, pageId: number) {\r\n    console.log(event);\r\n    console.log(pageId);\r\n    const status = {\r\n      status: event.checked ? 1 : 0,\r\n    };\r\n    this.subscriptions.push(\r\n      this.postsService.updatePostStatus(pageId, status).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno menjanje statusa',\r\n            detail: 'Uspešno ste promenili vidljivost stranice.',\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./content-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "pageData": {
                    "name": "pageData",
                    "setSignature": {
                        "name": "pageData",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<app-block-ui [loading]=\"loading\">\r\n  <ng-container *ngIf=\"blockUiText; else elseTemplate\">\r\n    {{ blockUiText }}\r\n  </ng-container>\r\n  <ng-template #elseTemplate>\r\n    Obrada zahteva u toku. <br />\r\n    Molimo sačekajte.\r\n  </ng-template>\r\n</app-block-ui>\r\n\r\n<!-- <ng-container *ngIf=\"formGroup; else elseTemplate\"> -->\r\n<form\r\n  [attr.formGroup]=\"formGroup ? formGroup : null\"\r\n  (ngSubmit)=\"onSubmitForm()\"\r\n>\r\n  <div class=\"main-card\">\r\n    <div class=\"card-header\">\r\n      <a\r\n        *ngIf=\"headerType === 'inner'\"\r\n        class=\"main-btn back-btn\"\r\n        [routerLink]=\"backPath\"\r\n        ><i class=\"pi pi-angle-left p-m-0\"></i\r\n      ></a>\r\n      <h1\r\n        *ngIf=\"headerType === 'main' && headerTitle\"\r\n        class=\"card-title p-text-uppercase\"\r\n      >\r\n        {{ headerTitle }}\r\n      </h1>\r\n      <section class=\"p-d-flex p-ai-center\">\r\n        <ng-content select=\"[buttons]\"></ng-content>\r\n        <a\r\n          *ngIf=\"dataForPage && showPreviewButton\"\r\n          [href]=\"websiteUrl\"\r\n          target=\"_blank\"\r\n          class=\"main-btn main-btn-outlined p-mr-2\"\r\n        >\r\n          Pregledaj\r\n          <i class=\"pi pi-reply\"></i>\r\n        </a>\r\n        <!-- <a\r\n          *ngIf=\"showAddButton\"\r\n          [routerLink]=\"['./add']\"\r\n          class=\"main-btn p-mr-2\"\r\n        >\r\n          Dodaj <i class=\"pi pi-plus\"></i>\r\n        </a> -->\r\n        <app-button\r\n          *ngIf=\"showAddButton\"\r\n          type=\"button\"\r\n          btnStyle=\"main\"\r\n          styleClass=\"main-btn p-mr-2\"\r\n          [routerLink]=\"['./add']\"\r\n          icon=\"plus\"\r\n          >Dodaj</app-button\r\n        >\r\n        <app-button\r\n          *ngIf=\"formGroup\"\r\n          [disabled]=\"!formGroup.valid\"\r\n          type=\"button\"\r\n          btnStyle=\"main\"\r\n          icon=\"save\"\r\n          (click)=\"onSubmitForm()\"\r\n          >Snimi</app-button\r\n        >\r\n      </section>\r\n    </div>\r\n    <div *ngIf=\"headerType === 'inner'\" class=\"card-title-section\">\r\n      <h2 class=\"card-title\">{{ headerTitle }}</h2>\r\n\r\n      <div\r\n        class=\"p-field p-flex-row p-ai-center p-m-0\"\r\n        *ngIf=\"headerType === 'inner' && dataForPage\"\r\n      >\r\n        <label>Objavljena</label>\r\n        <p-inputSwitch\r\n          styleClass=\"p-ml-2\"\r\n          [ngModelOptions]=\"{ standalone: true }\"\r\n          [ngModel]=\"dataForPage.post_status === 1 ? true : false\"\r\n          (onChange)=\"onChangePageStatus($event, pageId)\"\r\n          [name]=\"dataForPage.post_name\"\r\n        ></p-inputSwitch>\r\n      </div>\r\n    </div>\r\n    <ng-container *ngIf=\"skeletonLoad; else formTemplate\">\r\n      <div class=\"card-body\">\r\n        <app-skeleton></app-skeleton>\r\n      </div>\r\n    </ng-container>\r\n    <ng-template #formTemplate>\r\n      <div class=\"card-body\">\r\n        <ng-content select=\"[content]\"></ng-content>\r\n      </div>\r\n    </ng-template>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "CtaComponent",
            "id": "component-CtaComponent-c1bd6d78fbd52a3c225cba6b47d46e61",
            "file": "src/app/modules/sections/cta/cta.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cta",
            "styleUrls": [
                "./cta.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cta.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CtaFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { CtaFieldsService } from './cta-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-cta',\r\n  templateUrl: './cta.component.html',\r\n  styleUrls: ['./cta.component.scss'],\r\n})\r\nexport class CtaComponent implements OnInit, OnDestroy {\r\n  postForm: FormGroup;\r\n  pageId: number;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  loading = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: CtaFieldsService,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    // Create page form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      post_type: ['global_section'],\r\n      post_status: [1],\r\n      post_name: ['cta'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          button_link: ['', Validators.required],\r\n          button_text: ['', Validators.required],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.pageId).subscribe((response: any) => {\r\n        this.pageData = response;\r\n        console.log(response);\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n\r\n    const postForm = this.postForm.getRawValue();\r\n    // pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(postForm);\r\n\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    // console.log(this.fd.get('data'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili sekciju',\r\n          });\r\n          // this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.pageData.locale[langCode].title,\r\n      button_link: this.pageData.locale[langCode].button_link,\r\n      button_text: this.pageData.locale[langCode].button_text,\r\n    });\r\n  }\r\n\r\n  patchForm() {\r\n    this.patchLangForm('sr');\r\n    this.patchLangForm('en');\r\n    this.patchLangForm('de');\r\n\r\n    this.postForm.patchValue({\r\n      id: this.pageId,\r\n      post_status: this.pageData.post_status,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cta.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "CtaFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "CtaFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"CTA\"\r\n  [backPath]=\"['./../../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!pageData\"\r\n  [pageData]=\"pageData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "DownloadAddComponent",
            "id": "component-DownloadAddComponent-9a0c64b0c1589d91d284041a68549cdf",
            "file": "src/app/modules/pages/download/download-add/download-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-download-add",
            "styleUrls": [
                "./download-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./download-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DownloadFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { DownloadFieldsService } from '../download-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-download-add',\r\n  templateUrl: './download-add.component.html',\r\n  styleUrls: ['./download-add.component.scss'],\r\n})\r\nexport class DownloadAddComponent implements OnInit {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    public fieldsService: DownloadFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      parent: ['5'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          posts: this.fb.group({\r\n            post_type: ['post'],\r\n            title: [''],\r\n            attachments: this.fb.array([]),\r\n          }),\r\n        }),\r\n        en: this.fb.group({\r\n          posts: this.fb.group({\r\n            post_type: ['post'],\r\n            title: [''],\r\n            attachments: this.fb.array([]),\r\n          }),\r\n        }),\r\n        de: this.fb.group({\r\n          posts: this.fb.group({\r\n            post_type: ['post'],\r\n            title: [''],\r\n            attachments: this.fb.array([]),\r\n          }),\r\n        }),\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi blog post.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}.posts`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.postForm.get(\r\n      `locale.${langCode}.posts.attachments`\r\n    ) as FormArray;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./download-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "DownloadFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "DownloadFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"DOWNLOAD - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView styleClass=\"p-p-0\">\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.singlePostFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.singlePostFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.singlePostFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Fajl</label>\r\n          <app-file-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [fileSize]=\"20\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxFiles]=\"1\"\r\n          >\r\n          </app-file-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "DownloadComponent",
            "id": "component-DownloadComponent-b9d668cdde109d1b90aa9d466e5d414f",
            "file": "src/app/modules/pages/download/download.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-download",
            "styleUrls": [
                "./download.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./download.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DownloadFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "websiteUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "Id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { environment } from 'src/environments/environment';\r\nimport { DownloadFieldsService } from './download-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-download',\r\n  templateUrl: './download.component.html',\r\n  styleUrls: ['./download.component.scss'],\r\n})\r\nexport class DownloadComponent implements OnInit {\r\n  loading = false;\r\n  pageForm: FormGroup;\r\n  pageId: number;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  files;\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData: ReorderData[] = [];\r\n  websiteUrl = environment.apiUrl;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private messService: MessServiceService,\r\n    private route: ActivatedRoute,\r\n    private postsService: PostsService,\r\n    private confirmationService: ConfirmationService,\r\n    public fieldsService: DownloadFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      id: [''],\r\n      post_type: ['page'],\r\n      post_status: [''],\r\n      post_name: ['download'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete fajl?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste fajl.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    const pageForm = this.pageForm.getRawValue();\r\n    pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(pageForm);\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili stranicu',\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Change status\r\n  onChangeStatus(event, Id: number) {\r\n    console.log(event);\r\n    const status = {\r\n      status: event.checked ? 1 : 0,\r\n    };\r\n    this.subscriptions.push(\r\n      this.postsService.updatePostStatus(Id, status).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno menjanje statusa',\r\n            detail: 'Uspešno ste promenili vidljivost.',\r\n          });\r\n          // this.updateTable(1);\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  patchForm() {\r\n    this.getLangFormGroup('sr').patchValue({\r\n      title: this.pageData.locale.sr.title,\r\n      content: this.pageData.locale.sr.content,\r\n      slug: this.pageData.locale.sr.slug,\r\n      meta_title: this.pageData.locale.sr.meta_title,\r\n      meta_description: this.pageData.locale.sr.meta_description,\r\n      meta_keywords: this.pageData.locale.sr.meta_keywords,\r\n    });\r\n    this.getLangFormGroup('en').patchValue({\r\n      title: this.pageData.locale.en.title,\r\n      content: this.pageData.locale.en.content,\r\n      slug: this.pageData.locale.en.slug,\r\n      meta_title: this.pageData.locale.en.meta_title,\r\n      meta_description: this.pageData.locale.en.meta_description,\r\n      meta_keywords: this.pageData.locale.en.meta_keywords,\r\n    });\r\n    this.getLangFormGroup('de').patchValue({\r\n      title: this.pageData.locale.de.title,\r\n      content: this.pageData.locale.de.content,\r\n      slug: this.pageData.locale.de.slug,\r\n      meta_title: this.pageData.locale.de.meta_title,\r\n      meta_description: this.pageData.locale.de.meta_description,\r\n      meta_keywords: this.pageData.locale.de.meta_keywords,\r\n    });\r\n\r\n    this.pageForm.patchValue({\r\n      id: this.pageData.id,\r\n      post_status: this.pageData.post_status,\r\n    });\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.pageId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.pageData = response;\r\n        this.websiteUrl = `${this.websiteUrl}/${response.locale.sr.slug}`;\r\n\r\n        // this.pageData.post_status = response.post_status === 1 ? true : false;\r\n        this.files = response.posts;\r\n        // Add to list for order\r\n        if (this.files) {\r\n          this.files.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.posts.title,\r\n              subtitle: element.created_at,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n            });\r\n          });\r\n        }\r\n        this.loading = false;\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./download.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "DownloadFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "DownloadFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"GENERAL\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!pageData\"\r\n  [pageData]=\"pageData\"\r\n  [formGroup]=\"pageForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"true\"\r\n  [showAddButton]=\"true\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-panel header=\"Svi fajlovi\">\r\n          <app-post-reorder\r\n            [arrayForOrder]=\"postOrder\"\r\n            [orderItems]=\"reorderData\"\r\n            (itemDeleted)=\"updatePageView()\"\r\n          >\r\n          </app-post-reorder>\r\n        </p-panel>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "DownloadEditComponent",
            "id": "component-DownloadEditComponent-9d68fc7d610a3bb0c3f4e24a797c26af",
            "file": "src/app/modules/pages/download/download-edit/download-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-download-edit",
            "styleUrls": [
                "./download-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./download-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "enAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DownloadFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { DownloadFieldsService } from '../download-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-download-edit',\r\n  templateUrl: './download-edit.component.html',\r\n  styleUrls: ['./download-edit.component.scss']\r\n})\r\nexport class DownloadEditComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  enAttachments: FormArray;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  postId: number;\r\n  postData;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: DownloadFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get post ID\r\n    this.postId = +this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['4'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          posts: this.fb.group({\r\n            post_type: ['post'],\r\n            title: [''],\r\n            attachments: this.fb.array([]),\r\n          }),\r\n        }),\r\n        en: this.fb.group({\r\n          posts: this.fb.group({\r\n            post_type: ['post'],\r\n            title: [''],\r\n            attachments: this.fb.array([]),\r\n          }),\r\n        }),\r\n        de: this.fb.group({\r\n          posts: this.fb.group({\r\n            post_type: ['post'],\r\n            title: [''],\r\n            attachments: this.fb.array([]),\r\n          }),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        response.locale.sr.posts.attachments.forEach(\r\n          (attachment) => {\r\n            this.getLangAttachments('sr').push(\r\n              this.fb.group({\r\n                title: [attachment.title],\r\n                alt: [attachment.alt],\r\n                name: [attachment.name],\r\n              })\r\n            );\r\n\r\n            // Show old images\r\n            this.fileList.push({\r\n              originalFile: null,\r\n              imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n              fileName: attachment.name,\r\n            });\r\n          }\r\n        );\r\n        response.locale.en.posts.attachments.forEach(\r\n          (attachment) => {\r\n            this.getLangAttachments('en').push(\r\n              this.fb.group({\r\n                title: [attachment.title],\r\n                alt: [attachment.alt],\r\n                name: [attachment.name],\r\n              })\r\n            );\r\n          }\r\n        );\r\n        response.locale.de.posts.attachments.forEach(\r\n          (attachment) => {\r\n            this.getLangAttachments('de').push(\r\n              this.fb.group({\r\n                title: [attachment.title],\r\n                alt: [attachment.alt],\r\n                name: [attachment.name],\r\n              })\r\n            );\r\n          }\r\n        );\r\n\r\n        this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili fajl.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}.posts`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string){\r\n    return this.postForm.get(`locale.${langCode}.posts.attachments`) as FormArray;\r\n  }\r\n\r\n  patchForm() {\r\n    this.getLangFormGroup('sr').patchValue({\r\n      title: this.postData.locale.sr.posts.title,\r\n    });\r\n\r\n    this.getLangFormGroup('en').patchValue({\r\n      title: this.postData.locale.en.posts.title,\r\n    });\r\n\r\n    this.getLangFormGroup('de').patchValue({\r\n      title: this.postData.locale.de.posts.title,\r\n    });\r\n\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n      post_status: this.postData.post_status,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./download-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "DownloadFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "DownloadFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"DOWNLOAD - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView styleClass=\"p-p-0\">\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.singlePostFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.singlePostFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.singlePostFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Fajl</label>\r\n          <app-file-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [fileSize]=\"20\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxFiles]=\"1\"\r\n          >\r\n          </app-file-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-81691bb6ca6cd0409f00a126fa8f1a16",
            "file": "src/app/shared/components/dropdown/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dropdown",
            "styleUrls": [
                "./dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [
                {
                    "name": "{\n    provide: ControlContainer, useExisting: FormGroupDirective,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "customFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "InputField"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "controlContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlContainer",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "customFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'customFormGroup'"
                        }
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "fieldOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputField",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'options'"
                        }
                    ]
                },
                {
                    "name": "specificFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getSpecificFormGroup",
                    "args": [
                        {
                            "name": "formGroupPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroupPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ControlContainer, FormGroup, FormGroupDirective } from '@angular/forms';\r\nimport { InputField } from '../../models/input-field';\r\n\r\n@Component({\r\n  selector: 'app-dropdown',\r\n  templateUrl: './dropdown.component.html',\r\n  styleUrls: ['./dropdown.component.scss'],\r\n  viewProviders: [\r\n    {\r\n      provide: ControlContainer,\r\n      useExisting: FormGroupDirective,\r\n    },\r\n  ],\r\n})\r\nexport class DropdownComponent implements OnInit {\r\n  @Input('options') fieldOptions: InputField;\r\n  @Input('customFormGroup') customFormGroup: any;\r\n  errors: any = {};\r\n  specificFormGroup: FormGroup;\r\n\r\n  constructor(public controlContainer: ControlContainer) { }\r\n\r\n  ngOnInit(): void {\r\n    if(this.fieldOptions.fieldFormGroup != '' && this.fieldOptions.fieldFormGroup != undefined){\r\n      this.specificFormGroup = this.fieldOptions.fieldFormGroup !== '' ? this.getSpecificFormGroup(this.fieldOptions.fieldFormGroup) : this.customFormGroup;\r\n    }else{\r\n      this.specificFormGroup = this.customFormGroup;\r\n    }\r\n    console.log(this.specificFormGroup);\r\n    console.log(this.customFormGroup);\r\n  }\r\n\r\n  onChange(event: Event) {\r\n    const formGroup = this.controlContainer.control as FormGroup;\r\n\r\n    if(this.customFormGroup){\r\n      this.errors = this.customFormGroup.controls[this.fieldOptions.formControlName].errors;\r\n    }else{\r\n      this.errors = formGroup.controls[this.fieldOptions.formControlName].errors;\r\n    }\r\n  }\r\n\r\n  getSpecificFormGroup(formGroupPath: string) {\r\n    console.log('GRUPA', formGroupPath, this.customFormGroup);\r\n    return <FormGroup>this.customFormGroup.get(formGroupPath);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-field w-100\" [ngClass]=\"fieldOptions.containerClass\">\r\n  <ng-container *ngIf=\"fieldOptions.fieldFormGroup || fieldOptions.fieldFormGroup == ''; else elseTemplate\">\r\n    <ng-container [formGroup]=\"specificFormGroup\">\r\n      <label *ngIf=\"fieldOptions.label\">{{ fieldOptions.label }}</label>\r\n      <p-dropdown\r\n        [options]=\"fieldOptions.dropdownOptions\"\r\n        [optionLabel]=\"fieldOptions.optionLabel\"\r\n        [placeholder]=\"fieldOptions.placeholder\"\r\n        [formControlName]=\"fieldOptions.formControlName\"\r\n        [optionValue]=\"fieldOptions.optionValue\"\r\n        styleClass=\"w-100\"\r\n        [showClear]=\"false\"\r\n      ></p-dropdown>\r\n    </ng-container>\r\n  </ng-container>\r\n  <ng-template #elseTemplate>\r\n    <label *ngIf=\"fieldOptions.label\">{{ fieldOptions.label }}</label>\r\n    <p-dropdown\r\n      [options]=\"fieldOptions.dropdownOptions\"\r\n      [optionLabel]=\"fieldOptions.optionLabel\"\r\n      [placeholder]=\"fieldOptions.placeholder\"\r\n      [formControlName]=\"fieldOptions.formControlName\"\r\n      [optionValue]=\"fieldOptions.optionValue\"\r\n      styleClass=\"w-100\"\r\n      [showClear]=\"false\"\r\n    ></p-dropdown>\r\n  </ng-template>\r\n\r\n  <ng-container *ngIf=\"errors\">\r\n    <small *ngIf=\"errors.maxlength\" class=\"p-error\">\r\n      Polje ima {{ errors.maxlength.actualLength }} karaktera a mora biti ispod\r\n      {{ errors.maxlength.requiredLength }} karaktera.\r\n    </small>\r\n    <small *ngIf=\"errors.pattern\" class=\"p-error\">\r\n      {{ fieldOptions.errorMessage }}\r\n    </small>\r\n    <small *ngIf=\"errors.required == true\" class=\"p-error\">\r\n      Ovo polje je obavezno!\r\n    </small>\r\n    <small *ngIf=\"errors.email == true\" class=\"p-error\">\r\n      Molimo unesite pravilnu email adresu.\r\n    </small>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "EditMenuItemComponent",
            "id": "component-EditMenuItemComponent-581daf9a3f870ed1aa757d4cdb5a5a31",
            "file": "src/app/modules/global/header-menu/edit-menu-item/edit-menu-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-menu-item",
            "styleUrls": [
                "./edit-menu-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-menu-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any"
                },
                {
                    "name": "openModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "closeModal",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "closeModal",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Output",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "displayModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "editItemForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "openModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "editItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-edit-menu-item',\n  templateUrl: './edit-menu-item.component.html',\n  styleUrls: ['./edit-menu-item.component.scss']\n})\nexport class EditMenuItemComponent implements OnInit {\n  displayModal: boolean;\n  @Input() openModal;\n  @Output() closeModal:EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Input() data;\n  editItemForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    this.editItemForm = this.fb.group({\n      title: ['']\n    })\n  }\n\n  editItem(){\n    this.data[this.openModal.itemIndex].title = this.editItemForm.getRawValue().title;\n    this.onCloseModal();\n  }\n\n  onCloseModal(){\n    this.editItemForm.reset();\n    this.openModal.displayModal = false;\n    this.closeModal.emit(false)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./edit-menu-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p-dialog header=\"Izmeni naziv\" [(visible)]=\"openModal.displayModal\" [modal]=\"true\" [style]=\"{width: '50vw'}\" [baseZIndex]=\"10000\" (onHide)=\"onCloseModal()\"\n[draggable]=\"false\" [resizable]=\"false\">\n<form [formGroup]=\"editItemForm\" (ngSubmit)=\"editItem()\">\n  <div class=\"p-field w-100\">\n    <label>Novi naziv</label>\n    <input type=\"text\" formControlName=\"title\" pInputText />\n  </div>\n  <button type=\"button\" (click)=\"editItem()\" class=\"main-btn\">Izmeni</button>\n</form>\n<ng-template pTemplate=\"footer\">\n<p-button icon=\"pi pi-check\" (click)=\"onCloseModal()\" label=\"Zatvori\" styleClass=\"p-button-text\"></p-button>\n</ng-template>\n</p-dialog>\n"
        },
        {
            "name": "FaqAddComponent",
            "id": "component-FaqAddComponent-37f06b36a97e05d34175a35a4ffe7835",
            "file": "src/app/modules/sections/faq/faq-add/faq-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-faq-add",
            "styleUrls": [
                "./faq-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./faq-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FaqFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { FaqFieldsService } from '../faq-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-faq-add',\r\n  templateUrl: './faq-add.component.html',\r\n  styleUrls: ['./faq-add.component.scss'],\r\n})\r\nexport class FaqAddComponent implements OnInit {\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  fd = new FormData();\r\n  loading = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: FaqFieldsService\r\n  ) {}\r\n\r\n  // * Life cycles === //\r\n  ngOnInit(): void {\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      parent: ['8'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          content: ['', Validators.required],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n        }),\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi slajd.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./faq-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "FaqFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "FaqFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"PITANJA I ODGOVORI - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "FaqComponent",
            "id": "component-FaqComponent-2bafd52f1bcd857d02987db9e07cd6c9",
            "file": "src/app/modules/sections/faq/faq.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-faq",
            "styleUrls": [
                "./faq.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./faq.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FaqFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sectionsOrder",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "teamMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { Options } from 'sortablejs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { environment } from 'src/environments/environment';\r\nimport { FaqFieldsService } from './faq-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-faq',\r\n  templateUrl: './faq.component.html',\r\n  styleUrls: ['./faq.component.scss'],\r\n})\r\nexport class FaqComponent implements OnInit, OnDestroy {\r\n  orderItems;\r\n  teamMembers;\r\n  postForm: FormGroup;\r\n  postData;\r\n  loading = false;\r\n  postId: number;\r\n  subscriptions: Subscription[] = [];\r\n  mediaUrl = environment.mediaUrl;\r\n  sectionsOrder: { id: number }[] = [];\r\n  fd = new FormData();\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData = [];\r\n\r\n  constructor(\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private confirmationService: ConfirmationService,\r\n    public fieldsService: FaqFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.postId = +this.route.snapshot.params.sectionId;\r\n\r\n    // Form init\r\n    this.postForm = this.fb.group({\r\n      id: ['8'],\r\n      post_type: ['post'],\r\n      post_name: ['faq'],\r\n      parent: ['1'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete pitanje?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste pitanje.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Submit\r\n  onSubmit() {\r\n    const pageForm = this.postForm.getRawValue();\r\n    pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(pageForm);\r\n\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili stranicu',\r\n          });\r\n          // this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        // this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.orderItems = response.posts;\r\n        if (response.posts) {\r\n          this.orderItems.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.title,\r\n              subtitle: element.locale.sr.content,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n            });\r\n          });\r\n        }\r\n        console.log('DATA', this.reorderData);\r\n        this.loading = false;\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  patchForm() {\r\n    this.getLangFormGroup('sr').patchValue({\r\n      title: this.postData.locale.sr.title,\r\n    });\r\n    this.getLangFormGroup('en').patchValue({\r\n      title: this.postData.locale.en.title,\r\n    });\r\n    this.getLangFormGroup('de').patchValue({\r\n      title: this.postData.locale.de.title,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./faq.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "FaqFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "FaqFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"PITANJA I ODGOVORI\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showAddButton]=\"true\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Recenzije\">\r\n            <p-panel header=\"Sve recenzije\">\r\n              <app-post-reorder\r\n                [arrayForOrder]=\"postOrder\"\r\n                [orderItems]=\"reorderData\"\r\n                (itemDeleted)=\"updatePageView()\"\r\n              >\r\n              </app-post-reorder>\r\n            </p-panel>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Opis sekcije\">\r\n            <p-tabView>\r\n              <p-tabPanel header=\"Srpski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('sr')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Engleski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('en')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Nemački\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('de')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n            </p-tabView>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "FaqEditComponent",
            "id": "component-FaqEditComponent-6b96f9f8f8f3bdf521728b701ef1a1d9",
            "file": "src/app/modules/sections/faq/faq-edit/faq-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-faq-edit",
            "styleUrls": [
                "./faq-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./faq-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FaqFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { FaqFieldsService } from '../faq-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-faq-edit',\r\n  templateUrl: './faq-edit.component.html',\r\n  styleUrls: ['./faq-edit.component.scss'],\r\n})\r\nexport class FaqEditComponent implements OnInit {\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  postId: number;\r\n  postData;\r\n  loading = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: FaqFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get post ID\r\n    this.postId = +this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['8'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          content: ['', Validators.required],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n\r\n        this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novo pitanje.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n      content: this.postData.locale[langCode].content,\r\n    });\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./faq-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "FaqFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "FaqFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"PITANJA I ODGOVORI - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "FileUploadComponent",
            "id": "component-FileUploadComponent-92fd337cc0d077acb3cfa393220d7479",
            "file": "src/app/shared/components/file-upload/file-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-file-upload",
            "styleUrls": [
                "./file-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-upload.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "chosenFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FormGroup"
                },
                {
                    "name": "chosenFormGroupDe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "FormGroup"
                },
                {
                    "name": "chosenFormGroupEn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FormGroup"
                },
                {
                    "name": "controlName",
                    "defaultValue": "'attachments'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "deAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "FormArray"
                },
                {
                    "name": "enAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "FormArray"
                },
                {
                    "name": "fileList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "fileList[]"
                },
                {
                    "name": "fileSize",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number"
                },
                {
                    "name": "fileType",
                    "defaultValue": "['any']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string[]"
                },
                {
                    "name": "includeSeo",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "instanceIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number"
                },
                {
                    "name": "maxFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number"
                },
                {
                    "name": "srAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "FormArray"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_d",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DomSanitizer",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chosenFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "chosenFormGroupDe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "chosenFormGroupEn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "controlName",
                    "defaultValue": "'attachments'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'deAttachments'"
                        }
                    ]
                },
                {
                    "name": "enAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'enAttachments'"
                        }
                    ]
                },
                {
                    "name": "fileList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'fileList'"
                        }
                    ]
                },
                {
                    "name": "fileSize",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "fileType",
                    "defaultValue": "['any']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "includeSeo",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "instanceIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "maxFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "srAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'srAttachments'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createImageDescription",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createProductImageDescription",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeImageDescription",
                    "args": [
                        {
                            "name": "imgIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imgIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormArray, FormGroup, FormBuilder } from '@angular/forms';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { fileList } from '../../models/file-list';\r\n\r\n@Component({\r\n  selector: 'app-file-upload',\r\n  templateUrl: './file-upload.component.html',\r\n  styleUrls: ['./file-upload.component.scss'],\r\n})\r\nexport class FileUploadComponent implements OnInit {\r\n  @Input('fileList') fileList: fileList[];\r\n  @Input('srAttachments') srAttachments: FormArray = this.fb.array([]);\r\n  @Input('enAttachments') enAttachments: FormArray = this.fb.array([]);\r\n  @Input('deAttachments') deAttachments: FormArray = this.fb.array([]);\r\n  @Input() chosenFormGroup: FormGroup;\r\n  @Input() chosenFormGroupEn: FormGroup;\r\n  @Input() chosenFormGroupDe: FormGroup;\r\n  @Input() maxFiles: number;\r\n  @Input() includeSeo: boolean = false;\r\n  @Input() controlName = 'attachments';\r\n  @Input() fileType: string[] = ['any'];\r\n  @Input() instanceIndex: number = 0;\r\n  @Input() fileSize = 10;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    public _d: DomSanitizer,\r\n    private messService: MessServiceService,\r\n    private confirmationService: ConfirmationService\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  uploadFile(event) {\r\n    console.log(this.fileList);\r\n\r\n    if (this.fileList.length < this.maxFiles) {\r\n      const file = (event.target as HTMLInputElement).files[0];\r\n\r\n      const renamedFile = new File([file], file.name.replace(/\\s/g, '-'), {\r\n        type: file.type,\r\n      });\r\n\r\n      const fileSize = +(file.size / 1024 / 1024).toFixed(0);\r\n      const fileExtension =\r\n        this.fileType[0] === 'any' ? 'any' : file.name.split('.').pop();\r\n      console.log(file);\r\n      if (!this.fileType.includes(fileExtension)) {\r\n        // If type is wrong\r\n        this.messService.addWarn({\r\n          severity: 'warn',\r\n          title: 'Format fajla nije podržan!',\r\n          detail: 'Vaš fajl mora biti u nekom od podržanih formata.',\r\n        });\r\n        return;\r\n      }\r\n      if (fileSize > this.fileSize) {\r\n        this.messService.addWarn({\r\n          severity: 'warn',\r\n          title: 'Preveliki fajl!',\r\n          detail: `Vaš fajl mora biti veličine manje od ${this.fileSize}MB.`,\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Add file to array\r\n      this.fileList.push({\r\n        originalFile: renamedFile,\r\n        imageLocalUrl: window.URL.createObjectURL(renamedFile),\r\n        fileName: renamedFile.name,\r\n      });\r\n      if (this.includeSeo) {\r\n        this.srAttachments.push(this.createImageDescription(renamedFile.name));\r\n        this.enAttachments.push(this.createImageDescription(renamedFile.name));\r\n        this.deAttachments.push(this.createImageDescription(renamedFile.name));\r\n      }\r\n      if (!this.includeSeo) {\r\n        this.srAttachments.push(\r\n          this.createProductImageDescription(renamedFile.name)\r\n        );\r\n        // this.enAttachments.push(this.createProductImageDescription(file.name));\r\n        // this.deAttachments.push(this.createProductImageDescription(file.name));\r\n      }\r\n\r\n      // Reset File Input\r\n      event.srcElement.value = null;\r\n    } else {\r\n      this.messService.addWarn({\r\n        severity: 'warn',\r\n        title: 'Dodali ste maksimalni broj fajlova',\r\n        detail:\r\n          'Izbrišite neki od trenutnih fajlova kako bi mogli da dodate novi.',\r\n      });\r\n    }\r\n  }\r\n\r\n  createImageDescription(fileName: string): FormGroup {\r\n    return this.fb.group({\r\n      title: [''],\r\n      alt: [''],\r\n      name: [fileName],\r\n    });\r\n  }\r\n\r\n  createProductImageDescription(fileName: string): FormGroup {\r\n    return this.fb.group({\r\n      name: [fileName],\r\n    });\r\n  }\r\n\r\n  removeImageDescription(imgIndex: number) {\r\n    this.srAttachments.removeAt(imgIndex);\r\n    this.enAttachments.removeAt(imgIndex);\r\n    this.deAttachments.removeAt(imgIndex);\r\n  }\r\n\r\n  removeFile(event: Event, fileIndex: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete fajl?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        // Delete file from list for submit\r\n        this.fileList.splice(fileIndex, 1);\r\n        this.removeImageDescription(fileIndex);\r\n      },\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/scss/partials/variables';\r\n@import '../../../../assets/scss/partials/mixins';\r\n\r\n::ng-deep{\r\n\r\n  .file-upload{\r\n\r\n    .upload-header{\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n    }\r\n\r\n    .file {\r\n      position: relative;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n\r\n    .file > input[type='file'] {\r\n      display: none\r\n    }\r\n\r\n    .file > label {\r\n      cursor: pointer;\r\n      outline: 0;\r\n      user-select: none;\r\n      border: none;\r\n      border-radius: $border-radius;\r\n      background-color: $main-color;\r\n      color: #fff;\r\n      padding: .68rem .8rem;\r\n      font-weight: 500;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      transition: all .3s;\r\n\r\n      i{\r\n        margin-left: 2rem;\r\n      }\r\n\r\n      &:hover{\r\n        background-color: darken($main-color, $darken-amount);\r\n        transition: all .3s;\r\n      }\r\n    }\r\n\r\n    .file > label:hover {\r\n      border-color: hsl(0, 0%, 21%);\r\n    }\r\n\r\n    .file > label:active {\r\n      background-color: hsl(0, 0%, 96%);\r\n    }\r\n\r\n    .file > label > i {\r\n      padding-right: 5px;\r\n    }\r\n\r\n\r\n    .file-icon{\r\n      font-size: 4rem;\r\n    }\r\n\r\n    .p-tabview .p-tabview-nav li .p-tabview-nav-link{\r\n      padding: .4rem;\r\n      span{\r\n        font-size: .7rem;\r\n      }\r\n    }\r\n\r\n    .p-accordion .p-accordion-header .p-accordion-header-link{\r\n      padding: .6rem;\r\n    }\r\n\r\n    .p-inputtext{\r\n      font-size: .7rem;\r\n    }\r\n\r\n    .p-field > label{\r\n      font-size: .7rem;\r\n    }\r\n\r\n     .upload-item{\r\n       display: flex;\r\n       justify-content: space-between;\r\n       align-items: center;\r\n       margin-bottom: 1rem;\r\n\r\n       @include xs{\r\n        border-bottom: 1px solid $main-border;\r\n        padding-bottom: 1rem;\r\n        &:last-child{\r\n          border-bottom: none;\r\n          padding-bottom: 0px;\r\n          margin-bottom: 0px;\r\n        }\r\n       }\r\n\r\n       .main-description{\r\n         display: flex;\r\n         align-items: center;\r\n         width: 100%;\r\n         margin-right: 1.5rem;\r\n\r\n         @include xs{\r\n           flex-flow: column;\r\n           align-items: flex-start;\r\n         }\r\n       }\r\n\r\n     }\r\n     .file-thumb{\r\n      @include xs{\r\n        margin: 1rem;\r\n        margin-left: 0px;\r\n      }\r\n     }\r\n     .image-thumb{\r\n       width: 80px;\r\n       height: auto;\r\n       margin-right: 1.5rem;\r\n\r\n       @include xs{\r\n         margin: 1rem;\r\n         margin-left: 0px;\r\n       }\r\n     }\r\n   }\r\n}\r\n\r\n",
                    "styleUrl": "./file-upload.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_d",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_d",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section\nclass=\"p-fileupload p-fileupload-advanced p-component ng-star-inserted file-upload\"\n>\n<div class=\"upload-header p-fileupload-buttonbar\">\n  <div class=\"upload-btn-wrapper\">\n    <div class=\"file\">\n      <label [for]=\"'input-file-' + instanceIndex\">\n        Izaberi fajl <i class=\"pi pi-plus\"></i>\n      </label>\n      <input [id]=\"'input-file-' + instanceIndex\" type=\"file\" (change)=\"uploadFile($event)\" #file />\n    </div>\n  </div>\n  <section>\n    <p-tag styleClass=\"bg-light\" severity=\"warning\" value=\"Max: {{fileSize}}MB\" icon=\"pi pi-upload\"></p-tag>\n    <ng-container *ngFor=\"let type of fileType\">\n      <p-tag styleClass=\"bg-light p-ml-2\" severity=\"warning\" value=\"{{type | uppercase}}\" icon=\"pi pi-file\"></p-tag>\n    </ng-container>\n  </section>\n\n</div>\n<div class=\"upload-items p-fileupload-content\">\n  <div\n    [sortablejs]=\"fileList\"\n  >\n    <div\n      *ngFor=\"let item of fileList; let imgIndex = index\"\n      class=\"upload-item\"\n    >\n      <main class=\"main-description\">\n        <div class=\"reorder-handle responsive-handle p-mr-2\">\n          <i class=\"pi pi-sort\"></i>\n        </div>\n        <div>\n          <i class=\"pi pi-file p-mr-2 file-icon\"></i>\n        </div>\n        <h4 *ngIf=\"!includeSeo\">{{item.fileName}}</h4>\n        <section class=\"w-100\" *ngIf=\"includeSeo\">\n          <p-accordion>\n            <p-accordionTab [header]=\"'SEO - ' + item.fileName\">\n              <p-tabView>\n                <p-tabPanel header=\"Srpski\">\n\n                  <ng-container [formGroup]=\"chosenFormGroup\">\n                    <ng-container [formArrayName]=\"controlName\">\n                      <div class=\"p-grid\" [formGroupName]=\"imgIndex\">\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Alt tag</label>\n                            <input type=\"text\" formControlName=\"alt\" pInputText />\n                          </div>\n                        </div>\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Title</label>\n                            <input type=\"text\" formControlName=\"title\" pInputText />\n                          </div>\n                        </div>\n                      </div>\n                    </ng-container>\n                  </ng-container>\n\n                </p-tabPanel>\n                <p-tabPanel header=\"Engleski\" *ngIf=\"chosenFormGroupEn\">\n\n                  <ng-container [formGroup]=\"chosenFormGroupEn\">\n                    <ng-container [formArrayName]=\"controlName\">\n                      <div class=\"p-grid\" [formGroupName]=\"imgIndex\">\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Alt tag</label>\n                            <input type=\"text\" formControlName=\"alt\" pInputText />\n                          </div>\n                        </div>\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Title</label>\n                            <input type=\"text\" formControlName=\"title\" pInputText />\n                          </div>\n                        </div>\n                      </div>\n                    </ng-container>\n                  </ng-container>\n\n                </p-tabPanel>\n                <p-tabPanel header=\"Nemački\" *ngIf=\"chosenFormGroupDe\">\n\n                  <ng-container [formGroup]=\"chosenFormGroupDe\">\n                    <ng-container [formArrayName]=\"controlName\">\n                      <div class=\"p-grid\" [formGroupName]=\"imgIndex\">\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Alt tag</label>\n                            <input type=\"text\" formControlName=\"alt\" pInputText />\n                          </div>\n                        </div>\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Title</label>\n                            <input type=\"text\" formControlName=\"title\" pInputText />\n                          </div>\n                        </div>\n                      </div>\n                    </ng-container>\n                  </ng-container>\n\n                </p-tabPanel>\n              </p-tabView>\n            </p-accordionTab>\n          </p-accordion>\n        </section>\n      </main>\n      <button\n        type=\"button\"\n        pTooltip=\"Obriši\"\n        tooltipPosition=\"top\"\n        class=\"second-btn small-btn p-mr-2\"\n        (click)=\"removeFile($event,imgIndex)\"\n      >\n        <i class=\"pi pi-trash\"></i>\n      </button>\n    </div>\n  </div>\n</div>\n</section>\n"
        },
        {
            "name": "FooterMenuComponent",
            "id": "component-FooterMenuComponent-69b33f258cc3bc08e645cfeaf1ef1292",
            "file": "src/app/modules/global/footer-menu/footer-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer-menu",
            "styleUrls": [
                "./footer-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allPagesOptions",
                    "defaultValue": "{\r\n    handle: '.reorder-handle',\r\n    group: {\r\n      name: 'allPagesGroup',\r\n      put: false,\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Options",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mainMenuOptions",
                    "defaultValue": "{\r\n    handle: '.reorder-handle',\r\n    group: {\r\n      name: 'mainMenuGroup',\r\n      put: ['allPagesGroup', 'subItemsGroup'],\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Options",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "menu",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subItemsOptions",
                    "defaultValue": "{\r\n    handle: '.reorder-handle',\r\n    group: {\r\n      name: 'subItemsGroup',\r\n      put: ['allPagesGroup', 'subItemsGroup'],\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Options",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteItem",
                    "args": [
                        {
                            "name": "itemIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSaveMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { Options } from 'sortablejs';\r\nimport { MenuService } from 'src/app/core/services/menu.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\n\r\n@Component({\r\n  selector: 'app-footer-menu',\r\n  templateUrl: './footer-menu.component.html',\r\n  styleUrls: ['./footer-menu.component.scss'],\r\n})\r\nexport class FooterMenuComponent implements OnInit, OnDestroy {\r\n  subscriptions: Subscription[] = [];\r\n  pageId: number;\r\n  loading = false;\r\n\r\n  // * Sortable JS group options\r\n  subItemsOptions: Options = {\r\n    handle: '.reorder-handle',\r\n    group: {\r\n      name: 'subItemsGroup',\r\n      put: ['allPagesGroup', 'subItemsGroup'],\r\n    },\r\n  };\r\n\r\n  mainMenuOptions: Options = {\r\n    handle: '.reorder-handle',\r\n    group: {\r\n      name: 'mainMenuGroup',\r\n      put: ['allPagesGroup', 'subItemsGroup'],\r\n    },\r\n  };\r\n\r\n  allPagesOptions: Options = {\r\n    handle: '.reorder-handle',\r\n    group: {\r\n      name: 'allPagesGroup',\r\n      put: false,\r\n    },\r\n  };\r\n\r\n  menuItems: {\r\n    id: number;\r\n    title: string;\r\n  }[] = [];\r\n\r\n  menu: any[] = [];\r\n\r\n  constructor(\r\n    private messService: MessServiceService,\r\n    private menuService: MenuService,\r\n    private postsService: PostsService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    // Get menu\r\n    this.subscriptions.push(\r\n      this.menuService.getAll(this.pageId).subscribe((response: any) => {\r\n        console.log(response);\r\n        if (response.posts) {\r\n          this.menu = response.posts;\r\n        }\r\n        this.menuItems = response.excludedPost;\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  onSaveMenu() {\r\n    this.loading = true;\r\n    this.subscriptions.push(\r\n      this.menuService.update(this.pageId, { data: this.menu }).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili podešavanja',\r\n          });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  onDeleteItem(itemIndex, parent = -1) {\r\n    let items = [];\r\n    if (parent > -1) {\r\n      items.push(this.menu[parent][itemIndex]);\r\n      this.menu[parent].child.splice(itemIndex, 1);\r\n    } else {\r\n      if (this.menu[itemIndex].child) {\r\n        console.log('DROPDOWN', this.menu[itemIndex].child);\r\n        this.menu[itemIndex].child.forEach((element) => {\r\n          items.push(element);\r\n        });\r\n      } else {\r\n        items.push(this.menu[itemIndex]);\r\n      }\r\n      this.menu.splice(itemIndex, 1);\r\n    }\r\n    console.log('LISTA OBRISANIH', items);\r\n    // ! IN PROGRESS\r\n    items.forEach((element) => {\r\n      this.menuItems.push(element);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './../../../../assets/scss/partials/variables';\r\n\r\n.menu{\r\n  width: 100%;\r\n  min-height: 100px;\r\n}\r\n\r\n.all-pages-menu{\r\n  .menu-item{\r\n    padding: .5rem;\r\n\r\n  }\r\n}\r\n\r\n.submenu{\r\n  margin-top: 10px;\r\n  background-color: darken($app-bg, 4%);\r\n  padding: 10px;\r\n  border-radius: $border-radius;\r\n}\r\n\r\n.menu-item{\r\n  background-color: $app-bg;\r\n  border-radius: $border-radius;\r\n  padding: .5rem;\r\n  margin-bottom: 10px;\r\n  border: 1px solid $main-border;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  &:last-child{\r\n    margin-bottom: 0px;\r\n  }\r\n}\r\n\r\n.submenu-item{\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n",
                    "styleUrl": "./footer-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"main\"\r\n  headerTitle=\"FOOTER\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!menu\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container buttons>\r\n    <!-- <button class=\"main-btn\" type=\"button\" (click)=\"onSaveMenu()\">\r\n      Snimi <i class=\"pi pi-save\"></i>\r\n    </button> -->\r\n    <app-button\r\n      type=\"button\"\r\n      btnStyle=\"main\"\r\n      icon=\"save\"\r\n      (click)=\"onSaveMenu()\"\r\n      save=\"save\"\r\n      >Snimi</app-button\r\n    >\r\n  </ng-container>\r\n\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-4\">\r\n        <h3 class=\"p-mb-2\">MENI</h3>\r\n        <p-panel header=\"Redosled menija\">\r\n          <div\r\n            class=\"menu\"\r\n            [sortablejs]=\"menu\"\r\n            [sortablejsOptions]=\"mainMenuOptions\"\r\n          >\r\n            <div\r\n              class=\"menu-item\"\r\n              *ngFor=\"let item of menu; let parentIndex = index\"\r\n            >\r\n              <section class=\"p-d-flex p-ai-center p-jc-between w-100\">\r\n                <section class=\"p-d-flex p-ai-center\">\r\n                  <div class=\"reorder-handle p-mr-2\">\r\n                    <i class=\"pi pi-sort\"></i>\r\n                  </div>\r\n                  <span>{{ item.title }}</span>\r\n                </section>\r\n                <div>\r\n                  <button\r\n                    class=\"second-btn small-btn\"\r\n                    type=\"button\"\r\n                    pTooltip=\"Ukloni\"\r\n                    tooltipPosition=\"top\"\r\n                    (click)=\"onDeleteItem(parentIndex)\"\r\n                  >\r\n                    <i class=\"pi pi-trash\"></i>\r\n                  </button>\r\n                  <button\r\n                    *ngIf=\"item.child\"\r\n                    class=\"second-btn small-btn p-ml-2\"\r\n                    pTooltip=\"Izmeni\"\r\n                    tooltipPosition=\"top\"\r\n                    (click)=\"editItem(parentIndex)\"\r\n                  >\r\n                    <i class=\"pi pi-pencil\"></i>\r\n                  </button>\r\n                </div>\r\n              </section>\r\n            </div>\r\n          </div>\r\n        </p-panel>\r\n      </div>\r\n      <div class=\"p-col-12 p-sm-4\">\r\n        <h3 class=\"p-mb-2\">Stranice</h3>\r\n        <p-panel header=\"Prevuci stranice u meni\">\r\n          <div\r\n            class=\"menu all-pages-menu\"\r\n            [sortablejs]=\"menuItems\"\r\n            [sortablejsOptions]=\"allPagesOptions\"\r\n          >\r\n            <div class=\"menu-item\" *ngFor=\"let item of menuItems\">\r\n              <section class=\"p-d-flex p-ai-center\">\r\n                <div class=\"reorder-handle p-mr-2\">\r\n                  <i class=\"pi pi-sort\"></i>\r\n                </div>\r\n                <span>{{ item.title }}</span>\r\n              </section>\r\n            </div>\r\n          </div>\r\n        </p-panel>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "ForgetPasswordComponent",
            "id": "component-ForgetPasswordComponent-98992c6bb186a92b6577e210cc5f2a5f",
            "file": "src/app/modules/login/forget-password/forget-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forget-password",
            "styleUrls": [
                "./forget-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forget-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cmsLogo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "forgetPassForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loginFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { AuthService } from 'src/app/core/authentication/auth.service';\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\nimport { SettingsService } from 'src/app/core/services/settings.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-forget-password',\n  templateUrl: './forget-password.component.html',\n  styleUrls: ['./forget-password.component.scss'],\n})\nexport class ForgetPasswordComponent implements OnInit, OnDestroy {\n  loading = false;\n  loginFailed = false;\n  forgetPassForm: FormGroup;\n  subscriptions: Subscription[] = [];\n  cmsLogo: string;\n  mediaUrl = environment.mediaUrl;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private messService: MessServiceService,\n    private settingsService: SettingsService\n  ) {}\n\n  // * Lifecycles === //\n  ngOnInit(): void {\n    this.forgetPassForm = this.fb.group({\n      email: [''],\n    });\n\n    this.subscriptions.push(\n      this.settingsService\n        .getOne('logo')\n        .subscribe((response: any) => {\n          this.cmsLogo = this.mediaUrl + '/' + response.name;\n        })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  // * On login\n  onSubmit() {\n    this.loading = true;\n    let formData = this.forgetPassForm.getRawValue();\n\n    this.subscriptions.push(\n      this.authService.getResetPasswordEmail(formData).subscribe(\n        (success) => {\n          this.loading = false;\n          this.messService.addSuccess({\n            severity: 'success',\n            title: 'Uspešno slanje',\n            detail: 'Link za reset šifre je poslat na vaš email.',\n          });\n          this.router.navigate(['/login']);\n        },\n        (error) => {\n          this.messService.addError({\n            severity: 'error',\n            title: 'Greška',\n            detail: 'Došlo je do greške, pokušajte ponovo!',\n          });\n        }\n      )\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hide {\r\n  display: none;\r\n}\r\n.show {\r\n  display: block;\r\n}\r\n\r\n.login-bg {\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  .logo {\r\n    padding: 2rem 0;\r\n    width: 30%;\r\n  }\r\n\r\n  .login-card {\r\n    display: flex;\r\n    flex-flow: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 340px;\r\n    form {\r\n      width: 100%;\r\n    }\r\n    input {\r\n      width: 100%;\r\n    }\r\n    .main-btn {\r\n      margin-top: 1.5rem;\r\n    }\r\n    .sizes {\r\n      .p-inputtext {\r\n        display: block;\r\n        margin-bottom: 0.5rem;\r\n        &:last-child {\r\n          margin-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    .p-field * {\r\n      display: block;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./forget-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"login-bg\">\n  <div class=\"card login-card\">\n    <img *ngIf=\"cmsLogo\" [src]=\"cmsLogo\" alt=\"\" class=\"logo\" />\n\n    <form [formGroup]=\"forgetPassForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"p-field\">\n        <label>Email za reset šifre</label>\n        <input type=\"text\" pInputText formControlName=\"email\" />\n      </div>\n\n      <button class=\"main-btn w-100\" type=\"submit\">\n        <div class=\"p-d-flex p-ai-center\">\n          <p-progressSpinner\n            *ngIf=\"loading\"\n            [style]=\"{ width: '15px', height: '15px' }\"\n            styleClass=\"custom-spinner p-mr-2\"\n            strokeWidth=\"8\"\n            animationDuration=\".5s\"\n          ></p-progressSpinner>\n          Pošalji\n        </div>\n        <i class=\"pi pi-send\"></i>\n      </button>\n      <!-- <p-message\n        severity=\"error\"\n        *ngIf=\"loginFailed\"\n        text=\"Šifra ili korisničko ime su pogrešni, pokušajte ponovo.\"\n        styleClass=\"p-mt-2\"\n      ></p-message> -->\n\n      <section class=\"p-d-flex\">\n        <a class=\"p-text-center p-mt-3 w-100\" [routerLink]=\"['./../']\">Nazad na prijavu.</a>\n      </section>\n\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "FormBuilderComponent",
            "id": "component-FormBuilderComponent-2ae588229fab0cd518f1c0f64d20ed9a",
            "file": "src/app/shared/components/form-builder/form-builder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-builder",
            "styleUrls": [
                "./form-builder.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-builder.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any"
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "FormGroup"
                },
                {
                    "name": "mainForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "FormGroup"
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'fields'"
                        }
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'form'"
                        }
                    ]
                },
                {
                    "name": "mainForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'mainForm'"
                        }
                    ]
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'styleClass'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-form-builder',\r\n  templateUrl: './form-builder.component.html',\r\n  styleUrls: ['./form-builder.component.scss']\r\n})\r\nexport class FormBuilderComponent implements OnInit {\r\n  @Input('form') form: FormGroup;\r\n  @Input('mainForm') mainForm: FormGroup;\r\n  @Input('fields') fields;\r\n  @Input('styleClass') styleClass: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-builder.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- * MAIN FORM -->\r\n<section class=\"p-grid\" [ngClass]=\"styleClass\" [formGroup]=\"form\">\r\n\r\n  <ng-container *ngFor=\"let field of fields\">\r\n    <!-- * IF - group of fields -->\r\n    <ng-container *ngIf=\"field.group; else elseTemplate\">\r\n      <!-- * Define column size -->\r\n      <div [class]=\"field.colSize\">\r\n        <ng-container *ngFor=\"let subfield of field.group\">\r\n\r\n            <!-- * Find and use type of control -->\r\n            <ng-container *ngIf=\"subfield.controlType == 'input'\">\r\n              <app-input [options]=\"subfield.options\" [customFormGroup]=\"mainForm\"></app-input>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"subfield.controlType == 'input-password'\">\r\n              <app-input-password [options]=\"subfield.options\"></app-input-password>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"subfield.controlType == 'rich-editor'\">\r\n              <app-rich-editor [options]=\"subfield.options\"></app-rich-editor>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"subfield.controlType == 'textarea'\">\r\n              <app-textarea [options]=\"subfield.options\"></app-textarea>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"subfield.controlType == 'dropdown'\">\r\n              <app-dropdown [options]=\"subfield.options\" [customFormGroup]=\"mainForm\"></app-dropdown>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"field.controlType == 'page-seo'\">\r\n              <app-page-seo [formGroup]=\"form\"></app-page-seo>\r\n            </ng-container>\r\n\r\n        </ng-container>\r\n      </div>\r\n    </ng-container>\r\n    <!-- * IF - single field -->\r\n    <ng-template #elseTemplate>\r\n      <!-- * Define column size -->\r\n      <div [class]=\"field.colSize\">\r\n\r\n        <!-- * Find and use type of control -->\r\n        <ng-container *ngIf=\"field.controlType == 'input'\">\r\n          <app-input [options]=\"field.options\" [customFormGroup]=\"mainForm\"></app-input>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"field.controlType == 'input-password'\">\r\n          <app-input-password [options]=\"field.options\"></app-input-password>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"field.controlType == 'rich-editor'\">\r\n          <app-rich-editor [options]=\"field.options\"></app-rich-editor>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"field.controlType == 'textarea'\">\r\n          <app-textarea [options]=\"field.options\"></app-textarea>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"field.controlType == 'dropdown'\">\r\n          <app-dropdown [options]=\"field.options\" [customFormGroup]=\"mainForm\"></app-dropdown>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"field.controlType == 'page-seo'\">\r\n          <app-page-seo [formGroup]=\"form\"></app-page-seo>\r\n        </ng-container>\r\n\r\n      </div>\r\n\r\n    </ng-template>\r\n\r\n\r\n\r\n  </ng-container>\r\n</section>\r\n"
        },
        {
            "name": "GlobalSectionsComponent",
            "id": "component-GlobalSectionsComponent-bd5f1df76909818211f7d8f56d20d2f5",
            "file": "src/app/modules/global/global-sections/global-sections.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-global-sections",
            "styleUrls": [
                "./global-sections.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./global-sections.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allSections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "displayModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaginatorApi",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\nimport { PostsService } from 'src/app/core/services/posts.service';\nimport { PaginatorApi } from 'src/app/shared/models/paginator';\n\n@Component({\n  selector: 'app-global-sections',\n  templateUrl: './global-sections.component.html',\n  styleUrls: ['./global-sections.component.scss'],\n})\nexport class GlobalSectionsComponent implements OnInit, OnDestroy {\n  loading = false;\n  subscriptions: Subscription[] = [];\n  allSections;\n  paginator: PaginatorApi;\n  displayModal: boolean;\n\n  constructor(\n    private postsService: PostsService,\n    private messService: MessServiceService\n  ) {}\n\n  // * Lifecycles === //\n  ngOnInit(): void {\n    this.loading = true;\n    this.subscriptions.push(\n      this.postsService\n        .getAllGlobalSections()\n        .subscribe((response: PaginatorApi) => {\n          this.allSections = response;\n          // this.paginator = response;\n          this.loading = false;\n          console.log(response);\n        })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  // * Helpers === //\n  onChangeStatus(event, pageId: number) {\n    console.log(event);\n    const status = {\n      status: event.checked ? 1 : 0,\n    };\n    this.subscriptions.push(\n      this.postsService.updatePostStatus(pageId, status).subscribe(\n        () => {\n          this.messService.addSuccess({\n            severity: 'success',\n            title: 'Uspešno menjanje statusa',\n            detail: 'Uspešno ste promenili vidljivost stranice.',\n          });\n        },\n        (error) => {\n          console.log(error);\n        }\n      )\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./global-sections.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"main\"\r\n  headerTitle=\"Globalne sekcije\"\r\n  [skeletonLoad]=\"!allSections\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <p-table\r\n            #dt1\r\n            [value]=\"allSections\"\r\n            dataKey=\"id\"\r\n            [rows]=\"10\"\r\n            [showCurrentPageReport]=\"true\"\r\n            [rowsPerPageOptions]=\"[10, 25, 50]\"\r\n            [loading]=\"loading\"\r\n            styleClass=\"p-datatable-customers p-datatable-gridlines \"\r\n            [paginator]=\"false\"\r\n            currentPageReportTemplate=\"Prikaz od {first}. do {last}. sekcije od ukupno {totalRecords}\"\r\n            [globalFilterFields]=\"['languages[0].translation.details.title']\"\r\n          >\r\n            <ng-template pTemplate=\"header\">\r\n              <tr>\r\n                <th>\r\n                  <div class=\"p-d-flex p-jc-between p-ai-center\">\r\n                    Naziv sekcije\r\n                  </div>\r\n                </th>\r\n                <th class=\"p-text-center\" style=\"width: 8rem\">Objavljena</th>\r\n                <th style=\"width: 8rem\">\r\n                  <div class=\"p-d-flex p-jc-center p-ai-center\">Akcija</div>\r\n                </th>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"body\" let-page let-i=\"rowIndex\">\r\n              <tr>\r\n                <td>\r\n                  <!-- <strong>DEBUG: {{ page.post_name }} </strong> -->\r\n                  <span *ngIf=\"page.locale.sr\"\r\n                    >{{ page.locale.sr.title }}\r\n                  </span>\r\n                </td>\r\n                <td>\r\n                  <div class=\"p-d-flex p-jc-center p-ai-center\">\r\n                    <p-inputSwitch\r\n                      [ngModel]=\"page.post_status === 1 ? true : false\"\r\n                      (onChange)=\"onChangeStatus($event, page.id)\"\r\n                      [name]=\"page.post_name + i\"\r\n                    ></p-inputSwitch>\r\n                  </div>\r\n                </td>\r\n                <td class=\"p-text-center\">\r\n                  <a\r\n                    class=\"second-btn small-btn p-mr-2\"\r\n                    pTooltip=\"Izmeni\"\r\n                    tooltipPosition=\"top\"\r\n                    [routerLink]=\"[page.post_name, 'edit', page.id]\"\r\n                  >\r\n                    <i class=\"pi pi-pencil\"></i>\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"emptymessage\">\r\n              <tr>\r\n                <td colspan=\"3\">Ni jedna sekcija nije pronađena.</td>\r\n              </tr>\r\n            </ng-template>\r\n          </p-table>\r\n          <p-paginator\r\n            *ngIf=\"paginator\"\r\n            [first]=\"1\"\r\n            [rows]=\"paginator.per_page\"\r\n            [showJumpToPageDropdown]=\"true\"\r\n            [showPageLinks]=\"true\"\r\n            [totalRecords]=\"paginator.total\"\r\n            (onPageChange)=\"onPageChange($event)\"\r\n            [showPageLinks]=\"false\"\r\n          ></p-paginator>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-7a7c6f7d8043c3d35059c822ee2a3e67",
            "file": "src/app/includes/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cmsLogo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "curentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "websiteUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from 'src/app/core/authentication/auth.service';\nimport { SettingsService } from 'src/app/core/services/settings.service';\nimport { User } from 'src/app/shared/models/user';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n})\nexport class HeaderComponent implements OnInit, OnDestroy {\n  curentUser: User;\n  subscriptions: Subscription[] = [];\n  websiteUrl = environment.apiUrl;\n  cmsLogo: string;\n  mediaUrl = environment.mediaUrl;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private settingsService: SettingsService\n  ) {}\n\n  // * Lifecycles === //\n  ngOnInit(): void {\n    this.curentUser = this.authService.userValue;\n\n    this.subscriptions.push(\n      this.settingsService.getAll().subscribe((response: any) => {\n        console.log(response);\n        if(response.logo){\n          this.cmsLogo = this.mediaUrl + '/' + response.logo.name;\n        }\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  // * Logout\n  onLogout() {\n    this.subscriptions.push(\n      this.authService.logout().subscribe(() => {\n        console.log('IZLOGOVAN');\n        this.router.navigate(['/login']);\n      })\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/assets/scss/partials/variables';\r\n@import 'src/assets/scss/partials/mixins';\r\n\r\n.top-header{\r\n  color: #fff;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 65px;\r\n  justify-content: space-between;\r\n  position: sticky;\r\n  top: 0px;\r\n  z-index: 200;\r\n  background-color: #fff;\r\n  padding: 0px 2.5rem;\r\n  box-shadow: 0 10px 30px 0 rgb(82 63 105 / 8%);\r\n\r\n  @include xs{\r\n    height: 55px;\r\n    width: 100%;\r\n    position: fixed;\r\n    left: 0px;\r\n    background-color: #fff;\r\n    padding: 0px 1rem;\r\n    box-shadow: 0 10px 20px #0000000d;\r\n    justify-content: space-between;\r\n    padding-left: 4rem;\r\n  }\r\n\r\n  .header-main-logo{\r\n    height: 40px;\r\n    display: none;\r\n    @include xs{\r\n      display: block;\r\n      height: 20px;\r\n    }\r\n  }\r\n\r\n  .user-options{\r\n    display: flex;\r\n    align-items: center;\r\n    position: relative;\r\n    cursor: pointer;\r\n\r\n    span{\r\n      color: $dark;\r\n    }\r\n\r\n    &:hover{\r\n      .user-option-dropdown{\r\n        opacity: 1;\r\n        visibility: visible;\r\n        top: 45px;\r\n        transition: all .4s;\r\n      }\r\n    }\r\n    .user-img{\r\n      width: 35px;\r\n      height: 35px;\r\n      background-color: $main-color;\r\n      border-radius: 200px;\r\n      margin-left: .5rem;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n    .user-option-dropdown{\r\n      display: flex;\r\n      justify-content: center;\r\n      background-color: #fff;\r\n      border-radius: $border-radius;\r\n      box-shadow: 0 0px 30px 0 rgb(82 63 105 / 8%);\r\n      z-index: 2000;\r\n      min-width: 220px;\r\n      padding: 1rem .6rem;\r\n      position: absolute;\r\n      top: -405px;\r\n      right: 0;\r\n      z-index: 100;\r\n      opacity: 0;\r\n      visibility: hidden;\r\n      transition: all .6s;\r\n      transition-delay: .3s;\r\n\r\n      flex-flow: column;\r\n      // pointer-events: none;\r\n      &::before{\r\n        content: '';\r\n        position: absolute;\r\n        width: 10px;\r\n        height: 10px;\r\n        background-color: #fff;\r\n        top: -5px;\r\n        right: 12px;\r\n        transform: rotate(45deg);\r\n        border-radius: 2px;\r\n      }\r\n\r\n      .dropdown-item{\r\n        color: #24292E;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        margin: .1rem 0;\r\n        padding: .7rem;\r\n        font-size: .8rem;\r\n        border: navajowhite;\r\n        background-color: transparent;\r\n        transition: background-color .3s;\r\n        cursor: pointer;\r\n        i{\r\n          font-size: .6rem;\r\n        }\r\n        &:hover{\r\n          background-color: rgba(222,222,222,.3);\r\n          transition: background-color .3s;\r\n        }\r\n      }\r\n      hr{\r\n        height: 1px;\r\n        background-color: $main-border;\r\n        border: none;\r\n        margin: .1rem 0px;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"top-header\">\r\n  <img *ngIf=\"cmsLogo\" [src]=\"cmsLogo\" alt=\"\" class=\"header-main-logo\" />\r\n  <app-breadcrumb></app-breadcrumb>\r\n  <div class=\"user-options\">\r\n    <span>{{ curentUser.user.name }}</span>\r\n    <div class=\"user-img bg-dark\"><i class=\"pi pi-user\"></i></div>\r\n    <div class=\"user-option-dropdown\">\r\n      <a\r\n        class=\"dropdown-item\"\r\n        [routerLink]=\"['/users/edit/', curentUser.user.id]\"\r\n        >Podešavanje naloga <i class=\"pi pi-cog\"></i>\r\n      </a>\r\n      <a [href]=\"websiteUrl\" class=\"dropdown-item\"\r\n        >Nazad na sajt<i class=\"pi pi-reply\"></i>\r\n      </a>\r\n      <hr>\r\n      <button class=\"dropdown-item\" type=\"button\" (click)=\"onLogout()\">\r\n        Odjavi se <i class=\"pi pi-sign-out\"></i>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderMenuComponent",
            "id": "component-HeaderMenuComponent-d03f5f891c6603ef433dedef8a81ef2e",
            "file": "src/app/modules/global/header-menu/header-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header-menu",
            "styleUrls": [
                "./header-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addDropdownForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "allPagesOptions",
                    "defaultValue": "{\r\n    handle: '.reorder-handle',\r\n    group: {\r\n      name: 'allPagesGroup',\r\n      put: false,\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Options",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "displayModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "itemForEdit",
                    "defaultValue": "{\r\n    displayModal: false,\r\n    itemIndex: -1,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "mainMenuOptions",
                    "defaultValue": "{\r\n    handle: '.reorder-handle',\r\n    group: {\r\n      name: 'mainMenuGroup',\r\n      put: ['allPagesGroup', 'subItemsGroup'],\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Options",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "menu",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "showSkeleton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "subItemsOptions",
                    "defaultValue": "{\r\n    handle: '.reorder-handle',\r\n    group: {\r\n      name: 'subItemsGroup',\r\n      put: ['allPagesGroup', 'subItemsGroup'],\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Options",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "editItem",
                    "args": [
                        {
                            "name": "itemIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteItem",
                    "args": [
                        {
                            "name": "itemIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "childId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "childId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSaveMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { Options } from 'sortablejs';\r\nimport { MenuService } from 'src/app/core/services/menu.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\n\r\n@Component({\r\n  selector: 'app-header-menu',\r\n  templateUrl: './header-menu.component.html',\r\n  styleUrls: ['./header-menu.component.scss'],\r\n})\r\nexport class HeaderMenuComponent implements OnInit, OnDestroy {\r\n  displayModal: boolean;\r\n  itemForEdit = {\r\n    displayModal: false,\r\n    itemIndex: -1,\r\n  };\r\n  subscriptions: Subscription[] = [];\r\n  addDropdownForm: FormGroup;\r\n  pageId: number;\r\n  loading = false;\r\n\r\n  // * Sortable JS group options\r\n  subItemsOptions: Options = {\r\n    handle: '.reorder-handle',\r\n    group: {\r\n      name: 'subItemsGroup',\r\n      put: ['allPagesGroup', 'subItemsGroup'],\r\n    },\r\n  };\r\n\r\n  mainMenuOptions: Options = {\r\n    handle: '.reorder-handle',\r\n    group: {\r\n      name: 'mainMenuGroup',\r\n      put: ['allPagesGroup', 'subItemsGroup'],\r\n    },\r\n  };\r\n\r\n  allPagesOptions: Options = {\r\n    handle: '.reorder-handle',\r\n    group: {\r\n      name: 'allPagesGroup',\r\n      put: false,\r\n    },\r\n  };\r\n\r\n  menuItems: {\r\n    id: number;\r\n    title: string;\r\n  }[] = [];\r\n\r\n  menu: any[] = [];\r\n  showSkeleton = true;\r\n\r\n  constructor(\r\n    private messService: MessServiceService,\r\n    private menuService: MenuService,\r\n    private postsService: PostsService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    this.addDropdownForm = this.fb.group({\r\n      title: ['', Validators.maxLength(40)],\r\n    });\r\n\r\n    // Get menu\r\n    this.subscriptions.push(\r\n      this.menuService.getAll(this.pageId).subscribe((response: any) => {\r\n        if (response.posts) {\r\n          this.menu = response.posts;\r\n          this.showSkeleton = false;\r\n        }\r\n        this.menuItems = response.excludedPost;\r\n        console.log('MENU', response);\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Helpers === //\r\n  editItem(itemIndex) {\r\n    this.itemForEdit.displayModal = true;\r\n    this.itemForEdit.itemIndex = itemIndex;\r\n  }\r\n\r\n  onAddItem() {\r\n    console.log(this.addDropdownForm.getRawValue().title);\r\n    if (this.addDropdownForm.getRawValue().title !== '') {\r\n      this.menu.push({\r\n        title: this.addDropdownForm.getRawValue().title,\r\n        post_type: 'link',\r\n        child: [],\r\n      });\r\n      this.addDropdownForm.reset();\r\n    }\r\n  }\r\n\r\n  onDeleteItem(itemIndex, childId, parent = -1) {\r\n    console.log(childId);\r\n    // let inAllPages = this.originalMenu.find(function(item, index){\r\n    //   if(item.id == childId){\r\n    //     return true;\r\n    //   }\r\n    // })\r\n    let items = [];\r\n    if (parent > -1) {\r\n      items.push(this.menu[parent][itemIndex]);\r\n      this.menu[parent].child.splice(itemIndex, 1);\r\n    } else {\r\n      if (this.menu[itemIndex].child) {\r\n        console.log('DROPDOWN', this.menu[itemIndex].child);\r\n        this.menu[itemIndex].child.forEach((element) => {\r\n          items.push(element);\r\n        });\r\n      } else {\r\n        items.push(this.menu[itemIndex]);\r\n      }\r\n      this.menu.splice(itemIndex, 1);\r\n    }\r\n    console.log('LISTA OBRISANIH', items);\r\n    // ! IN PROGRESS\r\n    items.forEach((element) => {\r\n      this.menuItems.push(element);\r\n    });\r\n\r\n    // console.log('DA LI JE U ORIGINAL MENU', inAllPages);\r\n    // if (childId && childId == inAllPages.id) {\r\n    //   this.subscriptions.push(\r\n    //     this.menuService\r\n    //       .deleteMenuItem(this.pageId, { item_id: childId })\r\n    //       .subscribe(\r\n    //         () => {\r\n    //           this.messService.addSuccess({\r\n    //             severity: 'success',\r\n    //             title: 'Uspešno brisanje',\r\n    //             detail: 'Obrisali ste obrisali stavku menija.',\r\n    //           });\r\n    //         },\r\n    //         (error) => {\r\n    //           console.log(error);\r\n    //         }\r\n    //       )\r\n    //   );\r\n    // }\r\n  }\r\n\r\n  onSaveMenu() {\r\n    this.loading = true;\r\n    console.log({ data: this.menu });\r\n    this.subscriptions.push(\r\n      this.menuService.update(this.pageId, { data: this.menu }).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili podešavanja',\r\n          });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './../../../../assets/scss/partials/variables';\r\n\r\n.menu{\r\n  width: 100%;\r\n  min-height: 100px;\r\n}\r\n\r\n.all-pages-menu{\r\n  .menu-item{\r\n    padding: .5rem;\r\n  }\r\n}\r\n\r\n.submenu{\r\n  margin-top: 10px;\r\n  background-color: darken($app-bg, 4%);\r\n  padding: 10px;\r\n  border-radius: $border-radius;\r\n}\r\n\r\n.menu-item{\r\n  background-color: $app-bg;\r\n  border-radius: $border-radius;\r\n  padding: .5rem;\r\n  margin-bottom: 10px;\r\n  border: 1px solid $main-border;\r\n  &:last-child{\r\n    margin-bottom: 0px;\r\n  }\r\n}\r\n\r\n.submenu-item{\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n",
                    "styleUrl": "./header-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"main\"\r\n  headerTitle=\"HEADER\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"showSkeleton\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container buttons>\r\n    <button class=\"main-btn\" type=\"submit\" (click)=\"onSaveMenu()\">\r\n      Snimi <i class=\"pi pi-save\"></i>\r\n    </button>\r\n  </ng-container>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <form\r\n        [formGroup]=\"addDropdownForm\"\r\n        (ngSubmit)=\"onAddItem()\"\r\n        class=\"p-col-12 p-sm-4\"\r\n      >\r\n        <h3 class=\"p-mb-2\">Dodaj dropdown</h3>\r\n        <app-input\r\n          [options]=\"{\r\n            label: 'Naziv',\r\n            type: 'text',\r\n            formControlName: 'title'\r\n          }\"\r\n        ></app-input>\r\n        <button type=\"submit\" class=\"main-btn\">Dodaj</button>\r\n      </form>\r\n      <div class=\"p-col-12 p-sm-4\">\r\n        <h3 class=\"p-mb-2\">MENI</h3>\r\n        <p-panel header=\"Redosled menija\">\r\n          <div\r\n            class=\"menu\"\r\n            [sortablejs]=\"menu\"\r\n            [sortablejsOptions]=\"mainMenuOptions\"\r\n          >\r\n            <div\r\n              class=\"menu-item\"\r\n              *ngFor=\"let item of menu; let parentIndex = index\"\r\n            >\r\n              <section class=\"p-d-flex p-ai-center p-jc-between\">\r\n                <section class=\"p-d-flex p-ai-center\">\r\n                  <div class=\"reorder-handle p-mr-2\">\r\n                    <i class=\"pi pi-sort\"></i>\r\n                  </div>\r\n                  <span>{{ item.title }}</span>\r\n                </section>\r\n                <div>\r\n                  <button\r\n                    class=\"second-btn small-btn\"\r\n                    type=\"button\"\r\n                    pTooltip=\"Ukloni\"\r\n                    tooltipPosition=\"top\"\r\n                    (click)=\"onDeleteItem(parentIndex, item.id)\"\r\n                  >\r\n                    <i class=\"pi pi-trash\"></i>\r\n                  </button>\r\n                  <button\r\n                    *ngIf=\"item.child\"\r\n                    class=\"second-btn small-btn p-ml-2\"\r\n                    pTooltip=\"Izmeni\"\r\n                    tooltipPosition=\"top\"\r\n                    (click)=\"editItem(parentIndex)\"\r\n                  >\r\n                    <i class=\"pi pi-pencil\"></i>\r\n                  </button>\r\n                </div>\r\n              </section>\r\n              <section *ngIf=\"item.child\">\r\n                <div\r\n                  class=\"submenu\"\r\n                  [sortablejs]=\"item.child\"\r\n                  [sortablejsOptions]=\"subItemsOptions\"\r\n                >\r\n                  <div\r\n                    class=\"menu-item submenu-item\"\r\n                    *ngFor=\"let child of item.child; let childIndex = index\"\r\n                  >\r\n                    <section class=\"p-d-flex p-ai-center\">\r\n                      <div class=\"reorder-handle p-mr-2\">\r\n                        <i class=\"pi pi-sort\"></i>\r\n                      </div>\r\n                      <span>{{ child.title }}</span>\r\n                    </section>\r\n                    <button\r\n                      class=\"second-btn small-btn\"\r\n                      type=\"button\"\r\n                      pTooltip=\"Ukloni\"\r\n                      tooltipPosition=\"top\"\r\n                      (click)=\"onDeleteItem(childIndex, child.id, parentIndex)\"\r\n                    >\r\n                      <i class=\"pi pi-trash\"></i>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </section>\r\n            </div>\r\n          </div>\r\n        </p-panel>\r\n      </div>\r\n      <div class=\"p-col-12 p-sm-4\">\r\n        <h3 class=\"p-mb-2\">Stranice</h3>\r\n        <p-panel header=\"Prevuci stranice u meni\">\r\n          <div\r\n            class=\"menu all-pages-menu\"\r\n            [sortablejs]=\"menuItems\"\r\n            [sortablejsOptions]=\"allPagesOptions\"\r\n          >\r\n            <div class=\"menu-item\" *ngFor=\"let item of menuItems\">\r\n              <section class=\"p-d-flex p-ai-center\">\r\n                <div class=\"reorder-handle p-mr-2\">\r\n                  <i class=\"pi pi-sort\"></i>\r\n                </div>\r\n                <span>{{ item.title }}</span>\r\n              </section>\r\n            </div>\r\n          </div>\r\n        </p-panel>\r\n        <br />\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n\r\n<!-- * MODAL -->\r\n<app-edit-menu-item\r\n  [openModal]=\"itemForEdit\"\r\n  [data]=\"menu\"\r\n  (closeModal)=\"itemForEdit.displayModal = false\"\r\n>\r\n</app-edit-menu-item>\r\n"
        },
        {
            "name": "HomepageComponent",
            "id": "component-HomepageComponent-9f239e875df8f07630b0e1683d934e33",
            "file": "src/app/modules/pages/homepage/homepage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-homepage",
            "styleUrls": [
                "./homepage.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./homepage.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HomepageFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "websiteUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { RenameSectionPipe } from 'src/app/shared/pipes/rename-section.pipe';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HomepageFieldsService } from './homepage-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-homepage',\r\n  templateUrl: './homepage.component.html',\r\n  styleUrls: ['./homepage.component.scss'],\r\n})\r\nexport class HomepageComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  pageForm: FormGroup;\r\n  pageData;\r\n  pageId: number;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  sections;\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  orderItems;\r\n  reorderData: ReorderData[] = [];\r\n  websiteUrl = environment.apiUrl;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private renameSection: RenameSectionPipe,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: HomepageFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      id: [''],\r\n      post_type: ['page'],\r\n      post_status: [''],\r\n      post_name: ['home'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    const pageForm = this.pageForm.getRawValue();\r\n    pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(pageForm);\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili stranicu',\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.pageId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.pageData = response;\r\n        this.websiteUrl = `${this.websiteUrl}/${response.locale.sr.slug}`;\r\n\r\n        // this.pageData.post_status = response.post_status === 1 ? true : false;\r\n        this.sections = response.posts;\r\n        this.orderItems = response.posts;\r\n        this.orderItems.forEach((element) => {\r\n          this.postOrder.posts.push(element.id);\r\n\r\n          this.reorderData.push({\r\n            title: this.renameSection.transform(element.post_name),\r\n            post_status: element.post_status,\r\n            post_name: element.post_name,\r\n            id: element.id,\r\n          });\r\n        });\r\n        this.loading = false;\r\n        this.patchForm();\r\n        console.log(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.pageData.locale[langCode].title,\r\n      slug: this.pageData.locale[langCode].slug,\r\n      meta_title: this.pageData.locale[langCode].meta_title,\r\n      meta_description: this.pageData.locale[langCode].meta_description,\r\n      meta_keywords: this.pageData.locale[langCode].meta_keywords,\r\n    });\r\n  }\r\n\r\n  patchForm() {\r\n    this.patchLangForm('sr');\r\n    this.patchLangForm('en');\r\n    this.patchLangForm('de');\r\n\r\n    this.pageForm.patchValue({\r\n      id: this.pageId,\r\n      post_status: this.pageData.post_status,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./homepage.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renameSection",
                        "type": "RenameSectionPipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "HomepageFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renameSection",
                        "type": "RenameSectionPipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "HomepageFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"GENERAL\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!pageData\"\r\n  [pageData]=\"pageData\"\r\n  [formGroup]=\"pageForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"true\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n\r\n      <div class=\"p-col-12\">\r\n        <h2 class=\"p-mt-0\">SEKCIJE</h2>\r\n      </div>\r\n      <div class=\"p-col-12\">\r\n        <p-panel header=\"Sve sekcije\">\r\n          <app-post-reorder\r\n            [arrayForOrder]=\"postOrder\"\r\n            [orderItems]=\"reorderData\"\r\n            (itemDeleted)=\"updatePageView()\"\r\n            [showDelete]=\"false\"\r\n            [reorderSections]=\"true\"\r\n          >\r\n          </app-post-reorder>\r\n        </p-panel>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "HomeSliderAddComponent",
            "id": "component-HomeSliderAddComponent-af8dbe43b0d9b18d6c5d88eff7c29821",
            "file": "src/app/modules/sections/home-slider/home-slider-add/home-slider-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-slider-add",
            "styleUrls": [
                "./home-slider-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home-slider-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_d",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DomSanitizer",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HomeSliderFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { Options } from 'sortablejs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { HomeSliderFieldsService } from '../home-slider-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-home-slider-add',\r\n  templateUrl: './home-slider-add.component.html',\r\n  styleUrls: ['./home-slider-add.component.scss'],\r\n})\r\nexport class HomeSliderAddComponent implements OnInit {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    public _d: DomSanitizer,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: HomeSliderFieldsService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      parent: ['7'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          subtitle: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          subtitle: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          subtitle: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.srAttachments = this.postForm.get(\r\n      'locale.sr.attachments'\r\n    ) as FormArray;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi slajd.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string){\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home-slider-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_d",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "HomeSliderFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_d",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "HomeSliderFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"SLAJDER - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showAddButton]=\"false\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          >\r\n          </app-image-upload>\r\n\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\">\r\n              Preporučena dimenzija za sliku je format 16:9</span\r\n            >\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "HomeSliderComponent",
            "id": "component-HomeSliderComponent-e7357689e5e666ae52da7fe0830fe03c",
            "file": "src/app/modules/sections/home-slider/home-slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-slider",
            "styleUrls": [
                "./home-slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home-slider.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "teamMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { Options } from 'sortablejs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-home-slider',\r\n  templateUrl: './home-slider.component.html',\r\n  styleUrls: ['./home-slider.component.scss'],\r\n})\r\nexport class HomeSliderComponent implements OnInit {\r\n  orderItems;\r\n  teamMembers;\r\n  postForm: FormGroup;\r\n  postData;\r\n  loading = false;\r\n  postId: number;\r\n  subscriptions: Subscription[] = [];\r\n  mediaUrl = environment.mediaUrl;\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData = [];\r\n\r\n  constructor(\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private confirmationService: ConfirmationService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.postId = +this.route.snapshot.params.sectionId;\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    console.log(postId);\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete slajd?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste slajd.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Helpers === //\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        // this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.orderItems = response.posts;\r\n        if (response.posts) {\r\n          this.orderItems.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.title,\r\n              subtitle: element.locale.sr.content,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n              image: element.locale.sr.attachments[0]\r\n                ? element.locale.sr.attachments[0].name\r\n                : null,\r\n            });\r\n          });\r\n        }\r\n        this.loading = false;\r\n        // this.patchForm();\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home-slider.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"SLAJDER\"\r\n  [backPath]=\"['./../../']\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [showAddButton]=\"true\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Slajder\">\r\n            <p-panel header=\"Svi slajdovi\">\r\n              <app-post-reorder\r\n                [arrayForOrder]=\"postOrder\"\r\n                [orderItems]=\"reorderData\"\r\n                (itemDeleted)=\"updatePageView()\"\r\n              >\r\n              </app-post-reorder>\r\n            </p-panel>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "HomeSliderEditComponent",
            "id": "component-HomeSliderEditComponent-4b5c37d3aeaf224422716effe12d8931",
            "file": "src/app/modules/sections/home-slider/home-slider-edit/home-slider-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-slider-edit",
            "styleUrls": [
                "./home-slider-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home-slider-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HomeSliderFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangAttachments",
                    "args": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HomeSliderFieldsService } from '../home-slider-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-home-slider-edit',\r\n  templateUrl: './home-slider-edit.component.html',\r\n  styleUrls: ['./home-slider-edit.component.scss'],\r\n})\r\nexport class HomeSliderEditComponent implements OnInit {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  postId: number;\r\n  postData;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: HomeSliderFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get post ID\r\n    this.postId = +this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['7'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          subtitle: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          subtitle: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          subtitle: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        response.locale.sr.attachments.forEach(\r\n          (attachment) => {\r\n            this.getLangAttachments('sr').push(\r\n              this.fb.group({\r\n                title: [attachment.title],\r\n                alt: [attachment.alt],\r\n                name: [attachment.name],\r\n              })\r\n            );\r\n\r\n            // Show old images\r\n            this.fileList.push({\r\n              originalFile: null,\r\n              imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n              fileName: attachment.name,\r\n            });\r\n          }\r\n        );\r\n        this.patchLangAttachments(response,'en');\r\n        this.patchLangAttachments(response,'de');\r\n\r\n        this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi blog post.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string){\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  patchLangAttachments(attachArray,langCode: string){\r\n    attachArray.locale[langCode].attachments.forEach(\r\n      (attachment) => {\r\n        this.getLangAttachments(langCode).push(\r\n          this.fb.group({\r\n            title: [attachment.title],\r\n            alt: [attachment.alt],\r\n            name: [attachment.name],\r\n          })\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  patchLangForm(langCode: string){\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n      subtitle: this.postData.locale[langCode].subtitle,\r\n      button_link: this.postData.locale[langCode].button_link,\r\n      button_text: this.postData.locale[langCode].button_text,\r\n    });\r\n\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home-slider-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "HomeSliderFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "HomeSliderFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"SLAJDER - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          >\r\n          </app-image-upload>\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\">\r\n              Preporučena dimenzija za sliku je format 16:9</span\r\n            >\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "ImageUploadComponent",
            "id": "component-ImageUploadComponent-ea677e9d22b957b09ce0073a8a96593d",
            "file": "src/app/shared/components/image-upload/image-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-upload",
            "styleUrls": [
                "./image-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-upload.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "chosenFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "FormGroup"
                },
                {
                    "name": "chosenFormGroupDe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FormGroup"
                },
                {
                    "name": "chosenFormGroupEn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FormGroup"
                },
                {
                    "name": "controlName",
                    "defaultValue": "'attachments'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "deAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "FormArray"
                },
                {
                    "name": "enableMultiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "enAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "FormArray"
                },
                {
                    "name": "fileList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "fileList[]"
                },
                {
                    "name": "fileSize",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number"
                },
                {
                    "name": "fileType",
                    "defaultValue": "'image'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "includeSeo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "instanceIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number"
                },
                {
                    "name": "maxImages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number"
                },
                {
                    "name": "productImages",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "srAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "FormArray"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_d",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DomSanitizer",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chosenFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "chosenFormGroupDe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "chosenFormGroupEn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "controlName",
                    "defaultValue": "'attachments'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'deAttachments'"
                        }
                    ]
                },
                {
                    "name": "enableMultiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "enAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'enAttachments'"
                        }
                    ]
                },
                {
                    "name": "fileList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'fileList'"
                        }
                    ]
                },
                {
                    "name": "fileSize",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "fileType",
                    "defaultValue": "'image'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "includeSeo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "instanceIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "maxImages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "productImages",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "srAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'srAttachments'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createImageDescription",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createProductImageDescription",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeFile",
                    "args": [
                        {
                            "name": "fileIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeImageDescription",
                    "args": [
                        {
                            "name": "imgIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imgIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { fileList } from '../../models/file-list';\r\n\r\n@Component({\r\n  selector: 'app-image-upload',\r\n  templateUrl: './image-upload.component.html',\r\n  styleUrls: ['./image-upload.component.scss'],\r\n})\r\nexport class ImageUploadComponent implements OnInit {\r\n  @Input('fileList') fileList: fileList[];\r\n  @Input('srAttachments') srAttachments: FormArray = this.fb.array([]);\r\n  @Input('enAttachments') enAttachments: FormArray = this.fb.array([]);\r\n  @Input('deAttachments') deAttachments: FormArray = this.fb.array([]);\r\n  @Input() chosenFormGroup: FormGroup;\r\n  @Input() chosenFormGroupEn: FormGroup;\r\n  @Input() chosenFormGroupDe: FormGroup;\r\n  @Input() maxImages: number;\r\n  @Input() includeSeo: boolean;\r\n  @Input() productImages: boolean = false;\r\n  @Input() controlName = 'attachments';\r\n  @Input() fileType = 'image';\r\n  @Input() instanceIndex: number = 0;\r\n  @Input() fileSize = 10;\r\n  @Input() enableMultiple = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    public _d: DomSanitizer,\r\n    private messService: MessServiceService\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  uploadFile(event) {\r\n    if (this.fileList.length < this.maxImages) {\r\n      const uploadedFiles = (event.target as HTMLInputElement).files;\r\n\r\n      Array.from(uploadedFiles).forEach((file) => {\r\n        let validImage = true;\r\n        const renamedFile = new File([file], file.name.replace(/\\s/g, '-'), {\r\n          type: file.type,\r\n        });\r\n        const fileSize = +file.size;\r\n        const fileSizeMax = this.fileSize * 1024 * 1024;\r\n\r\n        if (this.fileType == 'image' && !file.type.includes('image')) {\r\n          validImage = false;\r\n          // If type is wrong\r\n          this.messService.addWarn({\r\n            severity: 'warn',\r\n            title: 'Format slike nije podržan!',\r\n            detail: `Vaša fajl (${file.name}) mora biti u nekom od podržanih formata: .JPG, .PNG, .SVG.`,\r\n          });\r\n        }\r\n        if (fileSize > fileSizeMax) {\r\n          validImage = false;\r\n          this.messService.addWarn({\r\n            severity: 'warn',\r\n            title: 'Preveliki fajl!',\r\n            detail: `Vaša slika (${file.name}) mora biti veličine manje od ${this.fileSize}MB.`,\r\n          });\r\n        }\r\n\r\n        if (validImage) {\r\n          // Add file to array\r\n          this.fileList.push({\r\n            originalFile: renamedFile,\r\n            imageLocalUrl: window.URL.createObjectURL(renamedFile),\r\n            fileName: renamedFile.name,\r\n          });\r\n          if (this.includeSeo && !this.productImages) {\r\n            this.srAttachments.push(\r\n              this.createImageDescription(renamedFile.name)\r\n            );\r\n            this.enAttachments.push(\r\n              this.createImageDescription(renamedFile.name)\r\n            );\r\n            this.deAttachments.push(\r\n              this.createImageDescription(renamedFile.name)\r\n            );\r\n          }\r\n          if (!this.includeSeo && this.productImages) {\r\n            this.srAttachments.push(\r\n              this.createProductImageDescription(renamedFile.name)\r\n            );\r\n          }\r\n        }\r\n\r\n        // Reset File Input\r\n        event.srcElement.value = null;\r\n      });\r\n      console.log(this.fileList);\r\n      console.log((event.target as HTMLInputElement).files);\r\n\r\n      // // Reset File Input\r\n      // event.srcElement.value = null;\r\n    } else {\r\n      this.messService.addWarn({\r\n        severity: 'warn',\r\n        title:\r\n          this.fileType == 'image'\r\n            ? 'Dodali ste maksimalni broj slika!'\r\n            : 'Dodali ste maksimalni broj fajlova',\r\n        detail:\r\n          this.fileType == 'image'\r\n            ? 'Izbrišite neku od trenutnih slika kako bi mogli da dodate nove.'\r\n            : 'Izbrišite neki od trenutnih fajlova kako bi mogli da dodate novi.',\r\n      });\r\n    }\r\n  }\r\n\r\n  createImageDescription(fileName: string): FormGroup {\r\n    return this.fb.group({\r\n      title: [''],\r\n      alt: [''],\r\n      name: [fileName],\r\n    });\r\n  }\r\n\r\n  createProductImageDescription(fileName: string): FormGroup {\r\n    return this.fb.group({\r\n      name: [fileName],\r\n    });\r\n  }\r\n\r\n  removeImageDescription(imgIndex: number) {\r\n    this.srAttachments.removeAt(imgIndex);\r\n    this.enAttachments.removeAt(imgIndex);\r\n    this.deAttachments.removeAt(imgIndex);\r\n  }\r\n\r\n  removeFile(fileIndex: number) {\r\n    // Delete file from list for submit\r\n    this.fileList.splice(fileIndex, 1);\r\n    this.removeImageDescription(fileIndex);\r\n    console.log(this.fileList);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/scss/partials/variables';\r\n@import '../../../../assets/scss/partials/mixins';\r\n\r\n::ng-deep{\r\n\r\n  .image-upload{\r\n\r\n    .upload-header{\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n    }\r\n\r\n    .file {\r\n      position: relative;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n\r\n    .file > input[type='file'] {\r\n      display: none\r\n    }\r\n\r\n    .file > label {\r\n      cursor: pointer;\r\n      outline: 0;\r\n      user-select: none;\r\n      border: none;\r\n      border-radius: $border-radius;\r\n      background-color: $main-color;\r\n      color: #fff;\r\n      padding: .68rem .8rem;\r\n      font-weight: 500;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      transition: all .3s;\r\n\r\n      i{\r\n        margin-left: 2rem;\r\n      }\r\n\r\n      &:hover{\r\n        background-color: darken($main-color, $darken-amount);\r\n        transition: all .3s;\r\n      }\r\n    }\r\n\r\n    .file > label:hover {\r\n      border-color: hsl(0, 0%, 21%);\r\n    }\r\n\r\n    .file > label:active {\r\n      background-color: hsl(0, 0%, 96%);\r\n    }\r\n\r\n    .file > label > i {\r\n      padding-right: 5px;\r\n    }\r\n\r\n\r\n    .file-icon{\r\n      font-size: 4rem;\r\n    }\r\n\r\n    .p-tabview .p-tabview-nav li .p-tabview-nav-link{\r\n      padding: .4rem;\r\n      span{\r\n        font-size: .7rem;\r\n      }\r\n    }\r\n\r\n    .p-accordion .p-accordion-header .p-accordion-header-link{\r\n      padding: .6rem;\r\n    }\r\n\r\n    .p-inputtext{\r\n      font-size: .7rem;\r\n    }\r\n\r\n    .p-field > label{\r\n      font-size: .7rem;\r\n    }\r\n\r\n     .upload-item{\r\n       display: flex;\r\n       justify-content: space-between;\r\n       align-items: center;\r\n       margin-bottom: 1rem;\r\n\r\n       @include xs{\r\n        border-bottom: 1px solid $main-border;\r\n        padding-bottom: 1rem;\r\n        &:last-child{\r\n          border-bottom: none;\r\n          padding-bottom: 0px;\r\n          margin-bottom: 0px;\r\n        }\r\n       }\r\n\r\n       .main-description{\r\n         display: flex;\r\n         align-items: center;\r\n         width: 100%;\r\n         margin-right: 1.5rem;\r\n\r\n         @include xs{\r\n           flex-flow: column;\r\n           align-items: flex-start;\r\n         }\r\n       }\r\n\r\n     }\r\n     .file-thumb{\r\n      @include xs{\r\n        margin: 1rem;\r\n        margin-left: 0px;\r\n      }\r\n     }\r\n     .image-thumb{\r\n       width: 80px;\r\n       height: auto;\r\n       margin-right: 1.5rem;\r\n\r\n       @include xs{\r\n         margin: 1rem;\r\n         margin-left: 0px;\r\n       }\r\n     }\r\n   }\r\n}\r\n\r\n",
                    "styleUrl": "./image-upload.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_d",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_d",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"includeSeo\">\r\n  <section\r\n    class=\"p-fileupload p-fileupload-advanced p-component ng-star-inserted image-upload\"\r\n  >\r\n    <div class=\"upload-header p-fileupload-buttonbar\">\r\n      <div class=\"upload-btn-wrapper\">\r\n        <div class=\"file\">\r\n          <label [for]=\"'input-file-' + instanceIndex\">\r\n            Izaberi fajl <i class=\"pi pi-plus\"></i>\r\n          </label>\r\n          <input\r\n            [id]=\"'input-file-' + instanceIndex\"\r\n            type=\"file\"\r\n            (change)=\"uploadFile($event)\"\r\n            #file\r\n            [multiple]=\"enableMultiple\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <p-tag\r\n        styleClass=\"bg-light\"\r\n        severity=\"warning\"\r\n        value=\"Max: {{ fileSize }}MB\"\r\n        icon=\"pi pi-upload\"\r\n      ></p-tag>\r\n    </div>\r\n    <div class=\"upload-items p-fileupload-content\">\r\n      <div\r\n        [sortablejs]=\"fileList\"\r\n        [sortablejs]=\"srAttachments\"\r\n        [sortablejsOptions]=\"{ handle: '.reorder-handle' }\"\r\n      >\r\n        <div\r\n          *ngFor=\"let item of fileList; let imgIndex = index\"\r\n          class=\"upload-item\"\r\n        >\r\n          <main class=\"main-description\">\r\n            <div class=\"reorder-handle responsive-handle p-mr-2\">\r\n              <i class=\"pi pi-sort\"></i>\r\n            </div>\r\n            <img\r\n              *ngIf=\"fileType == 'image'\"\r\n              [src]=\"_d.bypassSecurityTrustUrl(item.imageLocalUrl)\"\r\n              class=\"image-thumb\"\r\n              alt=\"\"\r\n            />\r\n            <div *ngIf=\"fileType == 'other'\" class=\"file-thumb\">\r\n              <i class=\"pi pi-file p-mr-2 file-icon\"></i>\r\n            </div>\r\n            <section class=\"w-100\">\r\n              <p-accordion>\r\n                <p-accordionTab [header]=\"'SEO - ' + item.fileName\">\r\n                  <p-tabView>\r\n                    <p-tabPanel header=\"Srpski\">\r\n                      <ng-container [formGroup]=\"chosenFormGroup\">\r\n                        <ng-container [formArrayName]=\"controlName\">\r\n                          <div class=\"p-grid\" [formGroupName]=\"imgIndex\">\r\n                            <div class=\"p-col-4\">\r\n                              <div class=\"p-field p-mb-0 w-100\">\r\n                                <label>Alt tag</label>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  formControlName=\"alt\"\r\n                                  pInputText\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"p-col-4\">\r\n                              <div class=\"p-field p-mb-0 w-100\">\r\n                                <label>Title</label>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  formControlName=\"title\"\r\n                                  pInputText\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </ng-container>\r\n                      </ng-container>\r\n                    </p-tabPanel>\r\n                    <p-tabPanel header=\"Engleski\" *ngIf=\"chosenFormGroupEn\">\r\n                      <ng-container [formGroup]=\"chosenFormGroupEn\">\r\n                        <ng-container [formArrayName]=\"controlName\">\r\n                          <div class=\"p-grid\" [formGroupName]=\"imgIndex\">\r\n                            <div class=\"p-col-4\">\r\n                              <div class=\"p-field p-mb-0 w-100\">\r\n                                <label>Alt tag</label>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  formControlName=\"alt\"\r\n                                  pInputText\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"p-col-4\">\r\n                              <div class=\"p-field p-mb-0 w-100\">\r\n                                <label>Title</label>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  formControlName=\"title\"\r\n                                  pInputText\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </ng-container>\r\n                      </ng-container>\r\n                    </p-tabPanel>\r\n                    <p-tabPanel header=\"Nemački\" *ngIf=\"chosenFormGroupDe\">\r\n                      <ng-container [formGroup]=\"chosenFormGroupDe\">\r\n                        <ng-container [formArrayName]=\"controlName\">\r\n                          <div class=\"p-grid\" [formGroupName]=\"imgIndex\">\r\n                            <div class=\"p-col-4\">\r\n                              <div class=\"p-field p-mb-0 w-100\">\r\n                                <label>Alt tag</label>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  formControlName=\"alt\"\r\n                                  pInputText\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"p-col-4\">\r\n                              <div class=\"p-field p-mb-0 w-100\">\r\n                                <label>Title</label>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  formControlName=\"title\"\r\n                                  pInputText\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </ng-container>\r\n                      </ng-container>\r\n                    </p-tabPanel>\r\n                  </p-tabView>\r\n                </p-accordionTab>\r\n              </p-accordion>\r\n            </section>\r\n          </main>\r\n          <button\r\n            type=\"button\"\r\n            pTooltip=\"Obriši\"\r\n            tooltipPosition=\"top\"\r\n            class=\"second-btn small-btn p-mr-2\"\r\n            (click)=\"removeFile(imgIndex)\"\r\n          >\r\n            <i class=\"pi pi-trash\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</ng-container>\r\n<ng-container *ngIf=\"!includeSeo && !productImages\">\r\n  <section\r\n    class=\"p-fileupload p-fileupload-advanced p-component ng-star-inserted image-upload\"\r\n  >\r\n    <div class=\"upload-header p-fileupload-buttonbar\">\r\n      <div class=\"upload-btn-wrapper\">\r\n        <div class=\"file\">\r\n          <label [for]=\"'input-file-' + instanceIndex\">\r\n            Izaberi fajl <i class=\"pi pi-plus\"></i>\r\n          </label>\r\n          <input\r\n            [id]=\"'input-file-' + instanceIndex\"\r\n            type=\"file\"\r\n            (change)=\"uploadFile($event)\"\r\n            #file\r\n            [multiple]=\"enableMultiple\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <p-tag\r\n        styleClass=\"bg-light\"\r\n        severity=\"warning\"\r\n        value=\"Max: {{ fileSize }}MB\"\r\n        icon=\"pi pi-upload\"\r\n      ></p-tag>\r\n    </div>\r\n    <div class=\"upload-items p-fileupload-content\">\r\n      <div [sortablejs]=\"fileList\">\r\n        <div\r\n          *ngFor=\"let item of fileList; let imgIndex = index\"\r\n          class=\"upload-item\"\r\n        >\r\n          <main class=\"main-description\">\r\n            <div class=\"reorder-handle responsive-handle p-mr-2\">\r\n              <i class=\"pi pi-sort\"></i>\r\n            </div>\r\n            <img\r\n              *ngIf=\"fileType == 'image'\"\r\n              [src]=\"_d.bypassSecurityTrustUrl(item.imageLocalUrl)\"\r\n              class=\"image-thumb\"\r\n              alt=\"\"\r\n            />\r\n            <div *ngIf=\"fileType == 'other'\">\r\n              <i class=\"pi pi-file p-mr-2 file-icon\"></i>\r\n            </div>\r\n          </main>\r\n          <button\r\n            type=\"button\"\r\n            pTooltip=\"Obriši\"\r\n            tooltipPosition=\"top\"\r\n            class=\"second-btn small-btn p-mr-2\"\r\n            (click)=\"removeFile(imgIndex)\"\r\n          >\r\n            <i class=\"pi pi-trash\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</ng-container>\r\n<ng-container *ngIf=\"!includeSeo && productImages\">\r\n  <section\r\n    class=\"p-fileupload p-fileupload-advanced p-component ng-star-inserted image-upload\"\r\n    [formGroup]=\"chosenFormGroup\"\r\n  >\r\n    <div class=\"upload-header p-fileupload-buttonbar\">\r\n      <div class=\"upload-btn-wrapper\">\r\n        <div class=\"file\">\r\n          <label [for]=\"'input-file-' + instanceIndex\">\r\n            Izaberi fajl <i class=\"pi pi-plus\"></i>\r\n          </label>\r\n          <input\r\n            [id]=\"'input-file-' + instanceIndex\"\r\n            type=\"file\"\r\n            (change)=\"uploadFile($event)\"\r\n            #file\r\n            [multiple]=\"enableMultiple\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <p-tag\r\n        styleClass=\"bg-light\"\r\n        severity=\"warning\"\r\n        value=\"Max: {{ fileSize }}MB\"\r\n        icon=\"pi pi-upload\"\r\n      ></p-tag>\r\n    </div>\r\n    <div class=\"upload-items p-fileupload-content\">\r\n      <div\r\n        [formArrayName]=\"controlName\"\r\n        [sortablejs]=\"fileList\"\r\n        [sortablejs]=\"srAttachments\"\r\n      >\r\n        <div\r\n          *ngFor=\"let item of fileList; let imgIndex = index\"\r\n          [formGroupName]=\"imgIndex\"\r\n          class=\"upload-item\"\r\n        >\r\n          <main class=\"main-description\">\r\n            <div class=\"reorder-handle responsive-handle p-mr-2\">\r\n              <i class=\"pi pi-sort\"></i>\r\n            </div>\r\n            <img\r\n              *ngIf=\"fileType == 'image'\"\r\n              [src]=\"_d.bypassSecurityTrustUrl(item.imageLocalUrl)\"\r\n              class=\"image-thumb\"\r\n              alt=\"\"\r\n            />\r\n            <div *ngIf=\"fileType == 'other'\">\r\n              <i class=\"pi pi-file p-mr-2 file-icon\"></i>\r\n            </div>\r\n            {{ item.fileName }}\r\n          </main>\r\n          <button\r\n            type=\"button\"\r\n            pTooltip=\"Obriši\"\r\n            tooltipPosition=\"top\"\r\n            class=\"second-btn small-btn p-mr-2\"\r\n            (click)=\"removeFile(imgIndex)\"\r\n          >\r\n            <i class=\"pi pi-trash\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</ng-container>\r\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-58af1b67a9e14e067c194c47f5bce5cc",
            "file": "src/app/shared/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [
                {
                    "name": "{\n    provide: ControlContainer, useExisting: FormGroupDirective,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "customFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "InputField"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "controlContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlContainer",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "customFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'customFormGroup'"
                        }
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fieldOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputField",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'options'"
                        }
                    ]
                },
                {
                    "name": "specificFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getSpecificFormGroup",
                    "args": [
                        {
                            "name": "formGroupPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroupPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport {\r\n  ControlContainer,\r\n  FormGroup,\r\n  FormGroupDirective,\r\n} from '@angular/forms';\r\nimport { InputField } from '../../models/input-field';\r\n\r\n@Component({\r\n  selector: 'app-input',\r\n  templateUrl: './input.component.html',\r\n  styleUrls: ['./input.component.scss'],\r\n  viewProviders: [\r\n    {\r\n      provide: ControlContainer,\r\n      useExisting: FormGroupDirective,\r\n    },\r\n  ],\r\n})\r\nexport class InputComponent implements OnInit {\r\n  @Input('options') fieldOptions: InputField;\r\n  @Input('customFormGroup') customFormGroup: any;\r\n  errors: any = {};\r\n  specificFormGroup: FormGroup;\r\n\r\n  constructor(public controlContainer: ControlContainer) {}\r\n\r\n  ngOnInit(): void {\r\n    if (\r\n      this.fieldOptions.fieldFormGroup ||\r\n      this.fieldOptions.fieldFormGroup == ''\r\n    ) {\r\n      this.specificFormGroup = this.getSpecificFormGroup(\r\n        this.fieldOptions.fieldFormGroup\r\n      );\r\n    } else {\r\n      this.specificFormGroup = this.customFormGroup;\r\n    }\r\n    if (this.fieldOptions.fieldFormGroup == '') {\r\n      this.specificFormGroup = this.customFormGroup;\r\n    }\r\n    // this.specificFormGroup = this.fieldOptions.fieldFormGroup !== '' ? this.getSpecificFormGroup(this.fieldOptions.fieldFormGroup) : this.customFormGroup;\r\n  }\r\n\r\n  onChange(event: Event) {\r\n    const formGroup = this.controlContainer.control as FormGroup;\r\n\r\n    if (\r\n      this.customFormGroup &&\r\n      this.fieldOptions.fieldFormGroup !== undefined\r\n    ) {\r\n      this.errors =\r\n        this.customFormGroup.controls[this.fieldOptions.formControlName].errors;\r\n    } else if (\r\n      this.customFormGroup &&\r\n      (this.fieldOptions.fieldFormGroup ||\r\n        this.fieldOptions.fieldFormGroup == '')\r\n    ) {\r\n      this.errors =\r\n        formGroup.controls[this.fieldOptions.formControlName].errors;\r\n    } else {\r\n      this.errors =\r\n        formGroup.controls[this.fieldOptions.formControlName].errors;\r\n    }\r\n  }\r\n\r\n  getSpecificFormGroup(formGroupPath: string) {\r\n    console.log('GRUPA', formGroupPath, this.customFormGroup);\r\n    return <FormGroup>this.customFormGroup.get(formGroupPath);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-field w-100\" [ngClass]=\"fieldOptions.containerClass\">\r\n\r\n  <ng-container *ngIf=\"fieldOptions.fieldFormGroup || fieldOptions.fieldFormGroup == ''; else elseTemplate\">\r\n    <ng-container [formGroup]=\"specificFormGroup\">\r\n      <label *ngIf=\"fieldOptions.label\">{{ fieldOptions.label }}</label>\r\n      <input [type]=\"fieldOptions.type\" [placeholder]=\"fieldOptions.placeholder ?? ''\" [formControlName]=\"fieldOptions.formControlName\" (input)=\"onChange($event)\" pInputText />\r\n    </ng-container>\r\n  </ng-container>\r\n  <ng-template #elseTemplate>\r\n    <label *ngIf=\"fieldOptions.label\">{{ fieldOptions.label }}</label>\r\n    <input [type]=\"fieldOptions.type\" [placeholder]=\"fieldOptions.placeholder ?? ''\" [formControlName]=\"fieldOptions.formControlName\" (input)=\"onChange($event)\" pInputText />\r\n  </ng-template>\r\n\r\n  <ng-container *ngIf=\"errors\">\r\n    <small *ngIf=\"errors.maxlength\" class=\"p-error\">\r\n      Polje ima {{errors.maxlength.actualLength}} karaktera a mora biti ispod {{errors.maxlength.requiredLength}} karaktera.\r\n    </small>\r\n    <small *ngIf=\"errors.pattern\" class=\"p-error\">\r\n      {{fieldOptions.errorMessage}}\r\n    </small>\r\n    <small *ngIf=\"errors.required == true\" class=\"p-error\">\r\n      Ovo polje je obavezno!\r\n    </small>\r\n    <small *ngIf=\"errors.email == true\" class=\"p-error\">\r\n      Molimo unesite pravilnu email adresu.\r\n    </small>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "InputPasswordComponent",
            "id": "component-InputPasswordComponent-57c47fa09a88edb4b92b2a45f8c8d3ff",
            "file": "src/app/shared/components/input-password/input-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input-password",
            "styleUrls": [
                "./input-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-password.component.html"
            ],
            "viewProviders": [
                {
                    "name": "{\n    provide: ControlContainer, useExisting: FormGroupDirective,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "customFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "customFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "fieldOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'options'"
                        }
                    ]
                },
                {
                    "name": "isPassShown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "togglePassShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ControlContainer, FormGroupDirective, FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-input-password',\r\n  templateUrl: './input-password.component.html',\r\n  styleUrls: ['./input-password.component.scss'],\r\n  viewProviders: [\r\n    {\r\n      provide: ControlContainer,\r\n      useExisting: FormGroupDirective,\r\n    },\r\n  ],\r\n})\r\nexport class InputPasswordComponent implements OnInit {\r\n  @Input('options') fieldOptions;\r\n  @Input() customFormGroup;\r\n  errors: any;\r\n  isPassShown = false;\r\n\r\n  constructor(private controlContainer: ControlContainer ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onChange(event: Event) {\r\n    const formGroup = this.controlContainer.control as FormGroup;\r\n\r\n    if (this.customFormGroup) {\r\n      this.errors =\r\n        this.customFormGroup.controls[this.fieldOptions.formControlName].errors;\r\n    } else {\r\n      this.errors =\r\n        formGroup.controls[this.fieldOptions.formControlName].errors;\r\n    }\r\n  }\r\n\r\n  togglePassShow() {\r\n    this.isPassShown = !this.isPassShown;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./input-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-field w-100\" [ngClass]=\"fieldOptions.containerClass\">\r\n\r\n  <ng-container *ngIf=\"customFormGroup; else elseTemplate\">\r\n    <ng-container [formGroup]=\"customFormGroup\">\r\n      <label *ngIf=\"fieldOptions.label\">{{ fieldOptions.label }}</label>\r\n      <div class=\"p-inputgroup p-d-flex\">\r\n        <input [type]=\"isPassShown ? 'text' : 'password'\" pInputText [formControlName]=\"fieldOptions.formControlName\" (input)=\"onChange($event)\">\r\n        <button type=\"button\" pButton pRipple [icon]=\"isPassShown ? 'pi pi-eye' : 'pi pi-eye-slash'\" (click)=\"togglePassShow()\" styleClass=\"p-button-warn\"></button>\r\n      </div>\r\n    </ng-container>\r\n  </ng-container>\r\n  <ng-template #elseTemplate>\r\n    <label *ngIf=\"fieldOptions.label\">{{ fieldOptions.label }}</label>\r\n    <div class=\"p-inputgroup p-d-flex\">\r\n      <input [type]=\"isPassShown ? 'text' : 'password'\" pInputText [formControlName]=\"fieldOptions.formControlName\" (input)=\"onChange($event)\">\r\n      <button type=\"button\" pButton pRipple [icon]=\"isPassShown ? 'pi pi-eye' : 'pi pi-eye-slash'\" (click)=\"togglePassShow()\" styleClass=\"p-button-warn\"></button>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-container *ngIf=\"errors\">\r\n    <small *ngIf=\"errors.maxlength\" class=\"p-error\">\r\n      Polje ima {{errors.maxlength.actualLength}} karaktera a mora biti ispod {{errors.maxlength.requiredLength}} karaktera.\r\n    </small>\r\n    <small *ngIf=\"errors.pattern\" class=\"p-error\">\r\n      {{fieldOptions.errorMessage}}\r\n    </small>\r\n    <small *ngIf=\"errors.required == true\" class=\"p-error\">\r\n      Ovo polje je obavezno!\r\n    </small>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-5c2a5a1eae9fda7f37c71caa1517f07f",
            "file": "src/app/modules/login/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-page",
            "styleUrls": [
                "./login-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cmsLogo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isPassShown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loginFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePassShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/core/authentication/auth.service';\nimport { first } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { SettingsService } from 'src/app/core/services/settings.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss'],\n})\nexport class LoginPageComponent implements OnInit, OnDestroy {\n  loading = false;\n  loginFailed = false;\n  loginForm: FormGroup;\n  subscriptions: Subscription[] = [];\n  cmsLogo: string;\n  mediaUrl = environment.mediaUrl;\n  isPassShown = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private settingsService: SettingsService\n  ) {}\n\n  // * Lifecycles === //\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      email: [''],\n      password: [''],\n    });\n\n    this.subscriptions.push(\n      this.settingsService\n        .getOne('logo')\n        .subscribe((response: any) => {\n          this.cmsLogo = this.mediaUrl + '/' + response.name;\n        })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  // * On login\n  onSubmit() {\n    this.loading = true;\n    let formData = this.loginForm.getRawValue();\n\n    this.subscriptions.push(\n      this.authService\n        .login(formData)\n        .pipe(first())\n        .subscribe({\n          next: () => {\n            const user = this.authService.userValue;\n            console.log(user);\n            this.router.navigate(['/orders']);\n          },\n          error: (error) => {\n            this.loading = false;\n            this.loginFailed = true;\n          },\n        })\n    );\n  }\n\n  // * Helpers === //\n  togglePassShow() {\n    this.isPassShown = !this.isPassShown;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hide {\r\n  display: none;\r\n}\r\n.show {\r\n  display: block;\r\n}\r\n\r\n.login-bg {\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  .logo {\r\n    padding: 2rem 0;\r\n    width: 30%;\r\n  }\r\n\r\n  .login-card {\r\n    display: flex;\r\n    flex-flow: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 340px;\r\n    form {\r\n      width: 100%;\r\n    }\r\n    input {\r\n      width: 100%;\r\n    }\r\n    .main-btn {\r\n      margin-top: 1.5rem;\r\n    }\r\n    .sizes {\r\n      .p-inputtext {\r\n        display: block;\r\n        margin-bottom: 0.5rem;\r\n        &:last-child {\r\n          margin-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n",
                    "styleUrl": "./login-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"login-bg\">\n  <div class=\"card login-card\">\n    <img *ngIf=\"cmsLogo\" [src]=\"cmsLogo\" alt=\"\" class=\"logo\" />\n\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"p-field p-d-block\">\n        <label>Email</label>\n        <input type=\"text\" pInputText formControlName=\"email\" />\n      </div>\n\n      <div class=\"p-field\">\n        <label>Šifra</label>\n        <div class=\"p-inputgroup p-d-flex\">\n          <input [type]=\"isPassShown ? 'text' : 'password'\" pInputText formControlName=\"password\">\n          <button type=\"button\" pButton pRipple [icon]=\"isPassShown ? 'pi pi-eye' : 'pi pi-eye-slash'\" (click)=\"togglePassShow()\" styleClass=\"p-button-warn\"></button>\n        </div>\n      </div>\n\n      <button class=\"main-btn w-100\" type=\"submit\">\n        <div class=\"p-d-flex p-ai-center\">\n          <p-progressSpinner\n            *ngIf=\"loading\"\n            [style]=\"{ width: '15px', height: '15px' }\"\n            styleClass=\"custom-spinner p-mr-2\"\n            strokeWidth=\"8\"\n            animationDuration=\".5s\"\n          ></p-progressSpinner>\n          Prijavi se\n        </div>\n        <i class=\"pi pi-sign-in\"></i>\n      </button>\n      <p-message\n        severity=\"error\"\n        *ngIf=\"loginFailed\"\n        text=\"Šifra ili korisničko ime su pogrešni, pokušajte ponovo.\"\n        styleClass=\"p-mt-2\"\n      ></p-message>\n\n      <section class=\"p-d-flex\">\n        <a class=\"p-text-center p-mt-3 w-100\" [routerLink]=\"['forget-password']\">Zaboravili ste šifru?</a>\n      </section>\n\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "MainLayoutComponent",
            "id": "component-MainLayoutComponent-692f830942ca18b86e2d8f717653438d",
            "file": "src/app/includes/layout/main-layout/main-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-layout",
            "styleUrls": [
                "./main-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "darkMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "display",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "leftSidebar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "themeOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "topSidebar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSidebarPosition",
                    "args": [
                        {
                            "name": "position",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDarkMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { HelperService } from 'src/app/core/services/helper.service';\r\n\r\n@Component({\r\n  selector: 'app-main-layout',\r\n  templateUrl: './main-layout.component.html',\r\n  styleUrls: ['./main-layout.component.scss']\r\n})\r\nexport class MainLayoutComponent implements OnInit {\r\n  title: string;\r\n  darkMode = false;\r\n  leftSidebar = false;\r\n  topSidebar = false;\r\n  themeOptions: {\r\n    sidebarPosition: string;\r\n  };\r\n  subscriptions: Subscription[] = [];\r\n  display = false;\r\n  constructor(private helperService: HelperService) { }\r\n\r\n  ngOnInit(): void {\r\n    let currentState = JSON.parse(localStorage.getItem('darkMode'));\r\n    this.darkMode = currentState ?? false;\r\n    this.themeOptions = JSON.parse(localStorage.getItem('themeOptions'));\r\n\r\n    this.subscriptions.push(\r\n      this.helperService.darkMode.subscribe((value) => {\r\n        if (value != null) {\r\n          this.darkMode = value;\r\n          localStorage.setItem('darkMode', JSON.stringify(this.darkMode));\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  toggleDarkMode() {\r\n    this.darkMode = !this.darkMode;\r\n    localStorage.setItem('darkMode', JSON.stringify(this.darkMode));\r\n  }\r\n\r\n  setSidebarPosition(position: string) {\r\n    this.themeOptions = {\r\n      sidebarPosition: position,\r\n    };\r\n    localStorage.setItem('themeOptions', JSON.stringify(this.themeOptions));\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/assets/scss/partials/mixins\";\r\n@import \"src/assets/scss/partials/variables\";\r\n\r\n#main-content {\r\n  height: 100%;\r\n  display: flex;\r\n\r\n  &.right-sidebar {\r\n    flex-flow: row-reverse;\r\n  }\r\n\r\n  .settings-panel-btn {\r\n    background-color: $main-color;\r\n    color: #fff;\r\n    position: fixed;\r\n    right: 30px;\r\n    border: none;\r\n    width: 40px;\r\n    height: 40px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 100px;\r\n    bottom: 30px;\r\n    cursor: pointer;\r\n    opacity: 0.3;\r\n    transition: all 0.3s;\r\n    &:hover {\r\n      opacity: 1;\r\n      transition: all 0.3s;\r\n    }\r\n  }\r\n}\r\n.main-content {\r\n  width: 100%;\r\n  height: 100vh;\r\n  padding: 1.5rem;\r\n  padding-top: 0px;\r\n  overflow-y: scroll;\r\n\r\n  @include xs {\r\n    padding: 1rem;\r\n    padding-top: 40px;\r\n    min-width: 320px;\r\n  }\r\n}\r\n\r\n.top-sidebar {\r\n  .main-content {\r\n    padding-top: 2.5rem;\r\n  }\r\n}\r\n\r\n.content {\r\n  width: 100%;\r\n  height: 100vh;\r\n  padding-top: 0px;\r\n  overflow: hidden;\r\n}\r\n",
                    "styleUrl": "./main-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "helperService",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "helperService",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  id=\"main-content\"\r\n  [ngClass]=\"{ 'theme-dark': darkMode }\"\r\n  [class.top-sidebar]=\"themeOptions?.sidebarPosition === 'top'\"\r\n  [class.right-sidebar]=\"themeOptions?.sidebarPosition === 'right'\"\r\n>\r\n  <!-- * LEFT NAVBAR -->\r\n  <app-sidebar></app-sidebar>\r\n\r\n  <!-- * MAIN CONTENT -->\r\n  <div class=\"content\">\r\n    <!-- * TOP HEADER -->\r\n    <app-header></app-header>\r\n    <div class=\"main-content\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- * Theme settings -->\r\n  <p-sidebar [(visible)]=\"display\" position=\"right\">\r\n    <h2 class=\"p-mb-3\">Podešavanja teme</h2>\r\n    <div class=\"p-field sidebar-position-group\">\r\n      <label>Pozicija sidebar-a</label>\r\n      <span class=\"p-buttonset\">\r\n        <!-- <button\r\n          (click)=\"setSidebarPosition('top')\"\r\n          pButton\r\n          pRipple\r\n          icon=\"pi pi-arrow-up\"\r\n          class=\"p-button-sm\"\r\n        ></button> -->\r\n        <button\r\n          (click)=\"setSidebarPosition('left')\"\r\n          pButton\r\n          pRipple\r\n          icon=\"pi pi-arrow-left\"\r\n          class=\"p-button-sm\"\r\n        ></button>\r\n        <button\r\n          (click)=\"setSidebarPosition('right')\"\r\n          pButton\r\n          pRipple\r\n          icon=\"pi pi-arrow-right\"\r\n          class=\"p-button-sm\"\r\n        ></button>\r\n      </span>\r\n    </div>\r\n    <div class=\"p-field\">\r\n      <label>Dark mode</label>\r\n      <div class=\"dark-mode-switch\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"switch\"\r\n          class=\"switch\"\r\n          (change)=\"toggleDarkMode()\"\r\n          [checked]=\"darkMode\"\r\n        />\r\n        <label\r\n          id=\"label\"\r\n          for=\"switch\"\r\n          class=\"label\"\r\n          [ngClass]=\"{ dark: darkMode }\"\r\n        >\r\n          <i class=\"pi pi-moon fas fa-moon\"></i>\r\n          <i class=\"pi pi-sun fas fa-sun\"></i>\r\n          <div class=\"ball\"></div>\r\n        </label>\r\n      </div>\r\n    </div>\r\n  </p-sidebar>\r\n\r\n  <button (click)=\"display = true\" class=\"settings-panel-btn\">\r\n    <i class=\"pi pi-sliders-h\"></i>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "OrdersEditComponent",
            "id": "component-OrdersEditComponent-986af0e4b15d0314e80b9b592d991184",
            "file": "src/app/modules/orders/orders-edit/orders-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "selector": "app-orders-edit",
            "styleUrls": [
                "./orders-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./orders-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrdersFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "orderData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "orderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "orderInfoForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DatePipe } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { OrdersService } from 'src/app/core/services/orders.service';\r\nimport { OrdersFieldsService } from '../orders-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-orders-edit',\r\n  templateUrl: './orders-edit.component.html',\r\n  styleUrls: ['./orders-edit.component.scss'],\r\n  providers: [DatePipe],\r\n})\r\nexport class OrdersEditComponent implements OnInit {\r\n  subscriptions: Subscription[] = [];\r\n  orderId: number;\r\n  orderData;\r\n  orderInfoForm: FormGroup;\r\n  loading = false;\r\n\r\n  constructor(\r\n    private ordersService: OrdersService,\r\n    private route: ActivatedRoute,\r\n    private messService: MessServiceService,\r\n    private fb: FormBuilder,\r\n    public fieldsService: OrdersFieldsService,\r\n    private datePipe: DatePipe\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    this.orderId = +this.route.snapshot.params.id;\r\n\r\n    this.orderInfoForm = this.fb.group({\r\n      name: [{ value: '', disabled: true }],\r\n      phone: [{ value: '', disabled: true }],\r\n      email: [{ value: '', disabled: true }],\r\n      created_at: [{ value: '', disabled: true }],\r\n      note: [{ value: '', disabled: true }],\r\n      description: [{ value: '', disabled: true }],\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  // * Change status === //\r\n  onChangeStatus(event, categoryId: number) {\r\n    console.log(event);\r\n    const status = {\r\n      status: event.checked ? 1 : 0,\r\n    };\r\n    this.subscriptions.push(\r\n      this.ordersService.updateStatus(categoryId, status).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno menjanje statusa',\r\n            detail: 'Uspešno ste promenili status upita.',\r\n          });\r\n          // this.updateTable(1);\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  updatePageView() {\r\n    this.loading = true;\r\n    this.subscriptions.push(\r\n      this.ordersService.getOne(this.orderId).subscribe((response) => {\r\n        this.orderData = response;\r\n        this.loading = false;\r\n        this.orderInfoForm.patchValue({\r\n          name: this.orderData.name,\r\n          phone: this.orderData.phone,\r\n          email: this.orderData.email,\r\n          created_at: this.datePipe.transform(\r\n            this.orderData.created_at,\r\n            'hh:mm - dd.MM.yyyy '\r\n          ),\r\n          note: this.orderData.note,\r\n          description: this.orderData.description,\r\n        });\r\n        console.log(response);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./orders-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ordersService",
                        "type": "OrdersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "OrdersFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "ordersService",
                        "type": "OrdersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "OrdersFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  [backPath]=\"['./../../']\"\r\n  headerTitle=\"UPIT - Detaljni prikaz\"\r\n  [skeletonLoad]=\"!orderData\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\" *ngIf=\"orderData\">\r\n      <div class=\"p-col-12 p-sm-8\">\r\n        <app-form-builder\r\n          [form]=\"orderInfoForm\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </div>\r\n      <div class=\"p-col-12 p-sm-4\">\r\n        <div class=\"p-field\">\r\n          <label for=\"username2\">Rešen</label>\r\n          <p-inputSwitch\r\n            [ngModel]=\"orderData.status === 1 ? true : false\"\r\n            (onChange)=\"onChangeStatus($event, orderData.id)\"\r\n            name=\"status\"\r\n          ></p-inputSwitch>\r\n        </div>\r\n      </div>\r\n      <div class=\"p-col-12\">\r\n        <p-table\r\n          [value]=\"orderData.items\"\r\n          [rows]=\"10\"\r\n          [loading]=\"loading\"\r\n          styleClass=\"p-datatable-customers p-datatable-gridlines p-datatable-responsive-demo\"\r\n          [paginator]=\"false\"\r\n        >\r\n          <ng-template pTemplate=\"header\">\r\n            <tr>\r\n              <th></th>\r\n              <th>Naziv proizvoda</th>\r\n              <th>Šifra proizvoda</th>\r\n              <th>Količina</th>\r\n              <th>Lager</th>\r\n              <th>Na carini</th>\r\n              <th>Cena</th>\r\n            </tr>\r\n          </ng-template>\r\n\r\n          <ng-template pTemplate=\"body\" let-orders let-i=\"rowIndex\">\r\n            <tr>\r\n              <td>\r\n                <a [href]=\"orders.url\" target=\"_blank\">\r\n                  <img [src]=\"orders.image\" style=\"width: 100%; height: auto\" />\r\n                </a>\r\n              </td>\r\n              <td>\r\n                <span class=\"p-column-title\">Naziv proizvoda</span>\r\n                <a [href]=\"orders.url\" target=\"_blank\"\r\n                  ><span>{{ orders.name }}</span></a\r\n                >\r\n              </td>\r\n              <td>\r\n                <span class=\"p-column-title\">Šifra proizvoda</span>\r\n                <span>{{ orders.real_id }}</span>\r\n              </td>\r\n              <td>\r\n                <span class=\"p-column-title\">Količina</span>\r\n                <span>{{ orders.amount }}</span>\r\n              </td>\r\n              <td>\r\n                <span class=\"p-column-title\">Lager</span>\r\n                <span>{{ orders.quantity }}</span>\r\n              </td>\r\n              <td>\r\n                <span class=\"p-column-title\">Na carini</span>\r\n                <span>{{ orders.arrivals }}</span>\r\n              </td>\r\n              <td>\r\n                <span class=\"p-column-title\">Cena</span>\r\n                <span>{{ orders.price }}</span>\r\n              </td>\r\n            </tr>\r\n          </ng-template>\r\n\r\n          <ng-template pTemplate=\"emptymessage\">\r\n            <tr>\r\n              <td colspan=\"6\">Ni jedan artikal nije pronađen.</td>\r\n            </tr>\r\n          </ng-template>\r\n        </p-table>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "OrdersListComponent",
            "id": "component-OrdersListComponent-0ad627d02fe12ae82614c21f11927650",
            "file": "src/app/modules/orders/orders-list/orders-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-orders-list",
            "styleUrls": [
                "./orders-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./orders-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hideFilters",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "orders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "paginator",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaginatorApi | any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "paginatorElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Paginator",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'paginatorElement'"
                        }
                    ]
                },
                {
                    "name": "searchForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "status",
                    "defaultValue": "[\n    { label: 'Svi', value: '' },\n    { label: 'Rešeni', value: '&status=1' },\n    { label: 'Nerešeni', value: '&status=0' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "orderId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "orderId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCurrentPage",
                    "args": [
                        {
                            "name": "currentPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTable",
                    "args": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { ConfirmationService } from 'primeng/api';\nimport { Paginator } from 'primeng/paginator';\nimport { Subscription } from 'rxjs';\nimport { MenuToggleService } from 'src/app/core/services/menu-toggle.service';\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\nimport { OrdersService } from 'src/app/core/services/orders.service';\nimport { PaginatorApi } from 'src/app/shared/models/paginator';\n\n@Component({\n  selector: 'app-orders-list',\n  templateUrl: './orders-list.component.html',\n  styleUrls: ['./orders-list.component.scss'],\n})\nexport class OrdersListComponent implements OnInit, AfterViewInit, OnDestroy {\n  loading = false;\n  orders;\n  searchForm: FormGroup;\n  subscriptions: Subscription[] = [];\n  paginator: PaginatorApi | any = {};\n  @ViewChild('paginatorElement') paginatorElement: Paginator;\n  status = [\n    { label: 'Svi', value: '' },\n    { label: 'Rešeni', value: '&status=1' },\n    { label: 'Nerešeni', value: '&status=0' },\n  ];\n  hideFilters = true;\n\n  constructor(\n    private ordersService: OrdersService,\n    private messService: MessServiceService,\n    private menuToggle: MenuToggleService,\n    private fb: FormBuilder,\n    private confirmationService: ConfirmationService,\n    private cdr: ChangeDetectorRef\n  ) {}\n\n  // * Lifecycles === //\n  ngOnInit(): void {\n    // Init search form\n    this.searchForm = this.fb.group({\n      name: [''],\n      status: [''],\n    });\n\n    if(window.innerWidth < 500){\n      this.subscriptions.push(\n        this.menuToggle.currentState.subscribe(state => {\n          if(state != null){\n            this.hideFilters = true;\n          }\n        })\n      )\n    }else{\n      this.hideFilters = false;\n    }\n\n  }\n\n  ngAfterViewInit() {\n    this.subscriptions.push(\n      this.ordersService.ordersFilter.subscribe((response) => {\n        if(response){\n          this.searchForm.patchValue({\n            name: response.name,\n          })\n          this.onSearch();\n        }else{\n          // Get all users\n          this.updateTable(1);\n        }\n      })\n    );\n\n    this.cdr.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n    this.saveFilter();\n  }\n\n  // * Search === //\n  onSearch() {\n    const searchForm = this.searchForm.getRawValue();\n    // Get active users\n    this.loading = true;\n    this.subscriptions.push(\n      this.ordersService\n        .getAll(1, `&search=${searchForm.name}${searchForm.status}`)\n        .subscribe((response: PaginatorApi) => {\n          this.orders = response.data;\n          this.paginator = response;\n          console.log(response);\n          if(this.paginatorElement.getPage().toString() === 'NaN'){\n            this.updateCurrentPage(2);\n          }else{\n            this.updateCurrentPage(1);\n          }\n          this.loading = false;\n        })\n    );\n  }\n\n  // * Change status === //\n  onChangeStatus(event, categoryId: number) {\n    console.log(event);\n    const status = {\n      status: event.checked ? 1 : 0,\n    };\n    this.subscriptions.push(\n      this.ordersService.updateStatus(categoryId, status).subscribe(\n        () => {\n          this.messService.addSuccess({\n            severity: 'success',\n            title: 'Uspešno menjanje statusa',\n            detail: 'Uspešno ste promenili status upita.',\n          });\n          // this.updateTable(1);\n        },\n        (error) => {\n          console.log(error);\n        }\n      )\n    );\n  }\n\n  // * Delete order === //\n  onDelete(event: Event, orderId: number) {\n    this.confirmationService.confirm({\n      target: event.target,\n      message: 'Da li ste sigurni da želite da obrišete upit?',\n      icon: 'pi pi-exclamation-triangle',\n      acceptLabel: 'Da',\n      rejectLabel: 'Ne',\n      accept: () => {\n        this.subscriptions.push(\n          this.ordersService.delete(orderId).subscribe(\n            () => {\n              this.messService.addSuccess({\n                severity: 'success',\n                title: 'Uspešno brisanje',\n                detail: 'Obrisali ste upit.',\n              });\n              this.updateTable(1);\n            },\n            (error) => {\n              this.messService.addError({\n                severity: 'error',\n                title: 'Greška',\n                detail: 'Došlo je do greške, pokušajte ponovo!',\n              });\n            }\n          )\n        );\n      },\n    });\n  }\n\n  // * Helpers === //\n  updateTable(pageIndex: number) {\n    const searchForm = this.searchForm.getRawValue();\n    // Get active users\n    this.loading = true;\n    this.subscriptions.push(\n      this.ordersService\n        .getAll(pageIndex, `&search=${searchForm.name}${searchForm.status}`)\n        .subscribe((response: PaginatorApi) => {\n          this.orders = response.data;\n          this.paginator = response;\n          console.log(response);\n          this.loading = false;\n        })\n    );\n  }\n\n  private updateCurrentPage(currentPage: number): void {\n    this.paginatorElement.changePage(currentPage - 1);\n  }\n\n  onPageChange(event) {\n    this.updateTable(event.page + 1);\n  }\n\n  saveFilter(){\n    this.ordersService.ordersFilter.next(this.searchForm.getRawValue());\n  }\n\n  resetFilter(){\n    this.searchForm.patchValue({\n      name: ''\n    })\n    this.updateTable(1);\n    this.saveFilter();\n  }\n\n  toggleFilters(){\n    this.hideFilters = !this.hideFilters;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./orders-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ordersService",
                        "type": "OrdersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "ordersService",
                        "type": "OrdersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"main\"\r\n  headerTitle=\"UPITI\"\r\n  [skeletonLoad]=\"!orders\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <p-table\r\n            #dt1\r\n            [value]=\"orders\"\r\n            dataKey=\"id\"\r\n            [rows]=\"10\"\r\n            [showCurrentPageReport]=\"true\"\r\n            [rowsPerPageOptions]=\"[10, 25, 50]\"\r\n            [loading]=\"loading\"\r\n            styleClass=\"p-datatable-customers p-datatable-gridlines p-datatable-responsive-demo\"\r\n            [paginator]=\"false\"\r\n            currentPageReportTemplate=\"Prikaz od {first}. do {last}. proizvoda od ukupno {totalRecords}\"\r\n            [globalFilterFields]=\"['name']\"\r\n          >\r\n            <ng-template pTemplate=\"caption\">\r\n              <form\r\n                class=\"page-control\"\r\n                [formGroup]=\"searchForm\"\r\n                (ngSubmit)=\"onSearch()\"\r\n                [ngClass]=\"{ 'toggle-filters': hideFilters }\"\r\n              >\r\n                <section\r\n                  class=\"filter-dark-bg\"\r\n                  (click)=\"toggleFilters()\"\r\n                ></section>\r\n                <button\r\n                  class=\"close-bar\"\r\n                  type=\"button\"\r\n                  (click)=\"toggleFilters()\"\r\n                >\r\n                  <div class=\"bar\"></div>\r\n                </button>\r\n                <div class=\"input-fields\">\r\n                  <p-selectButton\r\n                    styleClass=\"p-mr-2 filter-item\"\r\n                    (onChange)=\"onSearch()\"\r\n                    [options]=\"status\"\r\n                    formControlName=\"status\"\r\n                    optionLabel=\"label\"\r\n                    optionValue=\"value\"\r\n                  ></p-selectButton>\r\n                  <div class=\"p-inputgroup p-mr-2 w-fit-content filter-item\">\r\n                    <span class=\"p-input-icon-left\">\r\n                      <i class=\"pi pi-search\"></i>\r\n                      <input\r\n                        pInputText\r\n                        type=\"text\"\r\n                        formControlName=\"name\"\r\n                        placeholder=\"Pretraži ime\"\r\n                        class=\"w-100\"\r\n                        tabindex=\"1\"\r\n                      />\r\n                    </span>\r\n                    <button\r\n                      type=\"button\"\r\n                      tabindex=\"2\"\r\n                      (click)=\"searchForm.controls['name'].setValue('')\"\r\n                      pButton\r\n                      icon=\"pi pi-times\"\r\n                      styleClass=\"p-button-warn\"\r\n                    ></button>\r\n                  </div>\r\n                </div>\r\n                <div class=\"filter-buttons\">\r\n                  <button\r\n                    type=\"button\"\r\n                    tabindex=\"3\"\r\n                    (click)=\"resetFilter()\"\r\n                    pTooltip=\"Resetuj filtere\"\r\n                    icon=\"false\"\r\n                    pButton\r\n                    tooltipPosition=\"top\"\r\n                    class=\"main-btn only-icon-btn p-mr-1\"\r\n                  >\r\n                    <i class=\"pi pi-refresh\"></i>\r\n                  </button>\r\n                  <button type=\"submit\" tabindex=\"4\" pButton class=\"main-btn\">\r\n                    Pretraži <i class=\"pi pi-search\"></i>\r\n                  </button>\r\n                </div>\r\n              </form>\r\n              <button\r\n                class=\"main-btn w-100 toggle-filter-btn\"\r\n                type=\"button\"\r\n                (click)=\"toggleFilters()\"\r\n              >\r\n                Filteri <i class=\"pi pi-search\"></i>\r\n              </button>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"header\">\r\n              <tr>\r\n                <th>\r\n                  <span>Ime i prezime</span>\r\n                </th>\r\n                <th>Email</th>\r\n                <th>Telefon</th>\r\n                <th>Datum i vreme</th>\r\n                <th style=\"width: 8rem\">\r\n                  <div class=\"p-d-flex p-jc-center p-ai-center\">Rešen</div>\r\n                </th>\r\n                <th style=\"width: 8rem\">\r\n                  <div class=\"p-d-flex p-jc-center p-ai-center\">Akcija</div>\r\n                </th>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"body\" let-orders let-i=\"rowIndex\">\r\n              <tr>\r\n                <td>\r\n                  <span class=\"p-column-title\">Ime i prezime</span>\r\n                  <span>{{ orders.name }}</span>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Email</span>\r\n                  <span>{{ orders.email }}</span>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Telefon</span>\r\n                  <span>{{ orders.phone }}</span>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Datum i vreme</span>\r\n                  <span>{{ orders.created_at | date: \"MMM d, y, H:mm\" }}</span>\r\n                </td>\r\n                <td>\r\n                  <div class=\"p-d-flex p-ai-center\">\r\n                    <span class=\"p-column-title\">Rešen</span>\r\n                    <p-inputSwitch\r\n                      [ngModel]=\"orders.status === 1 ? true : false\"\r\n                      (onChange)=\"onChangeStatus($event, orders.id)\"\r\n                      [name]=\"orders.id\"\r\n                    ></p-inputSwitch>\r\n                  </div>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Akcija</span>\r\n                  <a\r\n                    class=\"second-btn small-btn p-mr-2\"\r\n                    pTooltip=\"Izmeni\"\r\n                    tooltipPosition=\"top\"\r\n                    [routerLink]=\"['edit', orders.id]\"\r\n                  >\r\n                    <i class=\"pi pi-pencil\"></i>\r\n                  </a>\r\n                  <button\r\n                    class=\"second-btn small-btn\"\r\n                    type=\"button\"\r\n                    pTooltip=\"Izbriši\"\r\n                    tooltipPosition=\"top\"\r\n                    (click)=\"onDelete($event, orders.id)\"\r\n                  >\r\n                    <i class=\"pi pi-trash\"></i>\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"emptymessage\">\r\n              <tr>\r\n                <td colspan=\"6\">Ni jedan upit nije pronađen.</td>\r\n              </tr>\r\n            </ng-template>\r\n          </p-table>\r\n          <p-paginator\r\n            #paginatorElement\r\n            [first]=\"1\"\r\n            [rows]=\"paginator.per_page\"\r\n            [showJumpToPageDropdown]=\"true\"\r\n            [showPageLinks]=\"true\"\r\n            [totalRecords]=\"paginator.total\"\r\n            (onPageChange)=\"onPageChange($event)\"\r\n            [showPageLinks]=\"false\"\r\n          ></p-paginator>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "OurClientsAddComponent",
            "id": "component-OurClientsAddComponent-76527a66dcefb6a62a8b0af53f5fc6df",
            "file": "src/app/modules/sections/our-clients/our-clients-add/our-clients-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-our-clients-add",
            "styleUrls": [
                "./our-clients-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./our-clients-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OurClientsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { OurClientsFieldsService } from '../our-clients-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-our-clients-add',\r\n  templateUrl: './our-clients-add.component.html',\r\n  styleUrls: ['./our-clients-add.component.scss'],\r\n})\r\nexport class OurClientsAddComponent implements OnInit, OnDestroy {\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  fd = new FormData();\r\n  fileList: fileList[] = [];\r\n  loading: boolean = false;\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: OurClientsFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      parent: ['13'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          slug: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu ikonicu.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./our-clients-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "OurClientsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "OurClientsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"KLIJENTI - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Logo</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "OurClientsComponent",
            "id": "component-OurClientsComponent-a6b05cb98a7a6c0c08b8aaab21a22041",
            "file": "src/app/modules/sections/our-clients/our-clients.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-our-clients",
            "styleUrls": [
                "./our-clients.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./our-clients.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OurClientsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "sectionsOrder",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { environment } from 'src/environments/environment';\r\nimport { OurClientsFieldsService } from './our-clients-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-our-clients',\r\n  templateUrl: './our-clients.component.html',\r\n  styleUrls: ['./our-clients.component.scss'],\r\n})\r\nexport class OurClientsComponent implements OnInit {\r\n  orderItems;\r\n  postForm: FormGroup;\r\n  postData;\r\n  loading = false;\r\n  postId: number;\r\n  subscriptions: Subscription[] = [];\r\n  mediaUrl = environment.mediaUrl;\r\n  sectionsOrder: { id: number }[] = [];\r\n  fd = new FormData();\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData: ReorderData[] = [];\r\n\r\n  constructor(\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private confirmationService: ConfirmationService,\r\n    public fieldsService: OurClientsFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.postId = +this.route.snapshot.params.sectionId;\r\n\r\n    // Form init\r\n    this.postForm = this.fb.group({\r\n      id: ['13'],\r\n      post_type: ['post'],\r\n      post_name: ['clients'],\r\n      parent: ['1'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          post_type: ['post'],\r\n          title: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          post_type: ['post'],\r\n          title: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          post_type: ['post'],\r\n          title: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit\r\n  onSubmit() {\r\n    const pageForm = this.postForm.getRawValue();\r\n    console.log(pageForm);\r\n\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili stranicu',\r\n          });\r\n          // this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete klijenta?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste klijenta.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        this.postData = response;\r\n        this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.orderItems = response.posts;\r\n        if (this.orderItems) {\r\n          this.orderItems.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.title,\r\n              subtitle: element.locale.sr.content,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n              image: element.locale.en.attachments[0]\r\n                ? element.locale.en.attachments[0].name\r\n                : null,\r\n            });\r\n          });\r\n        }\r\n        this.loading = false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./our-clients.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "OurClientsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "OurClientsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"KLIJENTI\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showAddButton]=\"true\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Klijenti\">\r\n            <p-panel header=\"Svi klijenti\">\r\n              <app-post-reorder\r\n                [arrayForOrder]=\"postOrder\"\r\n                [orderItems]=\"reorderData\"\r\n                (itemDeleted)=\"updatePageView()\"\r\n              >\r\n              </app-post-reorder>\r\n            </p-panel>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Opis sekcije\">\r\n            <p-tabView>\r\n              <p-tabPanel header=\"Srpski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('sr')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Engleski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('en')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Nemački\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('de')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n            </p-tabView>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "OurClientsEditComponent",
            "id": "component-OurClientsEditComponent-02166305ff86b8aeabc88cf4a2ab26af",
            "file": "src/app/modules/sections/our-clients/our-clients-edit/our-clients-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-our-clients-edit",
            "styleUrls": [
                "./our-clients-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./our-clients-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OurClientsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangAttachments",
                    "args": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { OurClientsFieldsService } from '../our-clients-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-our-clients-edit',\r\n  templateUrl: './our-clients-edit.component.html',\r\n  styleUrls: ['./our-clients-edit.component.scss'],\r\n})\r\nexport class OurClientsEditComponent implements OnInit {\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  postId: number;\r\n  postData;\r\n  loading = false;\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: OurClientsFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get post ID\r\n    this.postId = +this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['13'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          slug: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        response.locale.sr.attachments.forEach((attachment) => {\r\n          this.getLangAttachments('sr').push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n\r\n          // Show old images\r\n          this.fileList.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n            fileName: attachment.name,\r\n          });\r\n        });\r\n        this.patchLangAttachments(response, 'en');\r\n        this.patchLangAttachments(response, 'de');\r\n\r\n        // this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste izmenili klijenta.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n      slug: this.postData.locale[langCode].slug,\r\n    });\r\n  }\r\n\r\n  patchLangAttachments(attachArray, langCode: string) {\r\n    attachArray.locale[langCode].attachments.forEach((attachment) => {\r\n      this.getLangAttachments(langCode).push(\r\n        this.fb.group({\r\n          title: [attachment.title],\r\n          alt: [attachment.alt],\r\n          name: [attachment.name],\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  patchForm() {\r\n    this.patchLangForm('sr');\r\n    this.patchLangForm('en');\r\n    this.patchLangForm('de');\r\n\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./our-clients-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "OurClientsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "OurClientsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"KLIJENTI - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showAddButton]=\"true\"\r\n  layoutType=\"post\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Logo</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          >\r\n          </app-image-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "PageSeoComponent",
            "id": "component-PageSeoComponent-ac97645fa71694a9ec0039cb452f301c",
            "file": "src/app/shared/components/page-seo/page-seo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-seo",
            "styleUrls": [
                "./page-seo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-seo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-page-seo',\n  templateUrl: './page-seo.component.html',\n  styleUrls: ['./page-seo.component.scss']\n})\nexport class PageSeoComponent implements OnInit {\n  @Input() formGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-seo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p-accordion>\n  <p-accordionTab header=\"SEO OPTIMIZACIJA\">\n    <div class=\"p-grid\" [formGroup]=\"formGroup\">\n      <div class=\"p-col-12 p-sm-4 \">\n        <div class=\"p-field w-100\">\n          <label>Meta title</label>\n          <input type=\"text\"  formControlName=\"meta_title\" pInputText />\n        </div>\n        <div class=\"p-field w-100\">\n          <label>Meta keywords</label>\n          <input type=\"text\"  formControlName=\"meta_keywords\" pInputText />\n        </div>\n      </div>\n      <div class=\"p-col-12 p-sm-4 \">\n        <div class=\"p-field w-100\">\n          <label>Meta description</label>\n          <textarea [rows]=\"5\" formControlName=\"meta_description\" pInputTextarea></textarea>\n        </div>\n      </div>\n      <div class=\"p-col-12 p-sm-4 \">\n        <div class=\"p-field w-100\">\n          <label>Slug</label>\n          <input type=\"text\"  formControlName=\"slug\" pInputText />\n        </div>\n      </div>\n    </div>\n  </p-accordionTab>\n</p-accordion>\n"
        },
        {
            "name": "PagesListComponent",
            "id": "component-PagesListComponent-ad712ee3d31148019ffcf8c2bc6a3d3c",
            "file": "src/app/modules/pages/pages-list/pages-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pages-list",
            "styleUrls": [
                "./pages-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pages-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "displayModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaginatorApi",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangePageStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showModalDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePageList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ConfirmationService } from 'primeng/api';\nimport { Subscription } from 'rxjs';\nimport { ConfirmService } from 'src/app/core/services/confirm.service';\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\nimport { PostsService } from 'src/app/core/services/posts.service';\nimport { PaginatorApi } from 'src/app/shared/models/paginator';\n\n@Component({\n  selector: 'app-pages-list',\n  templateUrl: './pages-list.component.html',\n  styleUrls: ['./pages-list.component.scss'],\n})\nexport class PagesListComponent implements OnInit {\n  loading = false;\n  subscriptions: Subscription[] = [];\n  allPages;\n  paginator: PaginatorApi;\n  displayModal: boolean;\n\n  constructor(\n    private postsService: PostsService,\n    private messService: MessServiceService,\n    private confirmService: ConfirmService\n  ) {}\n\n  ngOnInit(): void {\n    this.updatePageList();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  // * Delete === //\n  onDelete(event: Event, postId: number) {\n    console.log(postId);\n    this.confirmService.confirm(event, {\n      accept: () => {\n        this.subscriptions.push(\n          this.postsService.deletePost(postId).subscribe(\n            () => {\n              this.messService.addSuccess({\n                severity: 'success',\n                title: 'Uspešno brisanje',\n                detail: 'Obrisali ste stranicu.',\n              });\n              this.updatePageList();\n            },\n            (error) => {\n              this.messService.addError({\n                severity: 'error',\n                title: 'Greška',\n                detail: 'Došlo je do greške, pokušajte ponovo!',\n              });\n            }\n          )\n        );\n      },\n    });\n  }\n\n  // * Helpers === //\n  showModalDialog() {\n    this.displayModal = true;\n  }\n\n  onChangePageStatus(event, pageId: number) {\n    console.log(event);\n    const status = {\n      status: event.checked ? 1 : 0,\n    };\n    this.subscriptions.push(\n      this.postsService.updatePostStatus(pageId, status).subscribe(\n        () => {\n          this.messService.addSuccess({\n            severity: 'success',\n            title: 'Uspešno menjanje statusa',\n            detail: 'Uspešno ste promenili vidljivost stranice.',\n          });\n        },\n        (error) => {\n          console.log(error);\n        }\n      )\n    );\n  }\n\n  updatePageList() {\n    this.loading = true;\n    this.subscriptions.push(\n      this.postsService.getAllPages().subscribe((response: PaginatorApi) => {\n        this.allPages = response;\n        // this.paginator = response;\n        this.loading = false;\n        console.log(response);\n      })\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".template-icon{\r\n  padding-right: 1rem;\r\n  display: flex;\r\n  flex-flow: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-decoration: none;\r\n\r\n  img{\r\n    margin-bottom: .6rem;\r\n  }\r\n  span{\r\n    font-size: .8rem;\r\n    color: gray;\r\n  }\r\n}\r\n",
                    "styleUrl": "./pages-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmService",
                        "type": "ConfirmService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmService",
                        "type": "ConfirmService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"main\"\r\n  headerTitle=\"Stranice\"\r\n  [skeletonLoad]=\"false\"\r\n>\r\n  <ng-container buttons>\r\n    <button (click)=\"showModalDialog()\" class=\"main-btn\" type=\"button\">\r\n      Dodaj stranicu <i class=\"pi pi-plus\"></i>\r\n    </button>\r\n  </ng-container>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <p-table\r\n            #dt1\r\n            [value]=\"allPages\"\r\n            dataKey=\"id\"\r\n            [rows]=\"10\"\r\n            [showCurrentPageReport]=\"true\"\r\n            [rowsPerPageOptions]=\"[10, 25, 50]\"\r\n            [loading]=\"loading\"\r\n            styleClass=\"p-datatable-customers p-datatable-gridlines p-datatable-responsive-demo\"\r\n            [paginator]=\"false\"\r\n            currentPageReportTemplate=\"Prikaz od {first}. do {last}. stranice od ukupno {totalRecords}\"\r\n          >\r\n            <ng-template pTemplate=\"header\">\r\n              <tr>\r\n                <th>Naziv stranice</th>\r\n                <th class=\"p-text-center\" style=\"width: 8rem\">Objavljena</th>\r\n                <th style=\"width: 8rem\">\r\n                  <div class=\"p-d-flex p-jc-center p-ai-center\">Akcija</div>\r\n                </th>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"body\" let-page let-i=\"rowIndex\">\r\n              <tr *ngIf=\"page.locale\">\r\n                <td>\r\n                  <span class=\"p-column-title\">Naziv stranice</span>\r\n                  <span *ngIf=\"page.locale.sr\"\r\n                    >{{ page.locale.sr.title }}\r\n                  </span>\r\n                </td>\r\n                <td>\r\n                  <section class=\"p-d-flex p-ai-center\">\r\n                    <span class=\"p-column-title\">Objavljena</span>\r\n                    <p-inputSwitch\r\n                      [ngModel]=\"page.post_status === 1 ? true : false\"\r\n                      (onChange)=\"onChangePageStatus($event, page.id)\"\r\n                      [name]=\"page.post_name + i\"\r\n                    ></p-inputSwitch>\r\n                  </section>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Akcija</span>\r\n                  <section class=\"p-d-flex w-btn-group\">\r\n                    <a\r\n                      *ngIf=\"page.post_type === 'page'\"\r\n                      class=\"second-btn small-btn p-mr-2\"\r\n                      pTooltip=\"Izmeni\"\r\n                      tooltipPosition=\"top\"\r\n                      [routerLink]=\"[page.post_name, page.id]\"\r\n                    >\r\n                      <i class=\"pi pi-pencil\"></i>\r\n                    </a>\r\n                    <a\r\n                      *ngIf=\"page.post_type === 'custom_page'\"\r\n                      class=\"second-btn small-btn p-mr-2\"\r\n                      pTooltip=\"Izmeni\"\r\n                      tooltipPosition=\"top\"\r\n                      [routerLink]=\"['edit', page.post_template, page.id]\"\r\n                    >\r\n                      <i class=\"pi pi-pencil\"></i>\r\n                    </a>\r\n                    <button\r\n                      *ngIf=\"page.post_type === 'custom_page'\"\r\n                      type=\"button\"\r\n                      class=\"second-btn small-btn p-mr-2\"\r\n                      pTooltip=\"Obriši\"\r\n                      tooltipPosition=\"top\"\r\n                      (click)=\"onDelete($event, page.id)\"\r\n                    >\r\n                      <i class=\"pi pi-trash\"></i>\r\n                    </button>\r\n                  </section>\r\n                </td>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"emptymessage\">\r\n              <tr>\r\n                <td colspan=\"2\">Ni jedna stranica nije pronađena.</td>\r\n              </tr>\r\n            </ng-template>\r\n          </p-table>\r\n          <p-paginator\r\n            *ngIf=\"paginator\"\r\n            [first]=\"1\"\r\n            [rows]=\"paginator.per_page\"\r\n            [showJumpToPageDropdown]=\"true\"\r\n            [showPageLinks]=\"true\"\r\n            [totalRecords]=\"paginator.total\"\r\n            (onPageChange)=\"onPageChange($event)\"\r\n            [showPageLinks]=\"false\"\r\n          ></p-paginator>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n\r\n<p-dialog\r\n  header=\"Izaberi template\"\r\n  [(visible)]=\"displayModal\"\r\n  [modal]=\"true\"\r\n  [style]=\"{ width: '50vw' }\"\r\n  [baseZIndex]=\"10000\"\r\n  [draggable]=\"false\"\r\n  [resizable]=\"false\"\r\n>\r\n  <section class=\"p-d-flex\">\r\n    <a [routerLink]=\"['./create/template-1']\" class=\"template-icon\">\r\n      <img src=\"assets/images/template-icons/template-1.png\" />\r\n      <span>Template 1</span>\r\n    </a>\r\n    <a [routerLink]=\"['./create/template-2']\" class=\"template-icon\">\r\n      <img src=\"assets/images/template-icons/template-2.png\" />\r\n      <span>Template 2</span>\r\n    </a>\r\n    <a [routerLink]=\"['./create/template-3']\" class=\"template-icon\">\r\n      <img src=\"assets/images/template-icons/template-3.png\" />\r\n      <span>Template 3</span>\r\n    </a>\r\n    <a [routerLink]=\"['./create/template-reference']\" class=\"template-icon\">\r\n      <img src=\"assets/images/template-icons/template-reference.png\" />\r\n      <span>Template Reference</span>\r\n    </a>\r\n  </section>\r\n  <ng-template pTemplate=\"footer\">\r\n    <p-button\r\n      icon=\"pi pi-check\"\r\n      (click)=\"displayModal = false\"\r\n      label=\"Zatvori\"\r\n      styleClass=\"p-button-text\"\r\n    ></p-button>\r\n  </ng-template>\r\n</p-dialog>\r\n"
        },
        {
            "name": "PopularCategoriesAddComponent",
            "id": "component-PopularCategoriesAddComponent-88f52bc5bd619af4cf7a5c0a2fbdd63b",
            "file": "src/app/modules/sections/popular-categories/popular-categories-add/popular-categories-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popular-categories-add",
            "styleUrls": [
                "./popular-categories-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popular-categories-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopularCategoriesFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { CategoriesService } from 'src/app/core/services/categories.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { PopularCategoriesFieldsService } from '../popular-categories-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-popular-categories-add',\r\n  templateUrl: './popular-categories-add.component.html',\r\n  styleUrls: ['./popular-categories-add.component.scss'],\r\n})\r\nexport class PopularCategoriesAddComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  fd = new FormData();\r\n  fileList: fileList[] = [];\r\n  categories: any[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private categoriesService: CategoriesService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: PopularCategoriesFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      parent: ['15'],\r\n      post_type: ['post'],\r\n      post_status: [1],\r\n      category_link: [''],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          description: [''],\r\n          category_id: ['', Validators.required],\r\n          category_link: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          description: [''],\r\n          category_id: [''],\r\n          category_link: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          description: [''],\r\n          category_id: [''],\r\n          category_link: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get all categories\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getAllCategoriesNoPagination()\r\n        .subscribe((response: any) => {\r\n          console.log(response);\r\n          response.forEach((category) => {\r\n            this.categories.push({\r\n              name: category.languages[0].translation.name,\r\n              category_id: category.category_id,\r\n            });\r\n          });\r\n          console.log(response);\r\n        })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    // postForm.post_status = postForm.post_status ? 1 : 0;\r\n    postForm.locale.en.category_id = postForm.locale.sr.category_id;\r\n    postForm.locale.de.category_id = postForm.locale.sr.category_id;\r\n    postForm.locale.sr.category_link = postForm.category_link;\r\n    postForm.locale.en.category_link = postForm.category_link;\r\n    postForm.locale.de.category_link = postForm.category_link;\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(postForm);\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu kategoriju.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.postForm.get(\r\n      `locale.${langCode}.attachments`\r\n    ) as FormArray;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popular-categories-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "PopularCategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "PopularCategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"POPULARNE KATEGORIJE - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-8\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n\r\n      <div class=\"p-col-12 p-sm-4 p-mt-6 p-sm-mt-0\">\r\n        <div class=\"p-field p-mt-3 w-100\" [formGroup]=\"getLangFormGroup('sr')\">\r\n          <label>Kategorija</label>\r\n          <p-dropdown\r\n            placeholder=\"Izaberi kategoriju\"\r\n            styleClass=\"w-100\"\r\n            [options]=\"categories\"\r\n            formControlName=\"category_id\"\r\n            optionValue=\"category_id\"\r\n            optionLabel=\"name\"\r\n          ></p-dropdown>\r\n        </div>\r\n        <div class=\"p-field w-100\">\r\n          <label>Link</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"https://\"\r\n            formControlName=\"category_link\"\r\n            pInputText\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\">\r\n              Preporučena dimenzija za sliku je 220x300</span\r\n            >\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "PopularCategoriesComponent",
            "id": "component-PopularCategoriesComponent-f8378ae6e628a668b75a9319cd60dfed",
            "file": "src/app/modules/sections/popular-categories/popular-categories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popular-categories",
            "styleUrls": [
                "./popular-categories.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popular-categories.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopularCategoriesFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sectionsOrder",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { Options } from 'sortablejs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { environment } from 'src/environments/environment';\r\nimport { PopularCategoriesFieldsService } from './popular-categories-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-popular-categories',\r\n  templateUrl: './popular-categories.component.html',\r\n  styleUrls: ['./popular-categories.component.scss'],\r\n})\r\nexport class PopularCategoriesComponent implements OnInit, OnDestroy {\r\n  orderItems;\r\n  postForm: FormGroup;\r\n  postData;\r\n  loading = false;\r\n  postId: number;\r\n  subscriptions: Subscription[] = [];\r\n  mediaUrl = environment.mediaUrl;\r\n  sectionsOrder: { id: number }[] = [];\r\n  fd = new FormData();\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData: ReorderData[] = [];\r\n\r\n  constructor(\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private confirmationService: ConfirmationService,\r\n    public fieldsService: PopularCategoriesFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.postId = +this.route.snapshot.params.sectionId;\r\n\r\n    // Form init\r\n    this.postForm = this.fb.group({\r\n      id: ['15'],\r\n      post_type: ['post'],\r\n      post_name: ['popular_categories'],\r\n      parent: ['1'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: [''],\r\n          description: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          description: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          description: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete proizvod?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste proizvod.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Submit\r\n  onSubmit() {\r\n    const pageForm = this.postForm.getRawValue();\r\n    pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(pageForm);\r\n\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili stranicu',\r\n          });\r\n          // this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        // this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.orderItems = response.posts;\r\n        if (response.posts) {\r\n          this.orderItems.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.category_name,\r\n              subtitle: element.locale.sr.description,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n              image: element.locale.sr.attachments[0]\r\n                ? element.locale.sr.attachments[0].name\r\n                : null,\r\n            });\r\n          });\r\n        }\r\n        this.loading = false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n      description: this.postData.locale[langCode].description,\r\n      button_text: this.postData.locale[langCode].button_text,\r\n      button_link: this.postData.locale[langCode].button_link,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popular-categories.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "PopularCategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "PopularCategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"POPULARNE KATEGORIJE\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showAddButton]=\"true\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Popularne kategorije\">\r\n            <p-panel header=\"Sve popularne kategorije\">\r\n              <app-post-reorder\r\n                [arrayForOrder]=\"postOrder\"\r\n                [orderItems]=\"reorderData\"\r\n                (itemDeleted)=\"updatePageView()\"\r\n              >\r\n              </app-post-reorder>\r\n            </p-panel>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Opis sekcije\">\r\n            <p-tabView>\r\n              <p-tabPanel header=\"Srpski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('sr')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Engleski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('en')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Nemački\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('de')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n            </p-tabView>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "PopularCategoriesEditComponent",
            "id": "component-PopularCategoriesEditComponent-ab69f07c13a5e89c01015c7e6e7791fa",
            "file": "src/app/modules/sections/popular-categories/popular-categories-edit/popular-categories-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popular-categories-edit",
            "styleUrls": [
                "./popular-categories-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popular-categories-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopularCategoriesFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangAttachments",
                    "args": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { CategoriesService } from 'src/app/core/services/categories.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { PopularCategoriesFieldsService } from '../popular-categories-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-popular-categories-edit',\r\n  templateUrl: './popular-categories-edit.component.html',\r\n  styleUrls: ['./popular-categories-edit.component.scss'],\r\n})\r\nexport class PopularCategoriesEditComponent implements OnInit {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  postId: number;\r\n  postData;\r\n  categories: any[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private categoriesService: CategoriesService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: PopularCategoriesFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get post ID\r\n    this.postId = +this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['15'],\r\n      post_type: ['post'],\r\n      category_link: [''],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          description: [''],\r\n          category_id: ['', Validators.required],\r\n          category_link: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          description: [''],\r\n          category_id: [''],\r\n          category_link: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          description: [''],\r\n          category_id: [''],\r\n          category_link: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get all categories\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getAllCategoriesNoPagination()\r\n        .subscribe((response: any) => {\r\n          console.log(response);\r\n          response.forEach((category) => {\r\n            this.categories.push({\r\n              name: category.languages[0].translation.name,\r\n              category_id: category.category_id,\r\n            });\r\n          });\r\n          this.patchLangForm('sr');\r\n        })\r\n    );\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        response.locale.sr.attachments.forEach((attachment) => {\r\n          this.getLangAttachments('sr').push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n\r\n          // Show old images\r\n          this.fileList.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n            fileName: attachment.name,\r\n          });\r\n        });\r\n\r\n        this.patchLangAttachments(response, 'en');\r\n        this.patchLangAttachments(response, 'de');\r\n\r\n        this.postData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    postForm.locale.sr.category_link = postForm.category_link;\r\n    postForm.locale.en.category_link = postForm.category_link;\r\n    postForm.locale.de.category_link = postForm.category_link;\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi blog post.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.postForm.get(\r\n      `locale.${langCode}.attachments`\r\n    ) as FormArray;\r\n  }\r\n\r\n  patchLangAttachments(attachArray, langCode: string) {\r\n    attachArray.locale[langCode].attachments.forEach((attachment) => {\r\n      this.getLangAttachments(langCode).push(\r\n        this.fb.group({\r\n          title: [attachment.title],\r\n          alt: [attachment.alt],\r\n          name: [attachment.name],\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      description: this.postData.locale[langCode].description,\r\n      category_id: this.postData.locale[langCode].category_id,\r\n      category_link: this.postData.locale[langCode].category_link,\r\n    });\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n      category_link: this.postData.locale[langCode].category_link\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popular-categories-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "PopularCategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "PopularCategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"POPULARNE KATEGORIJE - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-8\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n\r\n      <div class=\"p-col-12 p-sm-4 p-mt-6 p-sm-mt-0\">\r\n        <ng-container [formGroup]=\"getLangFormGroup('sr')\">\r\n          <app-dropdown\r\n            [options]=\"{\r\n              label: 'Kategorija',\r\n              placeholder: 'Izaberi kategoriju',\r\n              formControlName: 'category_id',\r\n              containerClass: 'w-100 p-mt-3',\r\n              optionValue: 'category_id',\r\n              optionLabel: 'name',\r\n              dropdownOptions: categories\r\n            }\"\r\n          ></app-dropdown>\r\n        </ng-container>\r\n        <app-input\r\n          [options]=\"fieldsService.mainFieldsRight[0].options\"\r\n        ></app-input>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\">\r\n              Preporučena dimenzija za sliku je 220x300</span\r\n            >\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "PopularProductsAddComponent",
            "id": "component-PopularProductsAddComponent-a23e7ced47097b89bc08997d1c0003f0",
            "file": "src/app/modules/sections/popular-products/popular-products-add/popular-products-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popular-products-add",
            "styleUrls": [
                "./popular-products-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popular-products-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { CategoriesService } from 'src/app/core/services/categories.service';\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\nimport { PostsService } from 'src/app/core/services/posts.service';\nimport { ProductsService } from 'src/app/core/services/products.service';\nimport { fileList } from 'src/app/shared/models/file-list';\n\n@Component({\n  selector: 'app-popular-products-add',\n  templateUrl: './popular-products-add.component.html',\n  styleUrls: ['./popular-products-add.component.scss'],\n})\nexport class PopularProductsAddComponent implements OnInit {\n  loading = false;\n  postForm: FormGroup;\n  subscriptions: Subscription[] = [];\n  srAttachments: FormArray;\n  fd = new FormData();\n  fileList: fileList[] = [];\n  categories: any[] = [];\n  products: any[] = [];\n\n  constructor(\n    private fb: FormBuilder,\n    private postsService: PostsService,\n    private productsService: ProductsService,\n    private categoriesService: CategoriesService,\n    private messService: MessServiceService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    // Add blog form\n    this.postForm = this.fb.group({\n      parent: ['14'],\n      post_type: ['post'],\n      post_status: [1],\n      locale: this.fb.group({\n        sr: this.fb.group({\n          product_id: ['', Validators.required],\n          category_id: ['', Validators.required],\n          attachments: this.fb.array([]),\n        }),\n        en: this.fb.group({\n          product_id: [''],\n          category_id: [''],\n          attachments: this.fb.array([]),\n        }),\n        de: this.fb.group({\n          product_id: [''],\n          category_id: [''],\n          attachments: this.fb.array([]),\n        }),\n      }),\n    });\n\n    // Get all categories\n    this.subscriptions.push(\n      this.categoriesService\n        .getAllCategoriesNoPagination()\n        .subscribe((response: any) => {\n          console.log(response);\n          response.forEach((category) => {\n            this.categories.push({\n              name: category.languages[0].translation.name,\n              real_id: category.real_id,\n              category_id: category.category_id,\n            });\n          });\n        })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  // * Submit form === //\n  onSubmit() {\n    this.loading = true;\n    const postForm = this.postForm.getRawValue();\n\n    postForm.locale.en.product_id = postForm.locale.sr.product_id;\n    postForm.locale.en.category_id = postForm.locale.sr.category_id;\n\n    postForm.locale.de.product_id = postForm.locale.sr.product_id;\n    postForm.locale.de.category_id = postForm.locale.sr.category_id;\n    // postForm.post_status = postForm.post_status ? 1 : 0;\n    this.fileList.forEach((file) => {\n      this.fd.append('attachments[]', file.originalFile);\n    });\n    this.fd.append('data', JSON.stringify(postForm));\n    console.log(this.fd.getAll('attachments[]'));\n    // console.log(this.fd.get('data'));\n    console.log(postForm);\n\n    this.subscriptions.push(\n      this.postsService.createPost(this.fd).subscribe(\n        () => {\n          this.loading = false;\n          this.messService.addSuccess({\n            severity: 'success',\n            title: 'Uspešno kreiranje',\n            detail: 'Uspešno ste dodali novi proizvod.',\n          });\n          this.router.navigate(['./../'], { relativeTo: this.route });\n        },\n        (error) => {\n          this.loading = false;\n          console.log(error);\n        }\n      )\n    );\n  }\n\n  // * Helpers === //\n  getLangFormGroup(langCode: string) {\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\n  }\n\n  getLangAttachments(langCode: string) {\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\n  }\n\n  getProducts(event) {\n    this.products = [];\n    this.subscriptions.push(\n      this.productsService\n        .getAllProductsNoPagination(`&category[]=${event.value}`)\n        .subscribe((response: any) => {\n          console.log(response);\n\n          response.forEach((product) => {\n            this.products.push({\n              product_id: product.model_id,\n              name: product.languages[0].translation.name,\n            });\n          });\n          console.log(response);\n        })\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popular-products-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"POPULARNI PROIZVODI - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\" [formGroup]=\"getLangFormGroup('sr')\">\r\n      <div class=\"p-col-12 p-sm-4\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Kategorija</label>\r\n          <p-dropdown\r\n            placeholder=\"Izaberi kategoriju\"\r\n            formControlName=\"category_id\"\r\n            styleClass=\"w-100\"\r\n            (onChange)=\"getProducts($event)\"\r\n            [options]=\"categories\"\r\n            optionValue=\"category_id\"\r\n            optionLabel=\"name\"\r\n          ></p-dropdown>\r\n        </div>\r\n      </div>\r\n      <div class=\"p-col-12 p-sm-4\" *ngIf=\"products.length\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Proizvod</label>\r\n          <p-dropdown\r\n            placeholder=\"Izaberi proizvod\"\r\n            styleClass=\"w-100\"\r\n            formControlName=\"product_id\"\r\n            [options]=\"products\"\r\n            optionValue=\"product_id\"\r\n            optionLabel=\"name\"\r\n          ></p-dropdown>\r\n        </div>\r\n      </div>\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          >\r\n          </app-image-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "PopularProductsComponent",
            "id": "component-PopularProductsComponent-696465150ffbf19587eaf114befe22b7",
            "file": "src/app/modules/sections/popular-products/popular-products.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popular-products",
            "styleUrls": [
                "./popular-products.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popular-products.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopularProductsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sectionsOrder",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { Options } from 'sortablejs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { environment } from 'src/environments/environment';\r\nimport { PopularProductsFieldsService } from './popular-products-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-popular-products',\r\n  templateUrl: './popular-products.component.html',\r\n  styleUrls: ['./popular-products.component.scss'],\r\n})\r\nexport class PopularProductsComponent implements OnInit {\r\n  orderItems;\r\n  postForm: FormGroup;\r\n  postData;\r\n  loading = false;\r\n  postId: number;\r\n  subscriptions: Subscription[] = [];\r\n  mediaUrl = environment.mediaUrl;\r\n  sectionsOrder: { id: number }[] = [];\r\n  fd = new FormData();\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData: ReorderData[] = [];\r\n\r\n  constructor(\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private confirmationService: ConfirmationService,\r\n    public fieldsService: PopularProductsFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.postId = +this.route.snapshot.params.sectionId;\r\n\r\n    // Form init\r\n    this.postForm = this.fb.group({\r\n      id: ['14'],\r\n      post_type: ['post'],\r\n      post_name: ['popular_products'],\r\n      parent: ['1'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: [''],\r\n          description: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          description: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          description: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete proizvod?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste proizvod.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Submit\r\n  onSubmit() {\r\n    const pageForm = this.postForm.getRawValue();\r\n    pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(pageForm);\r\n\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili stranicu',\r\n          });\r\n          // this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        this.orderItems = response.posts;\r\n        if (this.orderItems) {\r\n          this.orderItems.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.product_name,\r\n              subtitle: element.locale.sr.category_name,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n              image: element.locale.sr.attachments[0]\r\n                ? element.locale.sr.attachments[0].name\r\n                : null,\r\n            });\r\n          });\r\n        }\r\n        this.loading = false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n      description: this.postData.locale[langCode].description,\r\n      button_text: this.postData.locale[langCode].button_text,\r\n      button_link: this.postData.locale[langCode].button_link,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popular-products.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "PopularProductsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "PopularProductsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"POPULARNI PROIZVODI\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showAddButton]=\"true\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Popularni proizvodi\">\r\n            <p-panel header=\"Svi popularni proizvodi\">\r\n              <app-post-reorder\r\n                [arrayForOrder]=\"postOrder\"\r\n                [orderItems]=\"reorderData\"\r\n                (itemDeleted)=\"updatePageView()\"\r\n              >\r\n              </app-post-reorder>\r\n            </p-panel>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Opis sekcije\">\r\n            <p-tabView>\r\n              <p-tabPanel header=\"Srpski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('sr')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Engleski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('en')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Nemački\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('de')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n            </p-tabView>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "PopularProductsEditComponent",
            "id": "component-PopularProductsEditComponent-367387455afb1cd76cce2ca2d797b79d",
            "file": "src/app/modules/sections/popular-products/popular-products-edit/popular-products-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popular-products-edit",
            "styleUrls": [
                "./popular-products-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popular-products-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangAttachments",
                    "args": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { CategoriesService } from 'src/app/core/services/categories.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { ProductsService } from 'src/app/core/services/products.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-popular-products-edit',\r\n  templateUrl: './popular-products-edit.component.html',\r\n  styleUrls: ['./popular-products-edit.component.scss'],\r\n})\r\nexport class PopularProductsEditComponent implements OnInit {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  postId: number;\r\n  postData;\r\n  categories: any[] = [];\r\n  products: any[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private categoriesService: CategoriesService,\r\n    private productsService: ProductsService,\r\n    private router: Router,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get post ID\r\n    this.postId = +this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['14'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          product_id: ['', Validators.required],\r\n          category_id: ['', Validators.required],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          product_id: [''],\r\n          category_id: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          product_id: [''],\r\n          category_id: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get all categories\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getAllCategoriesNoPagination()\r\n        .subscribe((response: any) => {\r\n          console.log(response);\r\n          response.forEach((category) => {\r\n            this.categories.push({\r\n              name: category.languages[0].translation.name,\r\n              real_id: category.real_id,\r\n              category_id: category.category_id,\r\n            });\r\n          });\r\n          this.patchForm();\r\n        })\r\n    );\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        response.locale.sr.attachments.forEach((attachment) => {\r\n          this.getLangAttachments('sr').push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n\r\n          // Show old images\r\n          this.fileList.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n            fileName: attachment.name,\r\n          });\r\n        });\r\n        this.patchLangAttachments(response, 'en');\r\n        this.patchLangAttachments(response, 'de');\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    // postForm.post_status = postForm.post_status ? 1 : 0;\r\n\r\n    postForm.locale.en.category_id = postForm.locale.sr.category_id;\r\n    postForm.locale.en.product_id = postForm.locale.sr.product_id;\r\n\r\n    postForm.locale.de.category_id = postForm.locale.sr.category_id;\r\n    postForm.locale.de.product_id = postForm.locale.sr.product_id;\r\n\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(postForm);\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi blog post.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  getProducts(event) {\r\n    this.products = [];\r\n    this.subscriptions.push(\r\n      this.productsService\r\n        .getAllProductsNoPagination(`&category[]=${event.value}`)\r\n        .subscribe((response: any) => {\r\n          console.log(response);\r\n\r\n          response.forEach((product) => {\r\n            this.products.push({\r\n              product_id: product.model_id,\r\n              name: product.languages[0].translation.name,\r\n            });\r\n          });\r\n          // this.products = response;\r\n          console.log(response);\r\n        })\r\n    );\r\n  }\r\n\r\n  patchLangAttachments(attachArray, langCode: string) {\r\n    attachArray.locale[langCode].attachments.forEach((attachment) => {\r\n      this.getLangAttachments(langCode).push(\r\n        this.fb.group({\r\n          title: [attachment.title],\r\n          alt: [attachment.alt],\r\n          name: [attachment.name],\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  patchForm() {\r\n    this.getLangFormGroup('sr').patchValue({\r\n      category_id: this.postData.locale.sr.category_id,\r\n      product_id: this.postData.locale.sr.product_id,\r\n    });\r\n\r\n    this.getProducts({ value: this.postData.locale.sr.category_id });\r\n\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popular-products-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"POPULARNI PROIZVODI - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"post\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\" [formGroup]=\"getLangFormGroup('sr')\">\r\n      <div class=\"p-col-12 p-sm-4\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Kategorija</label>\r\n          <p-dropdown\r\n            placeholder=\"Izaberi kategoriju\"\r\n            formControlName=\"category_id\"\r\n            styleClass=\"w-100\"\r\n            (onChange)=\"getProducts($event)\"\r\n            [options]=\"categories\"\r\n            optionValue=\"category_id\"\r\n            optionLabel=\"name\"\r\n          ></p-dropdown>\r\n        </div>\r\n      </div>\r\n      <div class=\"p-col-12 p-sm-4\" *ngIf=\"products.length\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Proizvod</label>\r\n          <p-dropdown\r\n            placeholder=\"Izaberi proizvod\"\r\n            styleClass=\"w-100\"\r\n            formControlName=\"product_id\"\r\n            [options]=\"products\"\r\n            optionValue=\"product_id\"\r\n            optionLabel=\"name\"\r\n          ></p-dropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          >\r\n          </app-image-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "PopupsAddComponent",
            "id": "component-PopupsAddComponent-f29a3cb747ba7fcc6fffa001362efbe9",
            "file": "src/app/modules/sections/popups/popups-add/popups-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popups-add",
            "styleUrls": [
                "./popups-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popups-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_d",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DomSanitizer",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "parentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { PopupsFieldsService } from '../popups-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-popups-add',\r\n  templateUrl: './popups-add.component.html',\r\n  styleUrls: ['./popups-add.component.scss']\r\n})\r\nexport class PopupsAddComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  parentId: number;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    public _d: DomSanitizer,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: PopupsFieldsService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n     this.parentId = this.route.snapshot.params.id;\r\n\r\n     // Add blog form\r\n     this.postForm = this.fb.group({\r\n      parent: [this.parentId],\r\n      post_type: ['post'],\r\n      post_status: [1],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          content: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi slajd.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string){\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popups-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_d",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "PopupsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_d",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "PopupsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"POPUPS - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          >\r\n          </app-image-upload>\r\n\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\">\r\n              Preporučena dimenzija za sliku je format 16:9</span\r\n            >\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "PopupsComponent",
            "id": "component-PopupsComponent-adce6d73fb10bb0b268d8d7bccd336b3",
            "file": "src/app/modules/sections/popups/popups.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popups",
            "styleUrls": [
                "./popups.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popups.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-popups',\r\n  templateUrl: './popups.component.html',\r\n  styleUrls: ['./popups.component.scss'],\r\n})\r\nexport class PopupsComponent implements OnInit, OnDestroy {\r\n  postData;\r\n  loading = false;\r\n  mediaUrl = environment.mediaUrl;\r\n  postId: number;\r\n  subscriptions: Subscription[] = [];\r\n  postForm: FormGroup;\r\n  fd = new FormData();\r\n  orderItems;\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData: ReorderData[] = [];\r\n\r\n  constructor(\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private route: ActivatedRoute,\r\n    private confirmationService: ConfirmationService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.postId = +this.route.snapshot.params.id;\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    console.log(postId);\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete popup?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste popup.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Helpers === //\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        this.orderItems = response.posts;\r\n        if (response.posts) {\r\n          this.orderItems.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.title,\r\n              subtitle: element.locale.sr.content,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n              image: element.locale.sr.attachments[0]\r\n                ? element.locale.sr.attachments[0].name\r\n                : null,\r\n            });\r\n          });\r\n        }\r\n        this.loading = false;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popups.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"POPUPS\"\r\n  [backPath]=\"['./../../../']\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [showAddButton]=\"true\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-panel header=\"Svi popupovi\">\r\n          <app-post-reorder\r\n            [arrayForOrder]=\"postOrder\"\r\n            [orderItems]=\"reorderData\"\r\n            (itemDeleted)=\"updatePageView()\"\r\n          >\r\n          </app-post-reorder>\r\n        </p-panel>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "PopupsEditComponent",
            "id": "component-PopupsEditComponent-424f0afecce2be2911f0241897f69fa2",
            "file": "src/app/modules/sections/popups/popups-edit/popups-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popups-edit",
            "styleUrls": [
                "./popups-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popups-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_d",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DomSanitizer",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "parentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangAttachments",
                    "args": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { PopupsFieldsService } from '../popups-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-popups-edit',\r\n  templateUrl: './popups-edit.component.html',\r\n  styleUrls: ['./popups-edit.component.scss'],\r\n})\r\nexport class PopupsEditComponent implements OnInit {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  parentId: number;\r\n  postId: number;\r\n  postData;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    public _d: DomSanitizer,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: PopupsFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.parentId = this.route.snapshot.params.id;\r\n    this.postId = this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      parent: [this.parentId],\r\n      id: [''],\r\n      post_type: ['post'],\r\n      post_status: [1],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          content: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n          button_link: [''],\r\n          button_text: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        response.locale.sr.attachments.forEach((attachment) => {\r\n          this.getLangAttachments('sr').push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n\r\n          // Show old images\r\n          this.fileList.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n            fileName: attachment.name,\r\n          });\r\n        });\r\n        this.patchLangAttachments(response, 'en');\r\n        this.patchLangAttachments(response, 'de');\r\n\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi slajd.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  patchLangAttachments(attachArray, langCode: string) {\r\n    attachArray.locale[langCode].attachments.forEach((attachment) => {\r\n      this.getLangAttachments(langCode).push(\r\n        this.fb.group({\r\n          title: [attachment.title],\r\n          alt: [attachment.alt],\r\n          name: [attachment.name],\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n      content: this.postData.locale[langCode].content,\r\n      button_link: this.postData.locale[langCode].button_link,\r\n      button_text: this.postData.locale[langCode].button_text,\r\n    });\r\n\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popups-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_d",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "PopupsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_d",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "PopupsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"POPUPS - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"post\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"1\"\r\n          >\r\n          </app-image-upload>\r\n\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\">\r\n              Preporučena dimenzija za sliku je format 16:9</span\r\n            >\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "PostReorderComponent",
            "id": "component-PostReorderComponent-255fc558b982b01c20ebf1b245b8a67e",
            "file": "src/app/shared/components/post-reorder/post-reorder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-reorder",
            "styleUrls": [
                "./post-reorder.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-reorder.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "arrayForOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any"
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any"
                },
                {
                    "name": "reorderSections",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "showDelete",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "itemDeleted",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "eventOptions",
                    "defaultValue": "{\n    handle: '.reorder-handle',\n    onUpdate: () => {\n      console.log(this.postOrder);\n      this.updateOrder();\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Options",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "itemDeleted",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Output",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "postOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'arrayForOrder'"
                        }
                    ]
                },
                {
                    "name": "reorderSections",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "showDelete",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "Id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateOrder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { ConfirmationService } from 'primeng/api';\nimport { Subscription } from 'rxjs';\nimport { Options } from 'sortablejs';\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\nimport { PostsService } from 'src/app/core/services/posts.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-post-reorder',\n  templateUrl: './post-reorder.component.html',\n  styleUrls: ['./post-reorder.component.scss'],\n})\nexport class PostReorderComponent implements OnInit, OnDestroy {\n  @Input('arrayForOrder') postOrder;\n  subscriptions: Subscription[] = [];\n  mediaUrl = environment.mediaUrl;\n  @Output() itemDeleted = new EventEmitter();\n  @Input() orderItems;\n  @Input() showDelete = true;\n  @Input() reorderSections = false;\n\n  eventOptions: Options = {\n    handle: '.reorder-handle',\n    onUpdate: () => {\n      console.log(this.postOrder);\n      this.updateOrder();\n    },\n  };\n\n  constructor(\n    private messService: MessServiceService,\n    private postsService: PostsService,\n    private confirmationService: ConfirmationService\n  ) {}\n\n  // * Lifecycles === //\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  // * Delete === //\n  onDelete(event: Event, postId: number) {\n    this.confirmationService.confirm({\n      target: event.target,\n      message: 'Da li ste sigurni da želite da obrišete ovu stavku?',\n      icon: 'pi pi-exclamation-triangle',\n      acceptLabel: 'Da',\n      rejectLabel: 'Ne',\n      accept: () => {\n        this.subscriptions.push(\n          this.postsService.deletePost(postId).subscribe(\n            () => {\n              this.messService.addSuccess({\n                severity: 'success',\n                title: 'Uspešno brisanje',\n                detail: 'Obrisali ste stavku.',\n              });\n              // this.updatePageView();\n              this.itemDeleted.emit(true)\n            },\n            (error) => {\n              this.messService.addError({\n                severity: 'error',\n                title: 'Greška',\n                detail: 'Došlo je do greške, pokušajte ponovo!',\n              });\n            }\n          )\n        );\n      },\n    });\n  }\n\n  // * Helpers === //\n  updateOrder() {\n    this.subscriptions.push(\n      this.postsService.updateOrder(this.postOrder).subscribe(\n        () => {\n          console.log('USPESAN UPDATE REDOSLEDA');\n          this.messService.addSuccess({\n            severity: 'success',\n            title: 'Uspešna izmena',\n            detail: 'Uspešno ste promenili redosled.',\n          });\n        },\n        (err) => {\n          console.log(err);\n        }\n      )\n    );\n  }\n\n  // * Change status\n  onChangeStatus(event, Id: number) {\n    console.log(event);\n    const status = {\n      status: event.checked ? 1 : 0,\n    };\n    this.subscriptions.push(\n      this.postsService.updatePostStatus(Id, status).subscribe(\n        () => {\n          this.messService.addSuccess({\n            severity: 'success',\n            title: 'Uspešno menjanje statusa',\n            detail: 'Uspešno ste promenili vidljivost.',\n          });\n          // this.updateTable(1);\n        },\n        (error) => {\n          console.log(error);\n        }\n      )\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".reorder-body{\r\n  background-color: #fff;\r\n}\r\n",
                    "styleUrl": "./post-reorder.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div [sortablejs]=\"postOrder.posts\" [sortablejsOptions]=\"eventOptions\">\n  <div\n  *ngFor=\"let item of orderItems; let i = index\"\n  class=\"p-p-3 p-mb-2 p-border p-d-flex p-ai-center p-jc-between reorder-body\"\n  >\n    <div class=\"p-d-flex p-ai-center\">\n      <section class=\"p-d-flex p-ai-center\">\n        <div class=\"reorder-handle p-mr-2\">\n          <i class=\"pi pi-sort\"></i>\n        </div>\n        <img\n        *ngIf=\"item.image\"\n          class=\"item-img p-mr-2\"\n          [src]=\"mediaUrl + '/' + item.image\"\n        />\n      </section>\n      <section class=\"p-d-flex p-flex-column\">\n        <h3 *ngIf=\"item.title\">{{ item.title }}</h3>\n        <span *ngIf=\"item.subtitle\" class=\"reorder-description\">{{ item.subtitle }}</span>\n      </section>\n    </div>\n    <div class=\"reorder-action-buttons\">\n      <p-inputSwitch\n        [ngModelOptions]=\"{standalone: true}\"\n        [ngModel]=\"item.post_status\"\n        (onChange)=\"onChangeStatus($event, item.id)\"\n        [name]=\"item.post_name\"\n        styleClass=\"p-mr-2\"\n      ></p-inputSwitch>\n      <a *ngIf=\"!reorderSections\"\n        class=\"second-btn small-btn p-mr-2\"\n        pTooltip=\"Izmeni\"\n        tooltipPosition=\"top\"\n        [routerLink]=\"['edit', item.id]\"\n      >\n        <i class=\"pi pi-pencil\"></i>\n      </a>\n      <a *ngIf=\"reorderSections\"\n        class=\"second-btn small-btn p-mr-2\"\n        pTooltip=\"Izmeni\"\n        tooltipPosition=\"top\"\n        [routerLink]=\"[item.post_name, item.id]\"\n      >\n        <i class=\"pi pi-pencil\"></i>\n      </a>\n      <a *ngIf=\"showDelete\"\n        class=\"second-btn small-btn p-mr-2\"\n        pTooltip=\"Obriši\"\n        tooltipPosition=\"top\"\n        (click)=\"onDelete($event, item.id)\"\n      >\n        <i class=\"pi pi-trash\"></i>\n      </a>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ProductAddComponent",
            "id": "component-ProductAddComponent-969ec92a39ad57da5d4ed1add94aa287",
            "file": "src/app/modules/products/products-list/product-add/product-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-add",
            "styleUrls": [
                "./product-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addProductForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductsListFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "subcategories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubcategories",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { CategoriesService } from 'src/app/core/services/categories.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { ProductsService } from 'src/app/core/services/products.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { ProductsListFieldsService } from '../products-list-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-product-add',\r\n  templateUrl: './product-add.component.html',\r\n  styleUrls: ['./product-add.component.scss'],\r\n})\r\nexport class ProductAddComponent implements OnInit {\r\n  loading = false;\r\n  addProductForm: FormGroup;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  subscriptions: Subscription[] = [];\r\n  categories = [];\r\n  subcategories = [];\r\n  srAttachments: FormArray;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private messService: MessServiceService,\r\n    private categoriesService: CategoriesService,\r\n    private productsService: ProductsService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    public fieldsService: ProductsListFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    this.addProductForm = this.fb.group({\r\n      real_id: ['', Validators.required],\r\n      price: ['', Validators.required],\r\n      quantity: ['', Validators.required],\r\n      group1: ['', Validators.required],\r\n      group2: ['', Validators.required],\r\n      active: [true],\r\n      images: this.fb.array([]),\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          name: ['', Validators.required],\r\n          description: [''],\r\n          description2: [''],\r\n          meta_title: [''],\r\n          meta_description: [''],\r\n          meta_keywords: [''],\r\n          slug: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          name: ['',Validators.required],\r\n          description: [''],\r\n          description2: [''],\r\n          meta_title: [''],\r\n          meta_description: [''],\r\n          meta_keywords: [''],\r\n          slug: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          name: ['',Validators.required],\r\n          description: [''],\r\n          description2: [''],\r\n          meta_title: [''],\r\n          meta_description: [''],\r\n          meta_keywords: [''],\r\n          slug: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get categories\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getAllCategoriesNoPagination()\r\n        .subscribe((response: any) => {\r\n          response.forEach((category) => {\r\n            this.categories.push({\r\n              name: category.languages[0].translation.name,\r\n              real_id: category.real_id,\r\n              category_id: category.category_id,\r\n            });\r\n          });\r\n        })\r\n    );\r\n\r\n    // Get SR\r\n    this.srAttachments = this.addProductForm.get('images') as FormArray;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * On add product\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const productForm = this.addProductForm.getRawValue();\r\n    productForm.active = productForm.active ? 1 : 0;\r\n    console.log(productForm);\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('images[]', file.originalFile);\r\n      }\r\n    });\r\n\r\n    this.fd.append('data', JSON.stringify(productForm));\r\n\r\n    this.subscriptions.push(\r\n      this.productsService.createProduct(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi proizvod.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          const errorObj = error.error;\r\n          const form = this.addProductForm;\r\n          const messService = this.messService;\r\n\r\n          let setFormErrors = (langCode: string)=>{\r\n            Object.keys(errorObj[langCode]).forEach(function (key) {\r\n              console.log(key);\r\n\r\n              const formControl = form.get(`locale.${langCode}.${key}`);\r\n              if (formControl) {\r\n                // If error exist set red border to field\r\n                formControl.setErrors({});\r\n              }\r\n              // Push toast error for every field\r\n              messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: errorObj[langCode][key],\r\n                sticky: true,\r\n              });\r\n            });\r\n          }\r\n\r\n          console.log(error);\r\n          if(errorObj.de || errorObj.en || errorObj.sr){\r\n            if(errorObj.de){\r\n              setFormErrors('de');\r\n            }\r\n            if(errorObj.en){\r\n              setFormErrors('en');\r\n            }\r\n            if(errorObj.sr){\r\n              setFormErrors('sr');\r\n            }\r\n          }else{\r\n            Object.keys(errorObj).forEach(function (key) {\r\n              console.log(errorObj[key]);\r\n              let errorMess = '';\r\n              const formControl = form.get(key);\r\n              errorObj[key].forEach(mess => {\r\n                errorMess += ' ' + mess;\r\n              });\r\n              console.log(errorMess);\r\n              if (formControl) {\r\n                // If error exist set red border to field\r\n                formControl.setErrors({});\r\n              }\r\n              // Push toast error for every field\r\n              messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: errorMess,\r\n                sticky: true,\r\n              });\r\n            });\r\n          }\r\n\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.addProductForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getSubcategories(event) {\r\n    const selectedCategory = this.categories.filter(cat => cat.category_id == event.value);\r\n    console.log(selectedCategory);\r\n    // Get subcategories\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getAllSubcategoriesNoPagination(selectedCategory[0].real_id)\r\n        .subscribe((response: any) => {\r\n          this.subcategories = [];\r\n          response.forEach((category) => {\r\n            this.subcategories.push({\r\n              name: category.languages[0].translation.name,\r\n              real_id: category.real_id,\r\n              category_id: category.category_id,\r\n            });\r\n          });\r\n          // console.log(this.subcategories);\r\n        })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "ProductsListFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "ProductsListFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"PROIZVODI - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"addProductForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-8\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n      <div class=\"p-col-12 p-sm-4 p-mt-6 p-sm-mt-0\">\r\n        <div class=\"p-grid p-mt-2\">\r\n          <div class=\"p-col-12\">\r\n            <div class=\"p-field w-100\">\r\n              <label>Kategorija</label>\r\n              <p-dropdown\r\n                placeholder=\"Izaberi kategoriju\"\r\n                styleClass=\"w-100\"\r\n                (onChange)=\"getSubcategories($event)\"\r\n                [options]=\"categories\"\r\n                formControlName=\"group1\"\r\n                optionValue=\"category_id\"\r\n                optionLabel=\"name\"\r\n              ></p-dropdown>\r\n            </div>\r\n            <div\r\n              class=\"p-field w-100\"\r\n              *ngIf=\"subcategories && subcategories.length > 0\"\r\n            >\r\n              <label>Podkategorija</label>\r\n              <p-dropdown\r\n                placeholder=\"Izaberi kategoriju\"\r\n                styleClass=\"w-100\"\r\n                [options]=\"subcategories\"\r\n                formControlName=\"group2\"\r\n                optionValue=\"category_id\"\r\n                optionLabel=\"name\"\r\n              ></p-dropdown>\r\n            </div>\r\n\r\n            <app-form-builder\r\n              [form]=\"addProductForm\"\r\n              [fields]=\"fieldsService.mainInfo\"\r\n            ></app-form-builder>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Slike</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [controlName]=\"'images'\"\r\n            [chosenFormGroup]=\"addProductForm\"\r\n            [srAttachments]=\"srAttachments\"\r\n            [maxImages]=\"5\"\r\n            [enableMultiple]=\"true\"\r\n          >\r\n          </app-image-upload>\r\n          <section class=\"p-mt-2\">\r\n            <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n            <span class=\"p-ml-1\">\r\n              Preporučena dimenzija za sliku je 800x600</span\r\n            >\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "ProductEditComponent",
            "id": "component-ProductEditComponent-952e1179bdceb45ce69fcbefee2a37ba",
            "file": "src/app/modules/products/products-list/product-edit/product-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-edit",
            "styleUrls": [
                "./product-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "editProductForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductsListFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "productData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "subcategories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "websiteUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "getCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubcategories",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { CategoriesService } from 'src/app/core/services/categories.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { ProductsService } from 'src/app/core/services/products.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ProductsListFieldsService } from '../products-list-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-product-edit',\r\n  templateUrl: './product-edit.component.html',\r\n  styleUrls: ['./product-edit.component.scss'],\r\n})\r\nexport class ProductEditComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  editProductForm: FormGroup;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  subscriptions: Subscription[] = [];\r\n  categories = [];\r\n  subcategories = [];\r\n  srAttachments: FormArray;\r\n  productId: number;\r\n  productData;\r\n  websiteUrl = environment.apiUrl;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private messService: MessServiceService,\r\n    private categoriesService: CategoriesService,\r\n    private productsService: ProductsService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    public fieldsService: ProductsListFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.productId = +this.route.snapshot.params.id;\r\n\r\n    this.editProductForm = this.fb.group({\r\n      id: [''],\r\n      real_id: ['', Validators.required],\r\n      model_id: ['', Validators.required],\r\n      price: ['', Validators.required],\r\n      quantity: ['', Validators.required],\r\n      group1: ['', Validators.required],\r\n      group2: ['', Validators.required],\r\n      active: [''],\r\n      images: this.fb.array([]),\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          name: ['', Validators.required],\r\n          description: [''],\r\n          description2: [''],\r\n          meta_title: [''],\r\n          meta_description: [''],\r\n          meta_keywords: [''],\r\n          slug: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          name: ['', Validators.required],\r\n          description: [''],\r\n          description2: [''],\r\n          meta_title: [''],\r\n          meta_description: [''],\r\n          meta_keywords: [''],\r\n          slug: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          name: ['', Validators.required],\r\n          description: [''],\r\n          description2: [''],\r\n          meta_title: [''],\r\n          meta_description: [''],\r\n          meta_keywords: [''],\r\n          slug: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.productsService\r\n        .getOneProducts(this.productId)\r\n        .subscribe((response: any) => {\r\n          console.log(response);\r\n          this.productData = response;\r\n          this.websiteUrl = `${this.websiteUrl}/proizvod/${response.languages[0].translation.slug}`;\r\n\r\n          if (response.products[0].images_names) {\r\n            response.products[0].images_names.forEach((attachmentName) => {\r\n              console.log(attachmentName);\r\n              this.srAttachments.push(\r\n                this.fb.group({\r\n                  name: [attachmentName],\r\n                })\r\n              );\r\n\r\n              // Show old images\r\n              this.fileList.push({\r\n                originalFile: null,\r\n                imageLocalUrl: `${environment.mediaUrl}/${attachmentName}`,\r\n                fileName: attachmentName,\r\n              });\r\n            });\r\n          }\r\n\r\n          this.getCategories();\r\n\r\n          this.productData.post_status =\r\n            response.post_status === 1 ? true : false;\r\n          this.patchForm();\r\n        })\r\n    );\r\n\r\n    // Get SR\r\n    this.srAttachments = this.editProductForm.get('images') as FormArray;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * On add category\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const productForm = this.editProductForm.getRawValue();\r\n    // productForm.active = productForm.status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('images[]', file.originalFile);\r\n      }\r\n    });\r\n\r\n    this.fd.append('data', JSON.stringify(productForm));\r\n    console.log(productForm, 'POSLATA FORMA');\r\n\r\n    this.subscriptions.push(\r\n      this.productsService.updateProduct(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste izmenili proizvod.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          const errorObj = error.error;\r\n          const form = this.editProductForm;\r\n          const messService = this.messService;\r\n\r\n          Object.keys(errorObj).forEach(function (key) {\r\n            const formControl = form.get(key);\r\n            if (formControl) {\r\n              // If error exist set red border to field\r\n              formControl.setErrors({});\r\n            }\r\n            // Push toast error for every field\r\n            messService.addError({\r\n              severity: 'error',\r\n              title: 'Greška',\r\n              detail: errorObj[key],\r\n              sticky: true,\r\n            });\r\n          });\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.editProductForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getCategories() {\r\n    // Get categories\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getAllCategoriesNoPagination()\r\n        .subscribe((response: any) => {\r\n          response.forEach((category) => {\r\n            this.categories.push({\r\n              name: category.languages[0].translation.name,\r\n              real_id: category.real_id,\r\n              category_id: category.category_id,\r\n            });\r\n          });\r\n\r\n          this.editProductForm.patchValue({\r\n            group1: this.productData.cat.category_id,\r\n          });\r\n          this.getSubcategories({ value: this.productData.cat.category_id });\r\n        })\r\n    );\r\n  }\r\n\r\n  getSubcategories(event) {\r\n    const selectedCategory = this.categories.filter(\r\n      (cat) => cat.category_id == event.value\r\n    );\r\n    console.log(selectedCategory);\r\n    // Get subcategories\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getAllSubcategoriesNoPagination(selectedCategory[0].real_id)\r\n        .subscribe((response: any) => {\r\n          this.subcategories = [];\r\n          response.forEach((category) => {\r\n            this.subcategories.push({\r\n              name: category.languages[0].translation.name,\r\n              real_id: category.real_id,\r\n              category_id: category.category_id,\r\n            });\r\n          });\r\n          // console.log(this.subcategories);\r\n        })\r\n    );\r\n  }\r\n\r\n  patchForm() {\r\n    // console.log(this.productData.cat.category_id);\r\n\r\n    this.getLangFormGroup('sr').patchValue({\r\n      name: this.productData.languages[0].translation.name,\r\n      description: this.productData.languages[0].translation.description,\r\n      description2: this.productData.languages[0].translation.description2,\r\n      slug: this.productData.languages[0].translation.details.slug,\r\n      meta_title: this.productData.languages[0].translation.details.meta_title,\r\n      meta_keywords:\r\n        this.productData.languages[0].translation.details.meta_keywords,\r\n      meta_description:\r\n        this.productData.languages[0].translation.details.meta_description,\r\n    });\r\n    this.getLangFormGroup('en').patchValue({\r\n      name: this.productData.languages[1].translation.name,\r\n      description: this.productData.languages[1].translation.description,\r\n      description2: this.productData.languages[1].translation.description2,\r\n      slug: this.productData.languages[1].translation.details.slug,\r\n      meta_title: this.productData.languages[1].translation.details.meta_title,\r\n      meta_keywords:\r\n        this.productData.languages[1].translation.details.meta_keywords,\r\n      meta_description:\r\n        this.productData.languages[1].translation.details.meta_description,\r\n    });\r\n    this.getLangFormGroup('de').patchValue({\r\n      name: this.productData.languages[2].translation.name,\r\n      description: this.productData.languages[2].translation.description,\r\n      description2: this.productData.languages[2].translation.description2,\r\n      slug: this.productData.languages[2].translation.details.slug,\r\n      meta_title: this.productData.languages[2].translation.details.meta_title,\r\n      meta_keywords:\r\n        this.productData.languages[2].translation.details.meta_keywords,\r\n      meta_description:\r\n        this.productData.languages[2].translation.details.meta_description,\r\n    });\r\n\r\n    this.editProductForm.patchValue({\r\n      id: this.productData.id,\r\n      real_id: this.productData.real_id,\r\n      model_id: this.productData.model_id,\r\n      price: this.productData.price,\r\n      quantity: this.productData.products[0].quantity,\r\n      group2: this.productData.subcat.category_id,\r\n      group1: this.productData.cat.category_id,\r\n      active: this.productData.active === 1 ? true : false,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "ProductsListFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "ProductsListFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"PROIZVODI - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"editProductForm\"\r\n  [skeletonLoad]=\"!productData\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"card-body\">\r\n      <div class=\"p-grid\">\r\n        <div class=\"p-col-12 p-sm-8\">\r\n          <p-tabView>\r\n            <p-tabPanel header=\"Srpski\">\r\n              <app-form-builder\r\n                [form]=\"getLangFormGroup('sr')\"\r\n                [fields]=\"fieldsService.mainFields\"\r\n              ></app-form-builder>\r\n            </p-tabPanel>\r\n            <p-tabPanel header=\"Engleski\">\r\n              <app-form-builder\r\n                [form]=\"getLangFormGroup('en')\"\r\n                [fields]=\"fieldsService.mainFields\"\r\n              ></app-form-builder>\r\n            </p-tabPanel>\r\n            <p-tabPanel header=\"Nemački\">\r\n              <app-form-builder\r\n                [form]=\"getLangFormGroup('de')\"\r\n                [fields]=\"fieldsService.mainFields\"\r\n              ></app-form-builder>\r\n            </p-tabPanel>\r\n          </p-tabView>\r\n        </div>\r\n\r\n        <div class=\"p-col-12 p-sm-4 p-mt-6 p-sm-mt-0\">\r\n          <div class=\"p-grid p-mt-2\">\r\n            <div class=\"p-col-12\">\r\n              <div class=\"p-field w-100\">\r\n                <label>Kategorija</label>\r\n                <p-dropdown\r\n                  placeholder=\"Izaberi kategoriju\"\r\n                  styleClass=\"w-100\"\r\n                  (onChange)=\"getSubcategories($event)\"\r\n                  [options]=\"categories\"\r\n                  formControlName=\"group1\"\r\n                  optionValue=\"category_id\"\r\n                  optionLabel=\"name\"\r\n                ></p-dropdown>\r\n              </div>\r\n              <div\r\n                class=\"p-field w-100\"\r\n                *ngIf=\"subcategories && subcategories.length > 0\"\r\n              >\r\n                <label>Podkategorija</label>\r\n                <p-dropdown\r\n                  placeholder=\"Izaberi kategoriju\"\r\n                  styleClass=\"w-100\"\r\n                  [options]=\"subcategories\"\r\n                  formControlName=\"group2\"\r\n                  optionValue=\"category_id\"\r\n                  optionLabel=\"name\"\r\n                ></p-dropdown>\r\n              </div>\r\n\r\n              <app-form-builder\r\n                [form]=\"editProductForm\"\r\n                [fields]=\"fieldsService.mainInfo\"\r\n              ></app-form-builder>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"p-grid\">\r\n        <div class=\"p-col-12\">\r\n          <div class=\"p-field w-100\">\r\n            <label>Slike</label>\r\n            <app-image-upload\r\n              [fileList]=\"fileList\"\r\n              [productImages]=\"true\"\r\n              [includeSeo]=\"false\"\r\n              [controlName]=\"'images'\"\r\n              [chosenFormGroup]=\"editProductForm\"\r\n              [srAttachments]=\"srAttachments\"\r\n              [maxImages]=\"5\"\r\n            >\r\n            </app-image-upload>\r\n            <section class=\"p-mt-2\">\r\n              <p-tag severity=\"info\" value=\"Pomoć\" icon=\"pi pi-info\"></p-tag>\r\n              <span class=\"p-ml-1\">\r\n                Preporučena dimenzija za sliku je 800x600</span\r\n              >\r\n            </section>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "ProductsComponent",
            "id": "component-ProductsComponent-dcee63e53ed51009d7ba452c408ea468",
            "file": "src/app/modules/pages/products/products.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-products",
            "styleUrls": [
                "./products.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./products.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "websiteUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ProductsFieldsService } from './products-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-products',\r\n  templateUrl: './products.component.html',\r\n  styleUrls: ['./products.component.scss'],\r\n})\r\nexport class ProductsComponent implements OnInit {\r\n  pageForm: FormGroup;\r\n  pageId: number;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  websiteUrl = environment.apiUrl;\r\n  loading: boolean = false;\r\n  constructor(\r\n    private messService: MessServiceService,\r\n    private postsService: PostsService,\r\n    private route: ActivatedRoute,\r\n    private fb: FormBuilder,\r\n    public fieldsService: ProductsFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      id: [''],\r\n      post_type: ['page'],\r\n      post_status: [''],\r\n      post_name: ['products'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.pageId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.pageData = response;\r\n        this.websiteUrl = `${this.websiteUrl}/${response.locale.sr.slug}`;\r\n\r\n        // this.pageData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const pageForm = this.pageForm.getRawValue();\r\n    pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(pageForm);\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili stranicu',\r\n          });\r\n          // this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.pageData.locale[langCode].title,\r\n      content: this.pageData.locale[langCode].content,\r\n      slug: this.pageData.locale[langCode].slug,\r\n      meta_title: this.pageData.locale[langCode].meta_title,\r\n      meta_description: this.pageData.locale[langCode].meta_description,\r\n      meta_keywords: this.pageData.locale[langCode].meta_keywords,\r\n    });\r\n  }\r\n\r\n  patchForm() {\r\n    this.patchLangForm('sr');\r\n    this.patchLangForm('en');\r\n    this.patchLangForm('de');\r\n\r\n    this.pageForm.patchValue({\r\n      id: this.pageId,\r\n      post_status: this.pageData.post_status,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./products.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "ProductsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "ProductsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"GENERAL\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!pageData\"\r\n  [pageData]=\"pageData\"\r\n  [formGroup]=\"pageForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"true\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "ProductSingleLangFormComponent",
            "id": "component-ProductSingleLangFormComponent-4f3e878bf2e9f53cb984c368d07a5b7f",
            "file": "src/app/modules/products/products-list/product-single-lang-form/product-single-lang-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-single-lang-form",
            "styleUrls": [
                "./product-single-lang-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-single-lang-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "languageFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "languageFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-product-single-lang-form',\n  templateUrl: './product-single-lang-form.component.html',\n  styleUrls: ['./product-single-lang-form.component.scss']\n})\nexport class ProductSingleLangFormComponent implements OnInit {\n  @Input() languageFormGroup: FormGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product-single-lang-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-grid\"  [formGroup]=\"languageFormGroup\">\n  <div class=\"p-col-12 p-pb-0\">\n    <div class=\"p-field w-100\">\n      <label>Naziv proizvoda</label>\n      <input type=\"text\" formControlName=\"name\" pInputText />\n    </div>\n  </div>\n  <div class=\"p-col-12 p-pt-0\">\n    <div class=\"p-field w-100\">\n      <label>Kraći opis proizvoda</label>\n      <textarea type=\"text\" formControlName=\"description\" pInputTextarea></textarea>\n    </div>\n    <div class=\"p-field w-100\">\n      <label>Opis proizvoda</label>\n      <quill-editor\n      formControlName=\"description2\"\n      [style]=\"{ height: '320px', 'margin-bottom': '100px' }\"></quill-editor>\n    </div>\n  </div>\n  <div class=\"p-col-12\">\n    <app-page-seo [formGroup]=\"languageFormGroup\"></app-page-seo>\n  </div>\n</div>\n"
        },
        {
            "name": "ProductsListComponent",
            "id": "component-ProductsListComponent-b38a0fca5f61e1857df4e8f1c88d16ef",
            "file": "src/app/modules/products/products-list/products-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-products-list",
            "styleUrls": [
                "./products-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./products-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiOrNot",
                    "defaultValue": "[\r\n    { label: 'Svi', value: '' },\r\n    { label: 'Promobox', value: '&from_api=1' },\r\n    { label: 'Custom', value: '&from_api=0' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "hasSavedFilter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "hideFilters",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "paginator",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaginatorApi | any",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "paginatorElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Paginator",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'paginatorElement'"
                        }
                    ]
                },
                {
                    "name": "productForSync",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "products",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "searchForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "searchInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput', {static: false}"
                        }
                    ]
                },
                {
                    "name": "sortOptions",
                    "defaultValue": "[\r\n    {\r\n      title: 'Po aktivnosti rastuće',\r\n      value: 'active_asc',\r\n    },\r\n    {\r\n      title: 'Po aktivnosti opadajuće',\r\n      value: 'active_desc',\r\n    },\r\n    {\r\n      title: 'Po kategoriji rastuće',\r\n      value: 'category_asc',\r\n    },\r\n    {\r\n      title: 'Po kategoriji opadajuće',\r\n      value: 'category_desc',\r\n    },\r\n    {\r\n      title: 'Po nazivu rastuće',\r\n      value: 'name_asc',\r\n    },\r\n    {\r\n      title: 'Po nazivu opadajuće',\r\n      value: 'name_desc',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "subcategories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "syncing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "getSavedFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "Id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResetSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSync",
                    "args": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "productName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "productName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetCatOrSubcat",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'subcat'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'subcat'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 347,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 343,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 359,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCurrentPage",
                    "args": [
                        {
                            "name": "currentPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTable",
                    "args": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Paginator } from 'primeng/paginator';\r\nimport { fromEvent } from 'rxjs';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\r\nimport { CategoriesService } from 'src/app/core/services/categories.service';\r\nimport { MenuToggleService } from 'src/app/core/services/menu-toggle.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { ProductsService } from 'src/app/core/services/products.service';\r\nimport { PaginatorApi } from 'src/app/shared/models/paginator';\r\n\r\n@Component({\r\n  selector: 'app-products-list',\r\n  templateUrl: './products-list.component.html',\r\n  styleUrls: ['./products-list.component.scss'],\r\n})\r\nexport class ProductsListComponent implements OnInit, AfterViewInit {\r\n  loading = false;\r\n  products;\r\n  searchForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  paginator: PaginatorApi | any = {};\r\n  @ViewChild('paginatorElement') paginatorElement: Paginator;\r\n  apiOrNot = [\r\n    { label: 'Svi', value: '' },\r\n    { label: 'Promobox', value: '&from_api=1' },\r\n    { label: 'Custom', value: '&from_api=0' },\r\n  ];\r\n  hasSavedFilter = false;\r\n  productForSync: string;\r\n  syncing = false;\r\n  sortOptions = [\r\n    {\r\n      title: 'Po aktivnosti rastuće',\r\n      value: 'active_asc',\r\n    },\r\n    {\r\n      title: 'Po aktivnosti opadajuće',\r\n      value: 'active_desc',\r\n    },\r\n    {\r\n      title: 'Po kategoriji rastuće',\r\n      value: 'category_asc',\r\n    },\r\n    {\r\n      title: 'Po kategoriji opadajuće',\r\n      value: 'category_desc',\r\n    },\r\n    {\r\n      title: 'Po nazivu rastuće',\r\n      value: 'name_asc',\r\n    },\r\n    {\r\n      title: 'Po nazivu opadajuće',\r\n      value: 'name_desc',\r\n    },\r\n  ];\r\n  categories = [];\r\n  subcategories = [];\r\n  @ViewChild('searchInput', { static: false }) searchInput: ElementRef;\r\n  hideFilters = true;\r\n\r\n  constructor(\r\n    private productsService: ProductsService,\r\n    private messService: MessServiceService,\r\n    private fb: FormBuilder,\r\n    private confirmationService: ConfirmationService,\r\n    private categoriesService: CategoriesService,\r\n    private cdr: ChangeDetectorRef,\r\n    private menuToggle: MenuToggleService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Init search form\r\n    this.searchForm = this.fb.group({\r\n      name: [''],\r\n      apiOrNot: [''],\r\n      sortBy: [],\r\n      category: [],\r\n      subcategory: [],\r\n    });\r\n\r\n    if (window.innerWidth < 500) {\r\n      this.subscriptions.push(\r\n        this.menuToggle.currentState.subscribe((state) => {\r\n          if (state != null) {\r\n            this.hideFilters = true;\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      this.hideFilters = false;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // * Debounce search\r\n    fromEvent(this.searchInput.nativeElement, 'keyup')\r\n      .pipe(\r\n        // get value\r\n        map((event: any) => {\r\n          return event.target.value;\r\n        }),\r\n        // Time in milliseconds between key events\r\n        debounceTime(500),\r\n        // If previous query is diffent from current\r\n        distinctUntilChanged()\r\n        // subscription for response\r\n      )\r\n      .subscribe((text: string) => {\r\n        this.onSearch();\r\n      });\r\n\r\n    // * Get all categories\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getAllCatSubcatNoPagination()\r\n        .subscribe((response: any) => {\r\n          console.log(response);\r\n          response.categories.forEach((category) => {\r\n            this.categories.push({\r\n              name: category.languages[0].translation.name,\r\n              real_id: category.real_id,\r\n              category_id: '&category[]=' + category.category_id,\r\n            });\r\n          });\r\n          response.subcategories.forEach((category) => {\r\n            this.subcategories.push({\r\n              name: category.languages[0].translation.name,\r\n              real_id: category.real_id,\r\n              category_id: '&subcategory[]=' + category.category_id,\r\n            });\r\n          });\r\n\r\n          this.getSavedFilters();\r\n        })\r\n    );\r\n\r\n    // this.cdr.detectChanges();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n    this.saveFilter();\r\n  }\r\n\r\n  // * Search === //\r\n  onSearch() {\r\n    console.log(this.searchForm.getRawValue());\r\n    const searchForm = this.searchForm.getRawValue();\r\n    // Get active users\r\n    this.loading = true;\r\n    this.subscriptions.push(\r\n      this.productsService\r\n        .getAllProducts(\r\n          1,\r\n          `&name=${searchForm.name}${searchForm.apiOrNot}\r\n          &sortBy=${searchForm.sortBy ? searchForm.sortBy : ''}\r\n          ${searchForm.category ? searchForm.category : ''}\r\n          ${searchForm.subcategory ? searchForm.subcategory : ''}`\r\n        )\r\n        .subscribe((response: PaginatorApi) => {\r\n          this.products = response.data;\r\n          this.paginator = response;\r\n          console.log(response);\r\n\r\n          if (this.paginatorElement.getPage().toString() === 'NaN') {\r\n            this.updateCurrentPage(2);\r\n          } else {\r\n            this.updateCurrentPage(1);\r\n          }\r\n\r\n          this.loading = false;\r\n        })\r\n    );\r\n  }\r\n\r\n  // * Sync === //\r\n  onSync(productId: number, productName: string) {\r\n    this.productForSync = productName;\r\n    this.syncing = true;\r\n    this.subscriptions.push(\r\n      this.productsService.syncProduct(productId).subscribe(\r\n        (resp) => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna sinhronizacija',\r\n            detail: 'Sinhronizovali ste proizvod.',\r\n          });\r\n          console.log(resp, 'SINH');\r\n          this.updateTable(1);\r\n          this.updateCurrentPage(1);\r\n          this.syncing = false;\r\n        },\r\n        (error) => {\r\n          this.syncing = false;\r\n          this.messService.addError({\r\n            severity: 'error',\r\n            title: 'Greška',\r\n            detail: 'Došlo je do greške, pokušajte ponovo!',\r\n          });\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, Id: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete proizvod?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.productsService.deleteProduct(Id).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste proizvod.',\r\n              });\r\n              this.updateTable(1);\r\n              this.updateCurrentPage(1);\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Change status\r\n  onChangeStatus(event, categoryId: number) {\r\n    console.log(event);\r\n    const status = {\r\n      status: event.checked ? 1 : 0,\r\n    };\r\n    this.subscriptions.push(\r\n      this.productsService.updateProductStatus(categoryId, status).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno menjanje statusa',\r\n            detail: 'Uspešno ste promenili vidljivost proizvoda.',\r\n          });\r\n          // this.updateTable(1);\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  updateTable(pageIndex: number) {\r\n    const searchForm = this.searchForm.getRawValue();\r\n    // Get active users\r\n    this.loading = true;\r\n    this.subscriptions.push(\r\n      this.productsService\r\n        .getAllProducts(\r\n          pageIndex,\r\n          `&name=${searchForm.name}${searchForm.apiOrNot}\r\n          &sortBy=${searchForm.sortBy ? searchForm.sortBy : ''}\r\n          ${searchForm.category ? searchForm.category : ''}\r\n          ${searchForm.subcategory ? searchForm.subcategory : ''}`\r\n        )\r\n        .subscribe((response: PaginatorApi) => {\r\n          this.products = response.data;\r\n          this.paginator = response;\r\n          console.log(response);\r\n          this.loading = false;\r\n        })\r\n    );\r\n  }\r\n\r\n  onResetSearch() {\r\n    this.searchForm.controls['name'].setValue('');\r\n    this.onSearch();\r\n  }\r\n\r\n  resetCatOrSubcat(type: string = 'subcat') {\r\n    if (type == 'cat') {\r\n      this.searchForm.patchValue({\r\n        category: null,\r\n      });\r\n    } else {\r\n      this.searchForm.patchValue({\r\n        subcategory: null,\r\n      });\r\n    }\r\n  }\r\n\r\n  getSavedFilters() {\r\n    this.subscriptions.push(\r\n      this.productsService.productsFilter.subscribe((response) => {\r\n        console.log('FILTER', response);\r\n        if (response) {\r\n          this.hasSavedFilter = true;\r\n          this.searchForm.patchValue({\r\n            name: response.name,\r\n            apiOrNot: response.apiOrNot,\r\n            sortBy: response.sortBy,\r\n            category: response.category,\r\n            subcategory: response.subcategory,\r\n          });\r\n          this.onSearch();\r\n        } else {\r\n          // Get all users\r\n          this.updateTable(1);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private updateCurrentPage(currentPage: number): void {\r\n    this.paginatorElement.changePage(currentPage - 1);\r\n  }\r\n\r\n  onPageChange(event) {\r\n    this.updateTable(event.page + 1);\r\n  }\r\n\r\n  saveFilter() {\r\n    this.productsService.productsFilter.next(this.searchForm.getRawValue());\r\n  }\r\n\r\n  resetFilter() {\r\n    this.searchForm.patchValue({\r\n      name: '',\r\n      apiOrNot: '',\r\n      category: null,\r\n      subcategory: null,\r\n      sortBy: null,\r\n    });\r\n    this.updateTable(1);\r\n    this.saveFilter();\r\n  }\r\n\r\n  toggleFilters() {\r\n    this.hideFilters = !this.hideFilters;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './../../../../assets/scss/partials/mixins';\r\n\r\n.block-ui {\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  top: 0px;\r\n  left: 0px;\r\n  z-index: 1000;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  .block-ui-message {\r\n    background-color:#fff;\r\n    padding: 4rem 2rem;\r\n    border-radius: 5px;\r\n    display: flex;\r\n    flex-flow: column;\r\n    align-items: center;\r\n\r\n    @include xs{\r\n      width: 93vw !important;\r\n    }\r\n    h2{\r\n      text-transform: uppercase;\r\n      line-height: 1.9rem;\r\n    }\r\n    bold{\r\n      color:var(--pink-400) ;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./products-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"main\"\r\n  headerTitle=\"PROIZVODI\"\r\n  [loading]=\"syncing\"\r\n  [skeletonLoad]=\"!products\"\r\n  [showAddButton]=\"true\"\r\n  [blockUiText]=\"\r\n    'Sinhronizacija proizvoda ' + productForSync + ' u toku. Molimo sačekajte.'\r\n  \"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <p-table\r\n            #dt1\r\n            [value]=\"products\"\r\n            [rows]=\"10\"\r\n            [loading]=\"loading\"\r\n            styleClass=\"p-datatable-customers p-datatable-gridlines p-datatable-responsive-demo\"\r\n            currentPageReportTemplate=\"Prikaz od {first}. do {last}. proizvoda od ukupno {totalRecords}\"\r\n          >\r\n            <ng-template pTemplate=\"caption\">\r\n              <form\r\n                class=\"page-control\"\r\n                [ngClass]=\"{ 'toggle-filters': hideFilters }\"\r\n                [formGroup]=\"searchForm\"\r\n                (ngSubmit)=\"onSearch()\"\r\n              >\r\n                <section\r\n                  class=\"filter-dark-bg\"\r\n                  (click)=\"toggleFilters()\"\r\n                ></section>\r\n                <button\r\n                  class=\"close-bar\"\r\n                  type=\"button\"\r\n                  (click)=\"toggleFilters()\"\r\n                >\r\n                  <div class=\"bar\"></div>\r\n                </button>\r\n                <div class=\"input-fields\">\r\n                  <p-selectButton\r\n                    styleClass=\"p-mr-2 filter-item\"\r\n                    [options]=\"apiOrNot\"\r\n                    (onChange)=\"onSearch()\"\r\n                    formControlName=\"apiOrNot\"\r\n                    optionLabel=\"label\"\r\n                    optionValue=\"value\"\r\n                  ></p-selectButton>\r\n                  <div class=\"p-inputgroup p-mr-2 w-fit-content filter-item\">\r\n                    <span class=\"p-input-icon-left\">\r\n                      <i class=\"pi pi-search\"></i>\r\n                      <input\r\n                        pInputText\r\n                        type=\"text\"\r\n                        formControlName=\"name\"\r\n                        placeholder=\"Pretraži ime\"\r\n                        class=\"w-100\"\r\n                        #searchInput\r\n                      />\r\n                    </span>\r\n                    <button\r\n                      type=\"button\"\r\n                      (click)=\"onResetSearch()\"\r\n                      pButton\r\n                      icon=\"pi pi-times\"\r\n                      styleClass=\"p-button-warn\"\r\n                    ></button>\r\n                  </div>\r\n                  <p-dropdown\r\n                    [options]=\"categories\"\r\n                    styleClass=\"p-mr-2 dropdown-width\"\r\n                    class=\"filter-item\"\r\n                    (onChange)=\"resetCatOrSubcat()\"\r\n                    formControlName=\"category\"\r\n                    placeholder=\"Kategorija\"\r\n                    optionLabel=\"name\"\r\n                    optionValue=\"category_id\"\r\n                    [showClear]=\"true\"\r\n                  ></p-dropdown>\r\n                  <p-dropdown\r\n                    [options]=\"subcategories\"\r\n                    (onChange)=\"resetCatOrSubcat('cat')\"\r\n                    class=\"filter-item\"\r\n                    styleClass=\"p-mr-2 dropdown-width\"\r\n                    formControlName=\"subcategory\"\r\n                    placeholder=\"Podkategorija\"\r\n                    optionLabel=\"name\"\r\n                    optionValue=\"category_id\"\r\n                    [showClear]=\"true\"\r\n                  ></p-dropdown>\r\n                  <p-dropdown\r\n                    [options]=\"sortOptions\"\r\n                    styleClass=\"p-mr-2 dropdown-width\"\r\n                    class=\"filter-item\"\r\n                    formControlName=\"sortBy\"\r\n                    placeholder=\"Sortiranje\"\r\n                    optionLabel=\"title\"\r\n                    optionValue=\"value\"\r\n                    [showClear]=\"true\"\r\n                  ></p-dropdown>\r\n                </div>\r\n                <div class=\"filter-buttons\">\r\n                  <button\r\n                    type=\"button\"\r\n                    (click)=\"resetFilter()\"\r\n                    pTooltip=\"Resetuj filtere\"\r\n                    icon=\"false\"\r\n                    pButton\r\n                    tooltipPosition=\"top\"\r\n                    class=\"main-btn only-icon-btn p-mr-1\"\r\n                  >\r\n                    <i class=\"pi pi-refresh\"></i>\r\n                  </button>\r\n                  <button type=\"submit\" class=\"main-btn\" pButton>\r\n                    Pretraži <i class=\"pi pi-search\"></i>\r\n                  </button>\r\n                </div>\r\n              </form>\r\n              <button\r\n                class=\"main-btn w-100 toggle-filter-btn\"\r\n                type=\"button\"\r\n                (click)=\"toggleFilters()\"\r\n              >\r\n                Filteri <i class=\"pi pi-search\"></i>\r\n              </button>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"header\">\r\n              <tr>\r\n                <th>\r\n                  <div class=\"p-d-flex p-jc-between p-ai-center\">\r\n                    Naziv proizvoda\r\n                  </div>\r\n                </th>\r\n                <th>Kategorija</th>\r\n                <th>Podkategorija</th>\r\n                <th>Poslednja sinhronizacija</th>\r\n                <th style=\"width: 8rem\">\r\n                  <div class=\"p-d-flex p-jc-center p-ai-center\">Objavljen</div>\r\n                </th>\r\n                <th style=\"width: 8rem\">\r\n                  <div class=\"p-d-flex p-jc-center p-ai-center\">Akcija</div>\r\n                </th>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"body\" let-product let-i=\"rowIndex\">\r\n              <tr>\r\n                <td>\r\n                  <span class=\"p-column-title\">Naziv proizvoda</span>\r\n                  <span>{{ product.languages[0].translation.name }}</span>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Kategorija</span>\r\n                  <span>{{ product.cat.languages[0].translation.name }}</span>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Podkategorija</span>\r\n                  <span>{{\r\n                    product.subcat.languages[0].translation.name\r\n                  }}</span>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Poslednja sinhronizacija</span>\r\n                  <span>{{ product.updated_at | date: \"MMM d, y, H:mm\" }}</span>\r\n                </td>\r\n                <td>\r\n                  <div class=\"p-d-flex p-ai-center\">\r\n                    <span class=\"p-column-title\">Status</span>\r\n                    <p-inputSwitch\r\n                      [ngModel]=\"product.active === 1 ? true : false\"\r\n                      (onChange)=\"onChangeStatus($event, product.model_id)\"\r\n                      [name]=\"product.languages[0].translation.name + i\"\r\n                    ></p-inputSwitch>\r\n                  </div>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Akcija</span>\r\n                  <ng-container\r\n                    *ngIf=\"product.from_api == 1; else elseTemplate\"\r\n                  >\r\n                    <button\r\n                      class=\"second-btn small-btn\"\r\n                      type=\"button\"\r\n                      pTooltip=\"Sinhronizuj\"\r\n                      tooltipPosition=\"top\"\r\n                      (click)=\"\r\n                        onSync(\r\n                          product.model_id,\r\n                          product.languages[0].translation.name\r\n                        )\r\n                      \"\r\n                    >\r\n                      <i class=\"pi pi-refresh\"></i>\r\n                    </button>\r\n                  </ng-container>\r\n                  <ng-template #elseTemplate>\r\n                    <a\r\n                      class=\"second-btn small-btn p-mr-2\"\r\n                      pTooltip=\"Izmeni\"\r\n                      tooltipPosition=\"top\"\r\n                      [routerLink]=\"['edit', product.model_id]\"\r\n                    >\r\n                      <i class=\"pi pi-pencil\"></i>\r\n                    </a>\r\n                    <button\r\n                      class=\"second-btn small-btn\"\r\n                      type=\"button\"\r\n                      pTooltip=\"Izbriši\"\r\n                      tooltipPosition=\"top\"\r\n                      (click)=\"onDelete($event, product.model_id)\"\r\n                    >\r\n                      <i class=\"pi pi-trash\"></i>\r\n                    </button>\r\n                  </ng-template>\r\n                </td>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"emptymessage\">\r\n              <tr>\r\n                <td colspan=\"6\">Ni jedan proizvod nije pronađen.</td>\r\n              </tr>\r\n            </ng-template>\r\n          </p-table>\r\n          <p-paginator\r\n            #paginatorElement\r\n            [first]=\"1\"\r\n            [rows]=\"paginator.per_page\"\r\n            [showJumpToPageDropdown]=\"true\"\r\n            [showPageLinks]=\"true\"\r\n            [totalRecords]=\"paginator.total\"\r\n            (onPageChange)=\"onPageChange($event)\"\r\n            [showPageLinks]=\"false\"\r\n          ></p-paginator>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "ReferenceUploadComponent",
            "id": "component-ReferenceUploadComponent-42d3188ba25e7cfef3f33bcb5757e69e",
            "file": "src/app/shared/components/reference-upload/reference-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reference-upload",
            "styleUrls": [
                "./reference-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reference-upload.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "chosenFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "FormGroup"
                },
                {
                    "name": "chosenFormGroupDe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FormGroup"
                },
                {
                    "name": "chosenFormGroupEn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FormGroup"
                },
                {
                    "name": "controlName",
                    "defaultValue": "'attachments'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "deAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "FormArray"
                },
                {
                    "name": "enAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "FormArray"
                },
                {
                    "name": "fileList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "fileList[]"
                },
                {
                    "name": "fileType",
                    "defaultValue": "'image'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "includeSeo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "instanceIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number"
                },
                {
                    "name": "maxImages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any"
                },
                {
                    "name": "productImages",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "srAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "FormArray"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_d",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DomSanitizer",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chosenFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "chosenFormGroupDe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "chosenFormGroupEn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "controlName",
                    "defaultValue": "'attachments'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'deAttachments'"
                        }
                    ]
                },
                {
                    "name": "enAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'enAttachments'"
                        }
                    ]
                },
                {
                    "name": "fileList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'fileList'"
                        }
                    ]
                },
                {
                    "name": "fileType",
                    "defaultValue": "'image'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "includeSeo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "instanceIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "maxImages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "productImages",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "srAttachments",
                    "defaultValue": "this.fb.array([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'srAttachments'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createImageDescription",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createProductImageDescription",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeFile",
                    "args": [
                        {
                            "name": "fileIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeImageDescription",
                    "args": [
                        {
                            "name": "imgIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imgIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { fileList } from '../../models/file-list';\r\n\r\n@Component({\r\n  selector: 'app-reference-upload',\r\n  templateUrl: './reference-upload.component.html',\r\n  styleUrls: ['./reference-upload.component.scss'],\r\n})\r\nexport class ReferenceUploadComponent implements OnInit {\r\n  @Input('fileList') fileList: fileList[];\r\n  @Input('srAttachments') srAttachments: FormArray = this.fb.array([]);\r\n  @Input('enAttachments') enAttachments: FormArray = this.fb.array([]);\r\n  @Input('deAttachments') deAttachments: FormArray = this.fb.array([]);\r\n  @Input() chosenFormGroup: FormGroup;\r\n  @Input() chosenFormGroupEn: FormGroup;\r\n  @Input() chosenFormGroupDe: FormGroup;\r\n  @Input() maxImages: number;\r\n  @Input() includeSeo: boolean;\r\n  @Input() productImages: boolean = false;\r\n  @Input() controlName = 'attachments';\r\n  @Input() fileType = 'image';\r\n  @Input() instanceIndex: number = 0;\r\n  @Input() options: any;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    public _d: DomSanitizer,\r\n    private messService: MessServiceService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {}\r\n\r\n  // * Upload === //\r\n  uploadFile(event) {\r\n    console.log(this.fileList);\r\n\r\n    if (this.fileList.length < this.maxImages) {\r\n      const file = (event.target as HTMLInputElement).files[0];\r\n      console.log(file);\r\n      if (this.fileType == 'image' && !file.type.includes('image')) {\r\n        // If type is wrong\r\n        this.messService.addWarn({\r\n          severity: 'warn',\r\n          title: 'Format slike nije podržan!',\r\n          detail:\r\n            'Vaša slika mora biti u nekom od podržanih formata: .JPG, .PNG, .SVG.',\r\n        });\r\n        return;\r\n      }\r\n      // Add file to array\r\n      this.fileList.push({\r\n        originalFile: file,\r\n        imageLocalUrl: window.URL.createObjectURL(file),\r\n        fileName: file.name,\r\n      });\r\n      if (this.includeSeo && !this.productImages) {\r\n        this.srAttachments.push(this.createImageDescription(file.name));\r\n        this.enAttachments.push(this.createImageDescription(file.name));\r\n        this.deAttachments.push(this.createImageDescription(file.name));\r\n      }\r\n      if (!this.includeSeo && this.productImages) {\r\n        this.srAttachments.push(this.createProductImageDescription(file.name));\r\n      }\r\n\r\n      // Reset File Input\r\n      event.srcElement.value = null;\r\n    } else {\r\n      this.messService.addWarn({\r\n        severity: 'warn',\r\n        title:\r\n          this.fileType == 'image'\r\n            ? 'Dodali ste maksimalni broj slika!'\r\n            : 'Dodali ste maksimalni broj fajlova',\r\n        detail:\r\n          this.fileType == 'image'\r\n            ? 'Izbrišite neku od trenutnih slika kako bi mogli da dodate nove.'\r\n            : 'Izbrišite neki od trenutnih fajlova kako bi mogli da dodate novi.',\r\n      });\r\n    }\r\n  }\r\n\r\n  // * Helpers === //\r\n  createImageDescription(fileName: string): FormGroup {\r\n    return this.fb.group({\r\n      title: [''],\r\n      alt: [''],\r\n      name: [fileName],\r\n    });\r\n  }\r\n\r\n  createProductImageDescription(fileName: string): FormGroup {\r\n    return this.fb.group({\r\n      name: [fileName],\r\n    });\r\n  }\r\n\r\n  removeImageDescription(imgIndex: number) {\r\n    this.srAttachments.removeAt(imgIndex);\r\n    this.enAttachments.removeAt(imgIndex);\r\n    this.deAttachments.removeAt(imgIndex);\r\n  }\r\n\r\n  removeFile(fileIndex: number) {\r\n    // Delete file from list for submit\r\n    this.fileList.splice(fileIndex, 1);\r\n    this.removeImageDescription(fileIndex);\r\n    console.log(this.fileList);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/scss/partials/variables';\r\n@import '../../../../assets/scss/partials/mixins';\r\n\r\n::ng-deep{\r\n\r\n  .image-upload{\r\n\r\n    .file {\r\n      position: relative;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n\r\n    .file > input[type='file'] {\r\n      display: none\r\n    }\r\n\r\n    .file > label {\r\n      cursor: pointer;\r\n      outline: 0;\r\n      user-select: none;\r\n      border: none;\r\n      border-radius: $border-radius;\r\n      background-color: $main-color;\r\n      color: #fff;\r\n      padding: .68rem .8rem;\r\n      font-weight: 500;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      transition: all .3s;\r\n\r\n      i{\r\n        margin-left: 2rem;\r\n      }\r\n\r\n      &:hover{\r\n        background-color: darken($main-color, $darken-amount);\r\n        transition: all .3s;\r\n      }\r\n    }\r\n\r\n    .file > label:hover {\r\n      border-color: hsl(0, 0%, 21%);\r\n    }\r\n\r\n    .file > label:active {\r\n      background-color: hsl(0, 0%, 96%);\r\n    }\r\n\r\n    .file > label > i {\r\n      padding-right: 5px;\r\n    }\r\n\r\n\r\n    .file-icon{\r\n      font-size: 4rem;\r\n    }\r\n\r\n    .p-tabview .p-tabview-nav li .p-tabview-nav-link{\r\n      padding: .4rem;\r\n      span{\r\n        font-size: .7rem;\r\n      }\r\n    }\r\n\r\n    .p-accordion .p-accordion-header .p-accordion-header-link{\r\n      padding: .6rem;\r\n    }\r\n\r\n    .p-inputtext{\r\n      font-size: .7rem;\r\n    }\r\n\r\n    .p-field > label{\r\n      font-size: .7rem;\r\n    }\r\n\r\n     .upload-item{\r\n       display: flex;\r\n       justify-content: space-between;\r\n       align-items: center;\r\n       margin-bottom: 1rem;\r\n\r\n       @include xs{\r\n        border-bottom: 1px solid $main-border;\r\n        padding-bottom: 1rem;\r\n        &:last-child{\r\n          border-bottom: none;\r\n          padding-bottom: 0px;\r\n          margin-bottom: 0px;\r\n        }\r\n       }\r\n\r\n       .main-description{\r\n         display: flex;\r\n         align-items: center;\r\n         width: 100%;\r\n         margin-right: 1.5rem;\r\n\r\n         @include xs{\r\n           flex-flow: column;\r\n           align-items: flex-start;\r\n         }\r\n       }\r\n\r\n     }\r\n     .file-thumb{\r\n      @include xs{\r\n        margin: 1rem;\r\n        margin-left: 0px;\r\n      }\r\n     }\r\n     .image-thumb{\r\n       width: 80px;\r\n       height: auto;\r\n       margin-right: 1.5rem;\r\n\r\n       @include xs{\r\n         margin: 1rem;\r\n         margin-left: 0px;\r\n       }\r\n     }\r\n   }\r\n}\r\n\r\n",
                    "styleUrl": "./reference-upload.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_d",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_d",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section\nclass=\"p-fileupload p-fileupload-advanced p-component ng-star-inserted image-upload\"\n>\n<div class=\"upload-header p-fileupload-buttonbar\">\n  <div class=\"upload-btn-wrapper\">\n    <div class=\"file\">\n      <label [for]=\"'input-file-' + instanceIndex\">\n        Izaberi fajl <i class=\"pi pi-plus\"></i>\n      </label>\n      <input [id]=\"'input-file-' + instanceIndex\" type=\"file\" (change)=\"uploadFile($event)\" #file />\n    </div>\n  </div>\n</div>\n<div class=\"upload-items p-fileupload-content\">\n  <div\n    [sortablejs]=\"fileList\"\n    [sortablejs]=\"srAttachments\"\n    [sortablejsOptions]=\"{ handle: '.reorder-handle' }\"\n  >\n    <div\n      *ngFor=\"let item of fileList; let imgIndex = index\"\n\n      class=\"upload-item\"\n    >\n      <main class=\"main-description\">\n        <div class=\"reorder-handle responsive-handle p-mr-2\">\n          <i class=\"pi pi-sort\"></i>\n        </div>\n        <img *ngIf=\"fileType == 'image'\"\n          [src]=\"_d.bypassSecurityTrustUrl(item.imageLocalUrl)\"\n          class=\"image-thumb\"\n          alt=\"\"\n        />\n        <div *ngIf=\"fileType == 'other'\" class=\"file-thumb\">\n          <i class=\"pi pi-file p-mr-2 file-icon\"></i>\n        </div>\n        <section class=\"w-100\">\n          <p-accordion>\n            <p-accordionTab [header]=\"'DETALJI - ' + item.fileName\">\n              <p-tabView>\n                <p-tabPanel header=\"Srpski\">\n\n                  <ng-container [formGroup]=\"chosenFormGroup\">\n                    <ng-container [formArrayName]=\"controlName\">\n                      <div class=\"p-grid\" [formGroupName]=\"imgIndex\">\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Alt tag</label>\n                            <input type=\"text\" formControlName=\"alt\" pInputText />\n                          </div>\n                        </div>\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Title</label>\n                            <input type=\"text\" formControlName=\"title\" pInputText />\n                          </div>\n                        </div>\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Link</label>\n                            <input type=\"text\" placeholder=\"https://\" pInputText />\n                          </div>\n                        </div>\n                      </div>\n                    </ng-container>\n                  </ng-container>\n\n                </p-tabPanel>\n                <p-tabPanel header=\"Engleski\" *ngIf=\"chosenFormGroupEn\">\n\n                  <ng-container [formGroup]=\"chosenFormGroupEn\">\n                    <ng-container [formArrayName]=\"controlName\">\n                      <div class=\"p-grid\" [formGroupName]=\"imgIndex\">\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Alt tag</label>\n                            <input type=\"text\" formControlName=\"alt\" pInputText />\n                          </div>\n                        </div>\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Title</label>\n                            <input type=\"text\" formControlName=\"title\" pInputText />\n                          </div>\n                        </div>\n                      </div>\n                    </ng-container>\n                  </ng-container>\n\n                </p-tabPanel>\n                <p-tabPanel header=\"Nemački\" *ngIf=\"chosenFormGroupDe\">\n\n                  <ng-container [formGroup]=\"chosenFormGroupDe\">\n                    <ng-container [formArrayName]=\"controlName\">\n                      <div class=\"p-grid\" [formGroupName]=\"imgIndex\">\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Alt tag</label>\n                            <input type=\"text\" formControlName=\"alt\" pInputText />\n                          </div>\n                        </div>\n                        <div class=\"p-col-4\">\n                          <div class=\"p-field p-mb-0 w-100\">\n                            <label>Title</label>\n                            <input type=\"text\" formControlName=\"title\" pInputText />\n                          </div>\n                        </div>\n                      </div>\n                    </ng-container>\n                  </ng-container>\n\n                </p-tabPanel>\n              </p-tabView>\n            </p-accordionTab>\n          </p-accordion>\n        </section>\n      </main>\n      <button\n        type=\"button\"\n        pTooltip=\"Obriši\"\n        tooltipPosition=\"top\"\n        class=\"second-btn small-btn p-mr-2\"\n        (click)=\"removeFile(imgIndex)\"\n      >\n        <i class=\"pi pi-trash\"></i>\n      </button>\n    </div>\n  </div>\n</div>\n</section>\n"
        },
        {
            "name": "ResetPasswordComponent",
            "id": "component-ResetPasswordComponent-85ce9d6ba21986866654e6833ed3fc59",
            "file": "src/app/modules/login/reset-password/reset-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password",
            "styleUrls": [
                "./reset-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cmsLogo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isPassShown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loginFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "resetPassForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePassShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { AuthService } from 'src/app/core/authentication/auth.service';\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\nimport { SettingsService } from 'src/app/core/services/settings.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss'],\n})\nexport class ResetPasswordComponent implements OnInit {\n  loading = false;\n  loginFailed = false;\n  token: string;\n  resetPassForm: FormGroup;\n  subscriptions: Subscription[] = [];\n  cmsLogo: string;\n  mediaUrl = environment.mediaUrl;\n  isPassShown = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private messService: MessServiceService,\n    private settingsService: SettingsService\n  ) {}\n\n  // * Lifecycles === //\n  ngOnInit(): void {\n    this.resetPassForm = this.fb.group({\n      email: [''],\n      token: [''],\n      password: [''],\n      password_confirmation: [''],\n    });\n\n    this.subscriptions.push(\n      this.settingsService\n        .getOne('logo')\n        .subscribe((response: any) => {\n          this.cmsLogo = this.mediaUrl + '/' + response.name;\n        })\n    );\n\n    this.token = this.route.snapshot.queryParams.token;\n    if (!this.token || this.token.length !== 40) {\n      this.router.navigate(['/login']);\n    }\n    this.resetPassForm.patchValue({\n      token: this.token,\n    });\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  // * On login\n  onSubmit() {\n    this.loading = true;\n    let formData = this.resetPassForm.getRawValue();\n    console.log(formData);\n    this.subscriptions.push(\n      this.authService.resetPassword(formData).subscribe(\n        (success) => {\n          this.loading = false;\n          this.messService.addSuccess({\n            severity: 'success',\n            title: 'Uspešna izmena',\n            detail: 'Vaša šifra je promenjena.',\n          });\n          this.router.navigate(['/login']);\n        },\n        (error) => {\n          this.loading = false;\n          const errorObj = error.error;\n          const form = this.resetPassForm;\n          const messService = this.messService;\n\n          Object.keys(errorObj).forEach(function (key) {\n            const formControl = form.get(key);\n            if (formControl) {\n              // If error exist set red border to field\n              formControl.setErrors({});\n            }\n            console.log(errorObj[key][0]);\n            // Push toast error for every field\n            messService.addError({\n              severity: 'error',\n              title: 'Greška',\n              detail: errorObj[key],\n            });\n          });\n        }\n      )\n    );\n  }\n\n  // * Helpers === //\n  togglePassShow() {\n    this.isPassShown = !this.isPassShown;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hide {\r\n  display: none;\r\n}\r\n.show {\r\n  display: block;\r\n}\r\n\r\n.login-bg {\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  .logo {\r\n    padding: 2rem 0;\r\n    width: 30%;\r\n  }\r\n\r\n  .login-card {\r\n    display: flex;\r\n    flex-flow: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 340px;\r\n    form {\r\n      width: 100%;\r\n    }\r\n    input {\r\n      width: 100%;\r\n    }\r\n    .main-btn {\r\n      margin-top: 1.5rem;\r\n    }\r\n    .sizes {\r\n      .p-inputtext {\r\n        display: block;\r\n        margin-bottom: 0.5rem;\r\n        &:last-child {\r\n          margin-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./reset-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-bg\">\n  <div class=\"card login-card\">\n    <img *ngIf=\"cmsLogo\" [src]=\"cmsLogo\" alt=\"\" class=\"logo\" />\n\n    <form [formGroup]=\"resetPassForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"p-field\">\n        <label>Email</label>\n        <input type=\"text\" pInputText formControlName=\"email\" />\n      </div>\n\n      <div class=\"p-field\">\n        <label>Nova šifra</label>\n        <div class=\"p-inputgroup p-d-flex\">\n          <input [type]=\"isPassShown ? 'text' : 'password'\" pInputText formControlName=\"password\">\n          <button type=\"button\" pButton pRipple [icon]=\"isPassShown ? 'pi pi-eye' : 'pi pi-eye-slash'\" (click)=\"togglePassShow()\" styleClass=\"p-button-warn\"></button>\n        </div>\n      </div>\n\n      <div class=\"p-field\">\n        <label>Ponovi šifru</label>\n        <div class=\"p-inputgroup p-d-flex\">\n          <input [type]=\"isPassShown ? 'text' : 'password'\" pInputText formControlName=\"password_confirmation\">\n          <button type=\"button\" pButton pRipple [icon]=\"isPassShown ? 'pi pi-eye' : 'pi pi-eye-slash'\" (click)=\"togglePassShow()\" styleClass=\"p-button-warn\"></button>\n        </div>\n      </div>\n\n      <button class=\"main-btn w-100\" type=\"submit\">\n        <div class=\"p-d-flex p-ai-center\">\n          <p-progressSpinner\n            *ngIf=\"loading\"\n            [style]=\"{ width: '15px', height: '15px' }\"\n            styleClass=\"custom-spinner p-mr-2\"\n            strokeWidth=\"8\"\n            animationDuration=\".5s\"\n          ></p-progressSpinner>\n          Resetuj šifru\n        </div>\n        <i class=\"pi pi-refresh\"></i>\n      </button>\n\n      <section class=\"p-d-flex\">\n        <a class=\"p-text-center p-mt-3 w-100\" [routerLink]=\"['/login']\">Nazad na login.</a>\n      </section>\n\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "ReviewsAddComponent",
            "id": "component-ReviewsAddComponent-970f03e4caf1740e0c43891fc5b3b20f",
            "file": "src/app/modules/sections/reviews/reviews-add/reviews-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reviews-add",
            "styleUrls": [
                "./reviews-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reviews-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReviewsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { ReviewsFieldsService } from '../reviews-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-reviews-add',\r\n  templateUrl: './reviews-add.component.html',\r\n  styleUrls: ['./reviews-add.component.scss'],\r\n})\r\nexport class ReviewsAddComponent implements OnInit {\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  fd = new FormData();\r\n  loading = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: ReviewsFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      parent: ['11'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          content: ['', Validators.required],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n        }),\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu recenziju.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reviews-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "ReviewsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "ReviewsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"RECENZIJE - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "ReviewsComponent",
            "id": "component-ReviewsComponent-0d0a75f12bfb2a8c47b00ff9cabbdd68",
            "file": "src/app/modules/sections/reviews/reviews.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reviews",
            "styleUrls": [
                "./reviews.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reviews.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReviewsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "teamMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ReviewsFieldsService } from './reviews-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-reviews',\r\n  templateUrl: './reviews.component.html',\r\n  styleUrls: ['./reviews.component.scss'],\r\n})\r\nexport class ReviewsComponent implements OnInit {\r\n  orderItems;\r\n  teamMembers;\r\n  postForm: FormGroup;\r\n  postData;\r\n  loading = false;\r\n  postId: number;\r\n  subscriptions: Subscription[] = [];\r\n  mediaUrl = environment.mediaUrl;\r\n  fd = new FormData();\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData: ReorderData[] = [];\r\n\r\n  constructor(\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private confirmationService: ConfirmationService,\r\n    public fieldsService: ReviewsFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.postId = +this.route.snapshot.params.sectionId;\r\n\r\n    // Form init\r\n    this.postForm = this.fb.group({\r\n      id: ['11'],\r\n      post_type: ['post'],\r\n      post_name: ['reviews'],\r\n      parent: ['1'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete recenziju?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste recenziju.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Submit\r\n  onSubmit() {\r\n    const pageForm = this.postForm.getRawValue();\r\n    pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(pageForm);\r\n\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili sekciju',\r\n          });\r\n          // this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        this.orderItems = response.posts;\r\n        if (this.orderItems) {\r\n          this.orderItems.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.title,\r\n              subtitle: element.locale.sr.content,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n              image: element.locale.sr.attachments\r\n                ? element.locale.sr.attachments[0].name\r\n                : null,\r\n            });\r\n          });\r\n        }\r\n        this.loading = false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reviews.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "ReviewsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "ReviewsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"RECENZIJE\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showAddButton]=\"true\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Recenzije\">\r\n            <p-panel header=\"Sve recenzije\">\r\n              <app-post-reorder\r\n                [arrayForOrder]=\"postOrder\"\r\n                [orderItems]=\"reorderData\"\r\n                (itemDeleted)=\"updatePageView()\"\r\n              >\r\n              </app-post-reorder>\r\n            </p-panel>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Opis sekcije\">\r\n            <p-tabView>\r\n              <p-tabPanel header=\"Srpski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('sr')\"\r\n                  [fields]=\"fieldsService.mainSectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Engleski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('en')\"\r\n                  [fields]=\"fieldsService.mainSectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Nemački\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('de')\"\r\n                  [fields]=\"fieldsService.mainSectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n            </p-tabView>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "ReviewsEditComponent",
            "id": "component-ReviewsEditComponent-ebc0f23ac5d36359622fbcffb729beab",
            "file": "src/app/modules/sections/reviews/reviews-edit/reviews-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reviews-edit",
            "styleUrls": [
                "./reviews-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reviews-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReviewsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { ReviewsFieldsService } from '../reviews-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-reviews-edit',\r\n  templateUrl: './reviews-edit.component.html',\r\n  styleUrls: ['./reviews-edit.component.scss'],\r\n})\r\nexport class ReviewsEditComponent implements OnInit {\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  postId: number;\r\n  postData;\r\n  loading = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: ReviewsFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get post ID\r\n    this.postId = +this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['11'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', Validators.required],\r\n          content: ['', Validators.required],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          content: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.srAttachments = this.postForm.get(\r\n      'locale.sr.attachments'\r\n    ) as FormArray;\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novo pitanje.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n      content: this.postData.locale[langCode].content,\r\n    });\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reviews-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "ReviewsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "ReviewsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"RECENZIJE - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"post\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "RichEditorComponent",
            "id": "component-RichEditorComponent-b7dcac27013779da8cb0c72fa894e1ec",
            "file": "src/app/shared/components/rich-editor/rich-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-rich-editor",
            "styleUrls": [
                "./rich-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./rich-editor.component.html"
            ],
            "viewProviders": [
                {
                    "name": "{\n    provide: ControlContainer, useExisting: FormGroupDirective,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "controlContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlContainer",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fieldOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'options'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ControlContainer, FormGroupDirective } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-rich-editor',\r\n  templateUrl: './rich-editor.component.html',\r\n  styleUrls: ['./rich-editor.component.scss'],\r\n  viewProviders: [\r\n    {\r\n      provide: ControlContainer,\r\n      useExisting: FormGroupDirective,\r\n    },\r\n  ],\r\n})\r\nexport class RichEditorComponent implements OnInit {\r\n  @Input('options') fieldOptions;\r\n\r\n  constructor(public controlContainer: ControlContainer) {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".quill-mb {\r\n  margin-bottom: 60px;\r\n}\r\n",
                    "styleUrl": "./rich-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container>\r\n  <div class=\"p-field\" [ngClass]=\"fieldOptions.containerClass\">\r\n    <label>{{ fieldOptions.label }}</label>\r\n    <quill-editor\r\n      [formControlName]=\"fieldOptions.formControlName\"\r\n      class=\"quill-mb\"\r\n      [style]=\"{ height: '360px' }\"\r\n    ></quill-editor>\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "SettingsPageComponent",
            "id": "component-SettingsPageComponent-95b1ece0ff8e0d547e89a5ffdc625566",
            "file": "src/app/modules/settings/settings-page/settings-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-page",
            "styleUrls": [
                "./settings-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "animateButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "eventsSubject",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SettingsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileFooterLogo",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fileHeaderLogo",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "footerLogoAttach",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "logoAttach",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { SettingsService } from 'src/app/core/services/settings.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { SettingsFieldsService } from './settings-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-settings-page',\r\n  templateUrl: './settings-page.component.html',\r\n  styleUrls: ['./settings-page.component.scss'],\r\n})\r\nexport class SettingsPageComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  pageForm: FormGroup;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fileHeaderLogo: fileList[] = [];\r\n  fileFooterLogo: fileList[] = [];\r\n  files: any[] = [];\r\n  fd = new FormData();\r\n  logoAttach: FormArray;\r\n  footerLogoAttach: FormArray;\r\n  animateButton = false;\r\n  eventsSubject: Subject<void> = new Subject<void>();\r\n\r\n  constructor(\r\n    private settingsService: SettingsService,\r\n    private messService: MessServiceService,\r\n    public fieldsService: SettingsFieldsService,\r\n    private fb: FormBuilder\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      app_name: [''],\r\n      orders_mail: ['', Validators.required],\r\n      copyright: [''],\r\n      charset: [''],\r\n      address: [''],\r\n      phone: [''],\r\n      mob_phone: [''],\r\n      email: ['', Validators.required],\r\n      wd_mon_fri: [''],\r\n      wd_sat: [''],\r\n      wd_sun: [''],\r\n      google_analytics: [''],\r\n      hot_jar: [''],\r\n      google_map: [''],\r\n      fb_messenger: [''],\r\n      social_links: this.fb.group({\r\n        facebook: [''],\r\n        twitter: [''],\r\n        youtube: [''],\r\n      }),\r\n      logo: this.fb.array([]),\r\n      footer_logo: this.fb.array([]),\r\n    });\r\n\r\n    this.logoAttach = this.pageForm.get('logo') as FormArray;\r\n    this.footerLogoAttach = this.pageForm.get('footer_logo') as FormArray;\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const pageForm = this.pageForm.getRawValue();\r\n    console.log(pageForm);\r\n    this.fileHeaderLogo.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('logo', file.originalFile);\r\n      }\r\n    });\r\n    this.fileFooterLogo.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('footer_logo', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    // console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n\r\n    this.subscriptions.push(\r\n      this.settingsService.update(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.eventsSubject.next();\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili podešavanja',\r\n          });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  get getSrFormGroup() {\r\n    return <FormGroup>this.pageForm.get('locale.sr');\r\n  }\r\n  get getSocialFormGroup() {\r\n    return <FormGroup>this.pageForm.get('social_links');\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.settingsService.getAll().subscribe((response: any) => {\r\n        console.log(response);\r\n        this.pageData = response;\r\n\r\n        if (response.logo) {\r\n          this.logoAttach.push(\r\n            this.fb.group({\r\n              title: [response.logo.title],\r\n              alt: [response.logo.alt],\r\n              name: [response.logo.name],\r\n            })\r\n          );\r\n          // Show old images\r\n          this.fileHeaderLogo.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${response.logo.name}`,\r\n            fileName: response.logo.name,\r\n          });\r\n        }\r\n\r\n        if (response.footer_logo) {\r\n          this.footerLogoAttach.push(\r\n            this.fb.group({\r\n              title: [response.footer_logo.title],\r\n              alt: [response.footer_logo.alt],\r\n              name: [response.footer_logo.name],\r\n            })\r\n          );\r\n          // Show old images\r\n          this.fileFooterLogo.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${response.footer_logo.name}`,\r\n            fileName: response.footer_logo.name,\r\n          });\r\n        }\r\n\r\n        this.pageData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  patchForm() {\r\n    this.pageForm.patchValue({\r\n      app_name: this.pageData.app_name,\r\n      orders_mail: this.pageData.orders_mail,\r\n      copyright: this.pageData.copyright,\r\n      charset: this.pageData.charset,\r\n      address: this.pageData.address,\r\n      phone: this.pageData.phone,\r\n      mob_phone: this.pageData.mob_phone,\r\n      email: this.pageData.email,\r\n      wd_mon_fri: this.pageData.wd_mon_fri,\r\n      wd_sat: this.pageData.wd_sat,\r\n      wd_sun: this.pageData.wd_sun,\r\n      google_analytics: this.pageData.google_analytics,\r\n      hot_jar: this.pageData.hot_jar,\r\n      google_map: this.pageData.google_map,\r\n      fb_messenger: this.pageData.fb_messenger,\r\n    });\r\n    this.pageForm.get('social_links').patchValue({\r\n      facebook: this.pageData.social_links.facebook,\r\n      twitter: this.pageData.social_links.twitter,\r\n      youtube: this.pageData.social_links.youtube,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./settings-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "SettingsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "SettingsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "getSrFormGroup": {
                    "name": "getSrFormGroup",
                    "getSignature": {
                        "name": "getSrFormGroup",
                        "type": "",
                        "returnType": "",
                        "line": 113
                    }
                },
                "getSocialFormGroup": {
                    "name": "getSocialFormGroup",
                    "getSignature": {
                        "name": "getSocialFormGroup",
                        "type": "",
                        "returnType": "",
                        "line": 116
                    }
                }
            },
            "templateData": "<app-content-layout\r\n  headerType=\"main\"\r\n  headerTitle=\"Podešavanja\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"pageForm\"\r\n  [skeletonLoad]=\"!pageData\"\r\n  (onSubmit)=\"onSubmit()\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"General\">\r\n            <app-form-builder\r\n              [form]=\"pageForm\"\r\n              [fields]=\"fieldsService.generalFields\"\r\n            ></app-form-builder>\r\n\r\n            <div class=\"p-grid p-mt-2\">\r\n              <div class=\"p-col-12 p-sm-6\">\r\n                <div class=\"p-field w-100\">\r\n                  <label>Header logo</label>\r\n                  <app-image-upload\r\n                    [instanceIndex]=\"0\"\r\n                    [fileSize]=\"0.5\"\r\n                    [fileList]=\"fileHeaderLogo\"\r\n                    [controlName]=\"'logo'\"\r\n                    [includeSeo]=\"true\"\r\n                    [chosenFormGroup]=\"pageForm\"\r\n                    [srAttachments]=\"logoAttach\"\r\n                    [maxImages]=\"1\"\r\n                  ></app-image-upload>\r\n                </div>\r\n              </div>\r\n              <div class=\"p-col-12 p-sm-6\">\r\n                <div class=\"p-field w-100\">\r\n                  <label>Footer logo</label>\r\n                  <app-image-upload\r\n                    [instanceIndex]=\"1\"\r\n                    [fileSize]=\"0.5\"\r\n                    [fileList]=\"fileFooterLogo\"\r\n                    [controlName]=\"'footer_logo'\"\r\n                    [includeSeo]=\"true\"\r\n                    [chosenFormGroup]=\"pageForm\"\r\n                    [srAttachments]=\"footerLogoAttach\"\r\n                    [maxImages]=\"1\"\r\n                  ></app-image-upload>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Kontakt\">\r\n            <app-form-builder\r\n              [form]=\"pageForm\"\r\n              [fields]=\"fieldsService.contactFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Skripte\">\r\n            <app-form-builder\r\n              [form]=\"pageForm\"\r\n              [fields]=\"fieldsService.scriptsFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Društvene mreže\">\r\n            <app-form-builder\r\n              [form]=\"getSocialFormGroup\"\r\n              [fields]=\"fieldsService.socialFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-d7dae0ea98bf7704c823ebf2fb1e73ca",
            "file": "src/app/includes/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cmsLogo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "eventsSubject",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "expand",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "innerWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouteInfo[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "collapseMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subject, Subscription } from 'rxjs';\nimport { MenuToggleService } from 'src/app/core/services/menu-toggle.service';\nimport { SettingsService } from 'src/app/core/services/settings.service';\nimport { RouteInfo } from 'src/app/shared/models/route-info';\nimport { environment } from 'src/environments/environment';\nimport { ROUTES } from './sidebar-routes.config';\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss'],\n})\nexport class SidebarComponent implements OnInit, OnDestroy {\n  expand: boolean = false;\n  menuItems: RouteInfo[] = [];\n  subscriptions: Subscription[] = [];\n  cmsLogo: string;\n  mediaUrl = environment.mediaUrl;\n  eventsSubject: Subject<void> = new Subject<void>();\n  innerWidth: number;\n\n  constructor(\n    private settingsService: SettingsService,\n    private menuToggle: MenuToggleService,\n    private router: Router\n    ) {\n\n    }\n\n  ngOnInit(): void {\n    this.menuItems = ROUTES.filter((menuItem) => menuItem);\n\n    this.innerWidth = window.innerWidth;\n    this.expand = this.innerWidth < 500 ? true : false;\n\n    this.subscriptions.push(\n      this.settingsService.getAll().subscribe((response: any) => {\n        if(response.logo){\n          this.cmsLogo = this.mediaUrl + '/' + response.logo.name;\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  collapseMenu() {\n    this.expand = !this.expand;\n    this.menuToggle.changeState(this.expand)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/assets/scss/partials/variables';\r\n@import 'src/assets/scss/partials/mixins';\r\n\r\n\r\n\r\n\r\n\r\n\r\nnav{\r\n  width: 210px;\r\n  background-color: $sidebar-bg;\r\n  height: 100%;\r\n  min-height: 94vh;\r\n  transition: all .4s;\r\n  // overflow: hidden;\r\n  position: relative;\r\n\r\n  @include xl{\r\n    width: 260px;\r\n  }\r\n  @include lg{\r\n    width: 260px;\r\n  }\r\n  @include xs{\r\n    width: 270px;\r\n  }\r\n\r\n  .nav-top-header{\r\n    background-color: #1a1a27;\r\n    margin-bottom: 1rem;\r\n    display: flex;\r\n    align-items: center;\r\n    height: 65px;\r\n  }\r\n\r\n  .mobile-close-menu{\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgb(0 0 0 / 4%);\r\n    position: fixed;\r\n    top: 0px;\r\n    right: -270px;\r\n    z-index: 100;\r\n    opacity: 1;\r\n    visibility: visible;\r\n    transition: all .6s;\r\n    @include xs{\r\n      display: block;\r\n    }\r\n    display: none;\r\n  }\r\n\r\n  .main-logo{\r\n    width: 13%;\r\n    height: auto;\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n    margin-left: 1rem;\r\n    @include xs{\r\n      display: none;\r\n    }\r\n  }\r\n  .sidebar-dropdown-icon{\r\n    margin-left: 6.3rem;\r\n    position: absolute;\r\n    right: .5rem;\r\n  }\r\n\r\n  &.collapsed{\r\n    width: 91px;\r\n    display: flex;\r\n    flex-flow: column;\r\n    align-items: center;\r\n    transition: all .4s;\r\n    @include xs{\r\n      width: 0px;\r\n    }\r\n\r\n    .dark-mode-switch::after{\r\n      display: none;\r\n    }\r\n\r\n    .menu-group-title{\r\n      opacity: 0;\r\n      visibility: hidden;\r\n      transition: all .4s;\r\n    }\r\n    .mobile-close-menu{\r\n      opacity: 0;\r\n      visibility: hidden;\r\n      transition: all .3s;\r\n    }\r\n    .nav-items .nav-item span{\r\n      visibility: hidden;\r\n      opacity: 0;\r\n      transition: all .4s;\r\n    }\r\n    .nav-header{\r\n      visibility: hidden;\r\n      opacity: 0;\r\n      transition: all .4s;\r\n    }\r\n    .nav-subitem{\r\n      padding-left: 2.1rem !important;\r\n    }\r\n    .main-logo{\r\n      margin-left: 38%;\r\n      opacity: 0;\r\n      visibility: hidden;\r\n    }\r\n    .expand{\r\n      transition: all .4s;\r\n      right: 1.7rem;\r\n      span{\r\n        opacity: 0;\r\n        visibility: hidden;\r\n        display: none;\r\n      }\r\n    }\r\n\r\n  }\r\n  .expand{\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    // padding-left: 1.5rem;\r\n    padding-top: 1.75rem;\r\n    position: absolute;\r\n    right: 1rem;\r\n    width: fit-content;\r\n    top: -16px;\r\n    z-index: 250;\r\n\r\n    @include xs{\r\n      top: -28px;\r\n      position: fixed;\r\n      left: 0px;\r\n    }\r\n    span{\r\n      width: 100%;\r\n      margin-left: .5rem;\r\n      opacity: 1;\r\n      visibility: visible;\r\n    }\r\n    .expand-bg{\r\n      width: 40px;\r\n      height: 40px;\r\n      min-width: 40px;\r\n      min-height: 40px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      color: $main-color;\r\n      border-radius: 100px;\r\n      transition: all .4s;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n      cursor: pointer;\r\n\r\n      @include xs{\r\n        width: 55px;\r\n        height: 55px;\r\n        border-radius: 0px;\r\n        background-color: $main-color !important;\r\n      }\r\n\r\n    }\r\n  }\r\n  .nav-header{\r\n    padding: .6rem;\r\n    padding-top: 1.5rem;\r\n    padding-left: 1rem;\r\n    text-transform: uppercase;\r\n    width: 100%;\r\n    visibility: visible;\r\n    opacity: 1;\r\n    transition: all .4s;\r\n  }\r\n  .nav-items{\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n    width: 100%;\r\n\r\n    @include xs{\r\n      padding-top: 3.5rem;\r\n    }\r\n    .menu-group-title{\r\n      text-transform: uppercase;\r\n      color: #4c4e6f;\r\n      font-size: .8rem;\r\n      letter-spacing: 1px;\r\n      padding: 1rem 1rem .2rem 2.1rem;\r\n      transition: all .4s;\r\n    }\r\n    .nav-subitems{\r\n      display: none;\r\n      &.opened{\r\n        display: block;\r\n      }\r\n    }\r\n    .nav-item{\r\n      width: 100%;\r\n      padding: .7rem 1rem .7rem 2.1rem;\r\n      display: flex;\r\n      align-items: center;\r\n      text-decoration: none;\r\n      color: #a2a3b7;\r\n      cursor: pointer;\r\n      position: relative;\r\n\r\n      &.nav-subitem{\r\n        padding-left: 3rem;\r\n        cursor: pointer;\r\n      }\r\n      i{\r\n        margin-right: .8rem;\r\n        color: #494b74;\r\n      }\r\n      span{\r\n        visibility: visible;\r\n        opacity: 1;\r\n        transition: all .4s;\r\n      }\r\n      &.active{\r\n        background-color: $active-item;\r\n        border-left: 3px solid #3699ff;\r\n        color: #fff;\r\n        i{\r\n          color: #3699ff;\r\n        }\r\n      }\r\n      &.active-dropdown{\r\n        background-color: $active-item;\r\n        i{\r\n          color: #3699ff;\r\n        }\r\n      }\r\n      &:hover{\r\n        background-color: darken($active-item, 1%);\r\n        color: #fff;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// ? Darkmode Toggler\r\n::ng-deep{\r\n  .dark-mode-switch{\r\n    // position: absolute;\r\n    position: unset;\r\n    // left: 50%;\r\n    // transform: translate(-50%);\r\n    // bottom: 30px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .switch {\r\n      cursor: pointer;\r\n        opacity: 0;\r\n        position: absolute;\r\n      }\r\n\r\n      .label {\r\n        background: #13131c;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-around;\r\n        padding: 3px;\r\n        border-radius: 50px;\r\n        position: relative;\r\n        width: 55px;\r\n        height: 30px;\r\n        cursor: pointer;\r\n        &.dark {\r\n          background: $main-color;\r\n        }\r\n      }\r\n\r\n      .ball {\r\n        background-color: #fff;\r\n        border-radius: 50%;\r\n        position: absolute;\r\n        top: 4px;\r\n        left: 4px;\r\n        width: 22px;\r\n        height: 22px;\r\n        transition: transform 0.3s linear;\r\n      }\r\n      .switch:checked + .label .ball {\r\n        transform: translateX(25px);\r\n      }\r\n\r\n      .fa-moon {\r\n        color: #fff;\r\n      }\r\n\r\n      .fa-sun {\r\n        color: $warn;\r\n      }\r\n  }\r\n}\r\n\r\n\r\n\r\n// * TOP SIDEBAR\r\n::ng-deep{\r\n  .top-sidebar{\r\n    nav{\r\n      position: fixed !important;\r\n      top: 65px;\r\n      display: flex;\r\n      align-items: center;\r\n      min-height: unset;\r\n      width: 100%;\r\n      z-index: 200;\r\n      height: unset;\r\n      padding: 0px 1.5rem;\r\n\r\n      .sidebar-in-progress span::after{\r\n        display: none;\r\n      }\r\n\r\n      .dark-mode-switch{\r\n        position: unset;\r\n      }\r\n      .nav-items{\r\n        display: flex !important;\r\n        flex-flow: row !important;\r\n        width: 100% !important;\r\n\r\n        .nav-subitems.opened{\r\n          position: absolute;\r\n          background-color: $active-item;\r\n        }\r\n\r\n        .menu-group-title{\r\n          display: none;\r\n        }\r\n\r\n        .nav-item-dropdown{\r\n          min-width: 180px;\r\n        }\r\n        .nav-item{\r\n          font-size: .8rem;\r\n          height: 100%;\r\n          padding: 1rem 1rem !important;\r\n          width: unset !important;\r\n          border-bottom: 3px solid transparent;\r\n          border-top: 3px solid transparent;\r\n          &.active{\r\n            border-left: none !important;\r\n            border-bottom: 3px solid $main-color;\r\n          }\r\n          i{\r\n            font-size: .9rem;\r\n          }\r\n          span{\r\n            font-size: .8rem;\r\n          }\r\n          &.nav-subitem{\r\n            min-width: 180px;\r\n          }\r\n        }\r\n      }\r\n      .nav-top-header{\r\n        display: none !important;\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "settingsService",
                        "type": "SettingsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<nav [ngClass]=\"{ collapsed: expand }\">\r\n  <section class=\"nav-top-header\">\r\n    <img [src]=\"cmsLogo\" alt=\"\" class=\"main-logo\" />\r\n    <a class=\"expand\" (click)=\"collapseMenu()\">\r\n      <div class=\"expand-bg\">\r\n        <!-- <ng-container *ngIf=\"expand; else elseTemplate\">\r\n          <i class=\"pi pi-bars\"></i>\r\n        </ng-container>\r\n        <ng-template #elseTemplate>\r\n          <i class=\"pi pi-bars\"></i>\r\n        </ng-template> -->\r\n        <app-close-icon></app-close-icon>\r\n\r\n      </div>\r\n    </a>\r\n  </section>\r\n\r\n  <div class=\"nav-items\">\r\n    <ng-container *ngFor=\"let menuItem of menuItems\">\r\n      <ng-container *ngIf=\"menuItem.type == 'title'\">\r\n        <span class=\"menu-group-title\"> {{ menuItem.title }} </span>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"menuItem.path\">\r\n        <a\r\n          class=\"nav-item\"\r\n          [routerLink]=\"[menuItem.path]\"\r\n          routerLinkActive=\"active\"\r\n          [pTooltip]=\"menuItem.title\"\r\n          tooltipPosition=\"right\"\r\n          [tooltipDisabled]=\"!expand\"\r\n          [ngClass]=\"{'sidebar-in-progress': menuItem.progress}\"\r\n          (click)=\"innerWidth < 500 ? collapseMenu() : null\"\r\n        >\r\n          <i [class]=\"menuItem.icon\"></i>\r\n          <span> {{ menuItem.title }} </span>\r\n        </a>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"menuItem.type === 'dropdown' \">\r\n        <section class=\"nav-item-dropdown\">\r\n          <a\r\n            class=\"nav-item\"\r\n            [pTooltip]=\"menuItem.title\"\r\n            tooltipPosition=\"right\"\r\n            [tooltipDisabled]=\"!expand\"\r\n            [ngClass]=\"{'active-dropdown': menuItem.opened}\"\r\n            (click)=\"menuItem.opened = !menuItem.opened\"\r\n          >\r\n            <i [class]=\"menuItem.icon\"></i>\r\n            <span> {{ menuItem.title }} </span>\r\n            <ng-container *ngIf=\"menuItem.opened; else iconUp\">\r\n              <i class=\"pi pi-angle-up sidebar-dropdown-icon\"></i>\r\n            </ng-container>\r\n            <ng-template #iconUp>\r\n              <i class=\"pi pi-angle-down sidebar-dropdown-icon\"></i>\r\n            </ng-template>\r\n          </a>\r\n          <div class=\"nav-subitems\" [ngClass]=\"menuItem.opened ? 'opened' : ''\">\r\n            <a\r\n              *ngFor=\"let subItem of menuItem.children\"\r\n              class=\"nav-item nav-subitem\"\r\n              [ngClass]=\"{'sidebar-in-progress': subItem.progress}\"\r\n              [routerLink]=\"[subItem.path]\"\r\n              routerLinkActive=\"active\"\r\n              [pTooltip]=\"subItem.title\"\r\n              tooltipPosition=\"right\"\r\n              [tooltipDisabled]=\"!expand\"\r\n              (click)=\"innerWidth < 500 ? collapseMenu() : null\"\r\n            >\r\n              <i [class]=\"subItem.icon\"></i>\r\n              <span> {{ subItem.title }} </span>\r\n            </a>\r\n          </div>\r\n        </section>\r\n      </ng-container>\r\n    </ng-container>\r\n  </div>\r\n  <div class=\"mobile-close-menu\" (click)=\"collapseMenu()\"></div>\r\n</nav>\r\n\r\n<!-- * Message -->\r\n<p-toast position=\"bottom-right\" key=\"br\"></p-toast>\r\n\r\n<!-- * Warn message -->\r\n<p-toast position=\"bottom-right\" key=\"br-warn\"></p-toast>\r\n\r\n<!-- * Error message -->\r\n<p-toast position=\"bottom-right\" key=\"br-error\"></p-toast>\r\n\r\n<!-- * Confirmation popup -->\r\n<p-confirmPopup styleClass=\"p-shadow-2\"></p-confirmPopup>\r\n"
        },
        {
            "name": "SkeletonComponent",
            "id": "component-SkeletonComponent-abfc7f3746b55516cd9d3dcf5fdf2442",
            "file": "src/app/shared/components/skeleton/skeleton.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-skeleton",
            "styleUrls": [
                "./skeleton.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./skeleton.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-skeleton',\n  templateUrl: './skeleton.component.html',\n  styleUrls: ['./skeleton.component.scss']\n})\nexport class SkeletonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./skeleton.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-grid\">\n  <div class=\"p-col-4\">\n    <div class=\"p-field\">\n      <p-skeleton width=\"60%\" height=\".9rem\" styleClass=\"p-mb-2\"></p-skeleton>\n      <p-skeleton width=\"100%\" height=\"2rem\"></p-skeleton>\n    </div>\n    <div class=\"p-field\">\n      <p-skeleton width=\"60%\" height=\".9rem\" styleClass=\"p-mb-2\"></p-skeleton>\n      <p-skeleton width=\"100%\" height=\"2rem\"></p-skeleton>\n    </div>\n    <div class=\"p-field\">\n      <p-skeleton width=\"60%\" height=\".9rem\" styleClass=\"p-mb-2\"></p-skeleton>\n      <p-skeleton width=\"100%\" height=\"2rem\"></p-skeleton>\n    </div>\n  </div>\n  <div class=\"p-col-4\">\n    <div class=\"p-field\">\n      <p-skeleton width=\"60%\" height=\".9rem\" styleClass=\"p-mb-2\"></p-skeleton>\n      <p-skeleton width=\"100%\" height=\"2rem\"></p-skeleton>\n    </div>\n    <div class=\"p-field\">\n      <p-skeleton width=\"60%\" height=\".9rem\" styleClass=\"p-mb-2\"></p-skeleton>\n      <p-skeleton width=\"100%\" height=\"2rem\"></p-skeleton>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SubcategoriesAddComponent",
            "id": "component-SubcategoriesAddComponent-f1548156010f236cfde0bf050c31553a",
            "file": "src/app/modules/products/subcategories/subcategories-add/subcategories-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subcategories-add",
            "styleUrls": [
                "./subcategories-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subcategories-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addSubCatForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubcategoriesFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { CategoriesService } from 'src/app/core/services/categories.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { SubcategoriesFieldsService } from '../subcategories-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-subcategories-add',\r\n  templateUrl: './subcategories-add.component.html',\r\n  styleUrls: ['./subcategories-add.component.scss'],\r\n})\r\nexport class SubcategoriesAddComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  addSubCatForm: FormGroup;\r\n  fd = new FormData();\r\n  subscriptions: Subscription[] = [];\r\n  categories: {}[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private messService: MessServiceService,\r\n    private categoriesService: CategoriesService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    public fieldsService: SubcategoriesFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Form init\r\n    this.addSubCatForm = this.fb.group({\r\n      parent: ['', Validators.required],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          name: ['', Validators.required],\r\n        }),\r\n        en: this.fb.group({\r\n          name: ['', Validators.required],\r\n        }),\r\n        de: this.fb.group({\r\n          name: ['', Validators.required],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Add subcategory === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const catForm = this.addSubCatForm.getRawValue();\r\n    // catForm.post_status = catForm.post_status ? 1 : 0;\r\n\r\n    this.fd.append('data', JSON.stringify(catForm));\r\n    console.log(this.addSubCatForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.categoriesService.createCategory(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu kategoriju.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.addSubCatForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get categories\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getAllCategoriesNoPagination()\r\n        .subscribe((response: any) => {\r\n          console.log(response);\r\n          response.forEach((category) => {\r\n            this.categories.push({\r\n              name: category.languages[0].translation.name,\r\n              category_id: category.real_id,\r\n            });\r\n          });\r\n          console.log(response);\r\n        })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./subcategories-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "SubcategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "SubcategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"PODKATEGORIJE - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"addSubCatForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-6 p-pb-0\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-6\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Kategorija</label>\r\n          <p-dropdown\r\n            placeholder=\"Izaberi kategoriju\"\r\n            styleClass=\"w-100\"\r\n            [options]=\"categories\"\r\n            formControlName=\"parent\"\r\n            optionValue=\"category_id\"\r\n            optionLabel=\"name\"\r\n          ></p-dropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "SubcategoriesComponent",
            "id": "component-SubcategoriesComponent-205eb86cee24bde1580db9167aa28662",
            "file": "src/app/modules/products/subcategories/subcategories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subcategories",
            "styleUrls": [
                "./subcategories.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subcategories.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiOrNot",
                    "defaultValue": "[\r\n    { label: 'Svi', value: '' },\r\n    { label: 'Promobox', value: '&api=1' },\r\n    { label: 'Custom', value: '&api=0' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "hideFilters",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "paginator",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaginatorApi | any",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "paginatorElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Paginator",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'paginatorElement'"
                        }
                    ]
                },
                {
                    "name": "searchForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "searchInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput', {static: false}"
                        }
                    ]
                },
                {
                    "name": "subcategories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResetSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCurrentPage",
                    "args": [
                        {
                            "name": "currentPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentPage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTable",
                    "args": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Paginator } from 'primeng/paginator';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport { map, debounceTime, distinctUntilChanged } from 'rxjs/operators';\r\nimport { CategoriesService } from 'src/app/core/services/categories.service';\r\nimport { MenuToggleService } from 'src/app/core/services/menu-toggle.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PaginatorApi } from 'src/app/shared/models/paginator';\r\n\r\n@Component({\r\n  selector: 'app-subcategories',\r\n  templateUrl: './subcategories.component.html',\r\n  styleUrls: ['./subcategories.component.scss'],\r\n})\r\nexport class SubcategoriesComponent\r\n  implements OnInit, OnDestroy, AfterViewInit\r\n{\r\n  loading = false;\r\n  subcategories;\r\n  subscriptions: Subscription[] = [];\r\n  paginator: PaginatorApi | any = {};\r\n  searchForm: FormGroup;\r\n  @ViewChild('paginatorElement') paginatorElement: Paginator;\r\n  apiOrNot = [\r\n    { label: 'Svi', value: '' },\r\n    { label: 'Promobox', value: '&api=1' },\r\n    { label: 'Custom', value: '&api=0' },\r\n  ];\r\n  @ViewChild('searchInput', { static: false }) searchInput: ElementRef;\r\n  hideFilters = true;\r\n\r\n  constructor(\r\n    private categoriesService: CategoriesService,\r\n    private messService: MessServiceService,\r\n    private menuToggle: MenuToggleService,\r\n    private fb: FormBuilder,\r\n    private confirmationService: ConfirmationService,\r\n    private cdr: ChangeDetectorRef\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Init search form\r\n    this.searchForm = this.fb.group({\r\n      name: [''],\r\n      apiOrNot: [''],\r\n    });\r\n\r\n    if (window.innerWidth < 500) {\r\n      this.subscriptions.push(\r\n        this.menuToggle.currentState.subscribe((state) => {\r\n          if (state != null) {\r\n            this.hideFilters = true;\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      this.hideFilters = false;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // * Debounce search\r\n    fromEvent(this.searchInput.nativeElement, 'keyup')\r\n      .pipe(\r\n        // get value\r\n        map((event: any) => {\r\n          return event.target.value;\r\n        }),\r\n        // Time in milliseconds between key events\r\n        debounceTime(500),\r\n        // If previous query is diffent from current\r\n        distinctUntilChanged()\r\n        // subscription for response\r\n      )\r\n      .subscribe((text: string) => {\r\n        this.onSearch();\r\n      });\r\n\r\n    this.subscriptions.push(\r\n      this.categoriesService.subcategoriesFilter.subscribe((response) => {\r\n        if (response) {\r\n          this.searchForm.patchValue({\r\n            name: response.name,\r\n            apiOrNot: response.apiOrNot,\r\n          });\r\n          this.onSearch();\r\n        } else {\r\n          // Get all users\r\n          this.updateTable(1);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n    this.saveFilter();\r\n  }\r\n\r\n  // * Search === //\r\n  onSearch() {\r\n    console.log(this.searchForm.getRawValue());\r\n    const searchForm = this.searchForm.getRawValue();\r\n    // Get active users\r\n    this.loading = true;\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getAllSubcategories(\r\n          1,\r\n          `&name=${searchForm.name}${searchForm.apiOrNot}`\r\n        )\r\n        .subscribe((response: PaginatorApi) => {\r\n          this.subcategories = response.data;\r\n          this.paginator = response;\r\n          console.log(response);\r\n          this.updateCurrentPage(1);\r\n\r\n          this.loading = false;\r\n        })\r\n    );\r\n  }\r\n\r\n  // * Change status === //\r\n  onChangeStatus(event, categoryId: number) {\r\n    console.log(event);\r\n    const status = {\r\n      status: event.checked ? 1 : 0,\r\n    };\r\n    this.subscriptions.push(\r\n      this.categoriesService.updateCategoryStatus(categoryId, status).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno menjanje statusa',\r\n            detail: 'Uspešno ste promenili vidljivost podkategorije.',\r\n          });\r\n          // this.updateTable(1);\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, categoryId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete podkategoriju?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.categoriesService.deleteCategory(categoryId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste podkategoriju.',\r\n              });\r\n              this.updateTable(1);\r\n              this.updateCurrentPage(1);\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Helpers === //\r\n  updateTable(pageIndex: number) {\r\n    const searchForm = this.searchForm.getRawValue();\r\n    // Get active users\r\n    this.loading = true;\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getAllSubcategories(\r\n          pageIndex,\r\n          `&name=${searchForm.name}${searchForm.apiOrNot}`\r\n        )\r\n        .subscribe((response: PaginatorApi) => {\r\n          this.subcategories = response.data;\r\n          this.paginator = response;\r\n          console.log(response);\r\n          this.loading = false;\r\n        })\r\n    );\r\n  }\r\n\r\n  onResetSearch() {\r\n    this.searchForm.controls['name'].setValue('');\r\n    this.onSearch();\r\n  }\r\n\r\n  private updateCurrentPage(currentPage: number): void {\r\n    this.paginatorElement.changePage(currentPage - 1);\r\n  }\r\n\r\n  onPageChange(event) {\r\n    this.updateTable(event.page + 1);\r\n  }\r\n\r\n  saveFilter() {\r\n    this.categoriesService.subcategoriesFilter.next(\r\n      this.searchForm.getRawValue()\r\n    );\r\n  }\r\n\r\n  resetFilter() {\r\n    this.searchForm.patchValue({\r\n      name: '',\r\n      apiOrNot: '',\r\n    });\r\n    this.updateTable(1);\r\n  }\r\n\r\n  toggleFilters() {\r\n    this.hideFilters = !this.hideFilters;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./subcategories.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"main\"\r\n  headerTitle=\"PODKATEGORIJE\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!subcategories\"\r\n  [showAddButton]=\"true\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <p-table\r\n            #dt1\r\n            [value]=\"subcategories\"\r\n            dataKey=\"id\"\r\n            [rows]=\"10\"\r\n            [showCurrentPageReport]=\"true\"\r\n            [rowsPerPageOptions]=\"[10, 25, 50]\"\r\n            [loading]=\"loading\"\r\n            styleClass=\"p-datatable-customers p-datatable-gridlines p-datatable-responsive-demo\"\r\n            [paginator]=\"false\"\r\n            currentPageReportTemplate=\"Prikaz od {first}. do {last}. korisnika od ukupno {totalRecords}\"\r\n            [globalFilterFields]=\"['name']\"\r\n          >\r\n            <ng-template pTemplate=\"caption\">\r\n              <form\r\n                class=\"page-control\"\r\n                [formGroup]=\"searchForm\"\r\n                (ngSubmit)=\"onSearch()\"\r\n                [ngClass]=\"{ 'toggle-filters': hideFilters }\"\r\n              >\r\n                <section\r\n                  class=\"filter-dark-bg\"\r\n                  (click)=\"toggleFilters()\"\r\n                ></section>\r\n                <button\r\n                  class=\"close-bar\"\r\n                  type=\"button\"\r\n                  (click)=\"toggleFilters()\"\r\n                >\r\n                  <div class=\"bar\"></div>\r\n                </button>\r\n                <div class=\"input-fields\">\r\n                  <p-selectButton\r\n                    styleClass=\"p-mr-2 filter-item\"\r\n                    (onChange)=\"onSearch()\"\r\n                    [options]=\"apiOrNot\"\r\n                    formControlName=\"apiOrNot\"\r\n                    optionLabel=\"label\"\r\n                    optionValue=\"value\"\r\n                  ></p-selectButton>\r\n                  <div class=\"p-inputgroup w-fit-content filter-item\">\r\n                    <span class=\"p-input-icon-left\">\r\n                      <i class=\"pi pi-search\"></i>\r\n                      <input\r\n                        pInputText\r\n                        type=\"text\"\r\n                        formControlName=\"name\"\r\n                        placeholder=\"Pretraži ime\"\r\n                        class=\"w-100\"\r\n                        #searchInput\r\n                      />\r\n                    </span>\r\n                    <button\r\n                      type=\"button\"\r\n                      (click)=\"onResetSearch()\"\r\n                      pButton\r\n                      icon=\"pi pi-times\"\r\n                      styleClass=\"p-button-warn\"\r\n                    ></button>\r\n                  </div>\r\n                </div>\r\n                <div class=\"filter-buttons\">\r\n                  <button\r\n                    type=\"button\"\r\n                    icon=\"false\"\r\n                    pButton\r\n                    (click)=\"resetFilter()\"\r\n                    pTooltip=\"Resetuj filtere\"\r\n                    tooltipPosition=\"top\"\r\n                    class=\"main-btn only-icon-btn p-mr-1\"\r\n                  >\r\n                    <i class=\"pi pi-refresh\"></i>\r\n                  </button>\r\n                  <button type=\"submit\" pButton class=\"main-btn\">\r\n                    Pretraži <i class=\"pi pi-search\"></i>\r\n                  </button>\r\n                </div>\r\n              </form>\r\n              <button\r\n                class=\"main-btn w-100 toggle-filter-btn\"\r\n                type=\"button\"\r\n                (click)=\"toggleFilters()\"\r\n              >\r\n                Filteri <i class=\"pi pi-search\"></i>\r\n              </button>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"header\">\r\n              <tr>\r\n                <!-- <th style=\"width: 4.5rem\"></th> -->\r\n                <th>\r\n                  <div class=\"p-d-flex p-jc-between p-ai-center\">\r\n                    Naziv podkategorije\r\n                  </div>\r\n                </th>\r\n                <th>\r\n                  <div class=\"p-d-flex p-jc-between p-ai-center\">\r\n                    Naziv kategorije\r\n                  </div>\r\n                </th>\r\n                <th style=\"width: 8rem\">\r\n                  <div class=\"p-text-center\">Status</div>\r\n                </th>\r\n                <th style=\"width: 8rem\">\r\n                  <div class=\"p-d-flex p-jc-between p-ai-center\">Akcija</div>\r\n                </th>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"body\" let-categories>\r\n              <tr>\r\n                <td>\r\n                  <span class=\"p-column-title\">Podkategorija</span>\r\n                  {{ categories.languages[0].translation.name }}\r\n                </td>\r\n                <td>\r\n                  <ng-container *ngIf=\"categories.category\">\r\n                    <span class=\"p-column-title\">Kategorija</span>\r\n                    {{ categories.category.languages[0].translation.name }}\r\n                  </ng-container>\r\n                </td>\r\n                <td>\r\n                  <div class=\"p-d-flex p-ai-center\">\r\n                    <span class=\"p-column-title\">Status</span>\r\n                    <p-inputSwitch\r\n                      [ngModel]=\"categories.active === 1 ? true : false\"\r\n                      (onChange)=\"\r\n                        onChangeStatus($event, categories.category_id)\r\n                      \"\r\n                      [name]=\"categories.languages[0].translation.name + i\"\r\n                    ></p-inputSwitch>\r\n                  </div>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Akcija</span>\r\n                  <ng-container *ngIf=\"categories.from_api !== 1\">\r\n                    <a\r\n                      class=\"second-btn small-btn p-mr-2\"\r\n                      pTooltip=\"Izmeni\"\r\n                      tooltipPosition=\"top\"\r\n                      [routerLink]=\"['edit', categories.category_id]\"\r\n                    >\r\n                      <i class=\"pi pi-pencil\"></i>\r\n                    </a>\r\n                    <button\r\n                      class=\"second-btn small-btn\"\r\n                      type=\"button\"\r\n                      pTooltip=\"Izbriši\"\r\n                      tooltipPosition=\"top\"\r\n                      (click)=\"onDelete($event, categories.category_id)\"\r\n                    >\r\n                      <i class=\"pi pi-trash\"></i>\r\n                    </button>\r\n                  </ng-container>\r\n                </td>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"emptymessage\">\r\n              <tr>\r\n                <td colspan=\"4\">Ni jedna podkategorija nije pronađena.</td>\r\n              </tr>\r\n            </ng-template>\r\n          </p-table>\r\n          <p-paginator\r\n            #paginatorElement\r\n            *ngIf=\"paginator\"\r\n            [first]=\"1\"\r\n            [rows]=\"paginator.per_page\"\r\n            [showJumpToPageDropdown]=\"true\"\r\n            [showPageLinks]=\"true\"\r\n            [totalRecords]=\"paginator.total\"\r\n            (onPageChange)=\"onPageChange($event)\"\r\n            [showPageLinks]=\"false\"\r\n          ></p-paginator>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "SubcategoriesEditComponent",
            "id": "component-SubcategoriesEditComponent-41910b2fa0a3c7636a47a25acff640ec",
            "file": "src/app/modules/products/subcategories/subcategories-edit/subcategories-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subcategories-edit",
            "styleUrls": [
                "./subcategories-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subcategories-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "currentSubcategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubcategoriesFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "subcategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "updateSubCatForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getCurrentSubcategory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { CategoriesService } from 'src/app/core/services/categories.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { SubcategoriesFieldsService } from '../subcategories-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-subcategories-edit',\r\n  templateUrl: './subcategories-edit.component.html',\r\n  styleUrls: ['./subcategories-edit.component.scss'],\r\n})\r\nexport class SubcategoriesEditComponent implements OnInit {\r\n  loading = false;\r\n  updateSubCatForm: FormGroup;\r\n  fd = new FormData();\r\n  subscriptions: Subscription[] = [];\r\n  categories: {}[] = [];\r\n  subcategoryId: number;\r\n  currentSubcategory;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private messService: MessServiceService,\r\n    private categoriesService: CategoriesService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    public fieldsService: SubcategoriesFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get subcategory ID\r\n    this.subcategoryId = +this.route.snapshot.params.id;\r\n\r\n    // Form init\r\n    this.updateSubCatForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['', Validators.required],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          name: ['', Validators.required],\r\n        }),\r\n        en: this.fb.group({\r\n          name: ['', Validators.required],\r\n        }),\r\n        de: this.fb.group({\r\n          name: ['', Validators.required],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get categories for dropdown\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getAllCategoriesNoPagination()\r\n        .subscribe((response: any) => {\r\n          console.log(response, 'DOG');\r\n          response.forEach((category) => {\r\n            this.categories.push({\r\n              name: category.languages[0].translation.name,\r\n              category_id: category.real_id,\r\n            });\r\n          });\r\n          console.log(this.categories);\r\n          this.getCurrentSubcategory();\r\n        })\r\n    );\r\n  }\r\n\r\n  // * Edit subcategory === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const catForm = this.updateSubCatForm.getRawValue();\r\n    // catForm.post_status = catForm.post_status ? 1 : 0;\r\n\r\n    this.fd.append('data', JSON.stringify(catForm));\r\n    console.log(this.updateSubCatForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.categoriesService.createCategory(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste izmenili kategoriju.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.updateSubCatForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  private getCurrentSubcategory() {\r\n    // Get current subcategory\r\n    this.subscriptions.push(\r\n      this.categoriesService\r\n        .getOneCategory(this.subcategoryId)\r\n        .subscribe((response: any) => {\r\n          console.log(response);\r\n          this.currentSubcategory = response;\r\n          this.updateSubCatForm.patchValue({\r\n            id: this.subcategoryId,\r\n            parent: response.parent,\r\n          });\r\n          this.getLangFormGroup('sr').patchValue({\r\n            name: response.languages[0].translation.name,\r\n          });\r\n          this.getLangFormGroup('en').patchValue({\r\n            name: response.languages[1].translation.name,\r\n          });\r\n          this.getLangFormGroup('de').patchValue({\r\n            name: response.languages[2].translation.name,\r\n          });\r\n        })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./subcategories-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "SubcategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoriesService",
                        "type": "CategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "SubcategoriesFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"PODKATEGORIJE - Dodaj\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!currentSubcategory\"\r\n  [formGroup]=\"updateSubCatForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-6 p-pb-0\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-6\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Kategorija</label>\r\n          <p-dropdown\r\n            placeholder=\"Izaberi kategoriju\"\r\n            styleClass=\"w-100\"\r\n            [options]=\"categories\"\r\n            formControlName=\"parent\"\r\n            optionValue=\"category_id\"\r\n            optionLabel=\"name\"\r\n          ></p-dropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "TeamAddComponent",
            "id": "component-TeamAddComponent-4f83993e832589d55203f02b6769e102",
            "file": "src/app/modules/sections/team/team-add/team-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-team-add",
            "styleUrls": [
                "./team-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TeamFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { TeamFieldsService } from '../team-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-team-add',\r\n  templateUrl: './team-add.component.html',\r\n  styleUrls: ['./team-add.component.scss'],\r\n})\r\nexport class TeamAddComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: TeamFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      parent: ['16'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          name: ['', Validators.required],\r\n          role: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          name: [''],\r\n          role: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          name: [''],\r\n          role: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.srAttachments = this.postForm.get(\r\n      'locale.sr.attachments'\r\n    ) as FormArray;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi blog post.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  get getSrFormGroup() {\r\n    return <FormGroup>this.postForm.get('locale.sr');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./team-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "TeamFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "TeamFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "getSrFormGroup": {
                    "name": "getSrFormGroup",
                    "getSignature": {
                        "name": "getSrFormGroup",
                        "type": "",
                        "returnType": "",
                        "line": 98
                    }
                }
            },
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"ČLANOVI TIMA - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content [formGroup]=\"getSrFormGroup\">\r\n    <app-form-builder\r\n      [form]=\"getSrFormGroup\"\r\n      [fields]=\"fieldsService.mainFields\"\r\n    ></app-form-builder>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getSrFormGroup\"\r\n            [srAttachments]=\"srAttachments\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "TeamComponent",
            "id": "component-TeamComponent-0a31d007fe088d09d179bab39d8d22e5",
            "file": "src/app/modules/sections/team/team.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-team",
            "styleUrls": [
                "./team.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "environment",
                    "defaultValue": "environment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "teamMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-team',\r\n  templateUrl: './team.component.html',\r\n  styleUrls: ['./team.component.scss'],\r\n})\r\nexport class TeamComponent implements OnInit, OnDestroy {\r\n  teamMembers;\r\n  postForm: FormGroup;\r\n  postData;\r\n  loading = false;\r\n  postId: number;\r\n  subscriptions: Subscription[] = [];\r\n  environment = environment;\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData: ReorderData[] = [];\r\n\r\n  constructor(\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private confirmationService: ConfirmationService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.postId = +this.route.snapshot.params.id;\r\n\r\n    // Create page form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      post_type: ['page'],\r\n      post_status: [''],\r\n      post_name: ['home'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: [''],\r\n          slug: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete člana tima?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste člana tima.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Helpers === //\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        this.teamMembers = response.posts;\r\n        // Add to list for order\r\n        if (response.posts) {\r\n          this.teamMembers.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.name,\r\n              subtitle: element.locale.sr.role,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n              image: element.locale.sr.attachments\r\n                ? element.locale.sr.attachments[0]?.name\r\n                : null,\r\n            });\r\n          });\r\n        }\r\n        this.loading = false;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./team.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"ČLANOVI TIMA\"\r\n  [backPath]=\"['./../../']\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  [showAddButton]=\"true\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Salajder\">\r\n            <p-panel header=\"Svi slajdovi\">\r\n              <app-post-reorder\r\n                [arrayForOrder]=\"postOrder\"\r\n                [orderItems]=\"reorderData\"\r\n                (itemDeleted)=\"updatePageView()\"\r\n              >\r\n              </app-post-reorder>\r\n            </p-panel>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "TeamEditComponent",
            "id": "component-TeamEditComponent-4c1943f9a9564665e0dcabd6ab637b1b",
            "file": "src/app/modules/sections/team/team-edit/team-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-team-edit",
            "styleUrls": [
                "./team-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TeamFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { TeamFieldsService } from '../team-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-team-edit',\r\n  templateUrl: './team-edit.component.html',\r\n  styleUrls: ['./team-edit.component.scss'],\r\n})\r\nexport class TeamEditComponent implements OnInit {\r\n  loading = false;\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  postId: number;\r\n  postData;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: TeamFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get post ID\r\n    this.postId = +this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['16'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          name: [''],\r\n          role: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          name: [''],\r\n          role: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          name: [''],\r\n          role: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.srAttachments = this.postForm.get(\r\n      'locale.sr.attachments'\r\n    ) as FormArray;\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        response.locale.sr.attachments.forEach((attachment) => {\r\n          this.srAttachments.push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n\r\n          // Show old images\r\n          this.fileList.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n          });\r\n        });\r\n\r\n        this.patchForm();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novi blog post.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  get getSrFormGroup() {\r\n    return <FormGroup>this.postForm.get('locale.sr');\r\n  }\r\n\r\n  patchForm() {\r\n    this.getSrFormGroup.patchValue({\r\n      name: this.postData.locale.sr.name,\r\n      role: this.postData.locale.sr.role,\r\n    });\r\n\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n      post_status: this.postData.post_status,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./team-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "TeamFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "TeamFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getSrFormGroup": {
                    "name": "getSrFormGroup",
                    "getSignature": {
                        "name": "getSrFormGroup",
                        "type": "",
                        "returnType": "",
                        "line": 132
                    }
                }
            },
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"ČLANOVI TIMA - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"post\"\r\n>\r\n  <ng-container content>\r\n    <app-form-builder\r\n      [form]=\"getSrFormGroup\"\r\n      [fields]=\"fieldsService.mainFields\"\r\n    ></app-form-builder>\r\n\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field w-100\">\r\n          <label>Slika</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getSrFormGroup\"\r\n            [srAttachments]=\"srAttachments\"\r\n            [maxImages]=\"1\"\r\n          ></app-image-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "TemplateOneAddComponent",
            "id": "component-TemplateOneAddComponent-19856821a0991972b47fe4e6c2175f2a",
            "file": "src/app/modules/page-templates/template-one/template-one-add/template-one-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-template-one-add",
            "styleUrls": [
                "./template-one-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./template-one-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateOneFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { TemplateOneFieldsService } from '../template-one-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-template-one-add',\r\n  templateUrl: './template-one-add.component.html',\r\n  styleUrls: ['./template-one-add.component.scss'],\r\n})\r\nexport class TemplateOneAddComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  pageForm: FormGroup;\r\n  pageId: number;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    public fieldsService: TemplateOneFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      post_type: ['custom_page'],\r\n      post_status: [1],\r\n      post_template: ['template-1'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', [Validators.required, Validators.maxLength(40)]],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: ['', Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: ['', Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.pageForm.getRawValue();\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.pageForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu stranicu.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.pageForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./template-one-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"GENERAL\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"pageForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-10\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n      <div class=\"p-col-12 p-sm-2\">\r\n        <p-panel header=\"Template\" styleClass=\"p-mt-6 p-sm-mt-0\">\r\n          <div class=\"p-d-flex p-ai-center p-flex-column p-jc-center\">\r\n            <img src=\"assets/images/template-icons/template-1.png\" />\r\n          </div>\r\n        </p-panel>\r\n      </div>\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Izaberi slike</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"10\"\r\n          >\r\n          </app-image-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "TemplateOneEditComponent",
            "id": "component-TemplateOneEditComponent-cdac1e0dca1f2d8459e3de4e13145aac",
            "file": "src/app/modules/page-templates/template-one/template-one-edit/template-one-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-template-one-edit",
            "styleUrls": [
                "./template-one-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./template-one-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateOneFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "websiteUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangePageStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangAttachments",
                    "args": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormArray, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { TemplateOneFieldsService } from '../template-one-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-template-one-edit',\r\n  templateUrl: './template-one-edit.component.html',\r\n  styleUrls: ['./template-one-edit.component.scss'],\r\n})\r\nexport class TemplateOneEditComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  pageForm: FormGroup;\r\n  pageId: number;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  websiteUrl = environment.apiUrl;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    public fieldsService: TemplateOneFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      id: [],\r\n      post_type: ['custom_page'],\r\n      post_status: [1],\r\n      post_template: ['template-1'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', [Validators.required, Validators.maxLength(40)]],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: ['', Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: ['', Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.pageId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.pageData = response;\r\n        this.websiteUrl = `${this.websiteUrl}/${response.locale.sr.slug}`;\r\n\r\n        response.locale.sr.attachments.forEach((attachment) => {\r\n          this.getLangAttachments('sr').push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n\r\n          // Show old images\r\n          this.fileList.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n            fileName: attachment.name,\r\n          });\r\n        });\r\n\r\n        this.patchLangAttachments(response, 'en');\r\n        this.patchLangAttachments(response, 'de');\r\n\r\n        // this.pageData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.pageForm.getRawValue();\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(postForm);\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu stranicu.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.pageForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  patchLangAttachments(attachArray, langCode: string) {\r\n    attachArray.locale[langCode].attachments.forEach((attachment) => {\r\n      this.getLangAttachments(langCode).push(\r\n        this.fb.group({\r\n          title: [attachment.title],\r\n          alt: [attachment.alt],\r\n          name: [attachment.name],\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  onChangePageStatus(event, pageId: number) {\r\n    console.log(event);\r\n    const status = {\r\n      status: event.checked ? 1 : 0,\r\n    };\r\n    this.subscriptions.push(\r\n      this.postsService.updatePostStatus(pageId, status).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno menjanje statusa',\r\n            detail: 'Uspešno ste promenili vidljivost stranice.',\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.pageData.locale[langCode].title,\r\n      content: this.pageData.locale[langCode].content,\r\n      slug: this.pageData.locale[langCode].slug,\r\n      meta_title: this.pageData.locale[langCode].meta_title,\r\n      meta_description: this.pageData.locale[langCode].meta_description,\r\n      meta_keywords: this.pageData.locale[langCode].meta_keywords,\r\n    });\r\n\r\n    this.pageForm.patchValue({\r\n      id: this.pageId,\r\n      post_status: this.pageData.post_status,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./template-one-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"GENERAL\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"pageForm\"\r\n  [skeletonLoad]=\"!pageData\"\r\n  [pageData]=\"pageData\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"true\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-10\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n      <div class=\"p-col-12 p-sm-2\">\r\n        <p-panel header=\"Template\" styleClass=\"p-mt-6 p-sm-mt-0\">\r\n          <div class=\"p-d-flex p-ai-center p-flex-column p-jc-center\">\r\n            <img src=\"assets/images/template-icons/template-1.png\" />\r\n          </div>\r\n        </p-panel>\r\n      </div>\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Izaberi slike</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"10\"\r\n          >\r\n          </app-image-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "TemplateReferenceAddComponent",
            "id": "component-TemplateReferenceAddComponent-37781020a9081d605873048e7e820b2a",
            "file": "src/app/modules/page-templates/template-reference/template-reference-add/template-reference-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-template-reference-add",
            "styleUrls": [
                "./template-reference-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./template-reference-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateOneFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { TemplateOneFieldsService } from '../../template-one/template-one-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-template-reference-add',\r\n  templateUrl: './template-reference-add.component.html',\r\n  styleUrls: ['./template-reference-add.component.scss'],\r\n})\r\nexport class TemplateReferenceAddComponent implements OnInit {\r\n  loading = false;\r\n  pageForm: FormGroup;\r\n  pageId: number;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    public fieldsService: TemplateOneFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      post_type: ['custom_page'],\r\n      post_status: [1],\r\n      post_template: ['template-reference'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', [Validators.required, Validators.maxLength(40)]],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: ['', Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: ['', Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.pageForm.getRawValue();\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.pageForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu stranicu.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.pageForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./template-reference-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-block-ui [loading]=\"loading\">\r\n  Obrada zahteva u toku. <br />\r\n  Molimo sačekajte.\r\n</app-block-ui>\r\n\r\n<form [formGroup]=\"pageForm\" (ngSubmit)=\"onSubmit()\" >\r\n  <div class=\"main-card\">\r\n    <div class=\"card-header\">\r\n      <a class=\"main-btn back-btn\" [routerLink]=\"['./../../']\"><i class=\"pi pi-angle-left p-m-0\"></i></a>\r\n      <button\r\n      class=\"main-btn\"\r\n      type=\"submit\"\r\n      [ngClass]=\"{disabled:!pageForm.valid}\"\r\n      [disabled]=\"!pageForm.valid\"\r\n      >Snimi <i class=\"pi pi-save\"></i></button>\r\n    </div>\r\n    <div class=\"p-d-flex p-jc-between card-title-section\">\r\n      <h2 class=\"card-title\">GENERAL</h2>\r\n      <div class=\"p-field p-flex-row p-ai-center p-m-0\" *ngIf=\"pageData\">\r\n        <label>Objavljena</label>\r\n        <p-inputSwitch styleClass=\"p-ml-2\" [ngModelOptions]=\"{standalone: true}\" [ngModel]=\"pageData.post_status === 1 ? true : false\" (onChange)=\"onChangePageStatus($event, pageId)\" [name]=\"pageData.post_name\"></p-inputSwitch>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card-body\">\r\n      <div class=\"p-grid\">\r\n        <div class=\"p-col-12 p-sm-10\">\r\n          <p-tabView>\r\n            <p-tabPanel header=\"Srpski\">\r\n               <app-form-builder [form]=\"getLangFormGroup('sr')\" [fields]=\"fieldsService.mainFields\"></app-form-builder>\r\n            </p-tabPanel>\r\n            <p-tabPanel header=\"Engleski\">\r\n              <app-form-builder [form]=\"getLangFormGroup('en')\" [fields]=\"fieldsService.mainFields\"></app-form-builder>\r\n            </p-tabPanel>\r\n            <p-tabPanel header=\"Nemački\">\r\n              <app-form-builder [form]=\"getLangFormGroup('de')\" [fields]=\"fieldsService.mainFields\"></app-form-builder>\r\n            </p-tabPanel>\r\n          </p-tabView>\r\n        </div>\r\n        <div class=\"p-col-12 p-sm-2\">\r\n          <p-panel header=\"Template\" styleClass=\"p-sm-mt-0\">\r\n            <div class=\"p-d-flex p-ai-center p-flex-column p-jc-center\">\r\n              <img src=\"assets/images/template-icons/template-reference.png\">\r\n            </div>\r\n          </p-panel>\r\n        </div>\r\n        <div class=\"p-col-12\">\r\n          <div class=\"p-field\">\r\n            <label>Izaberi logo</label>\r\n            <app-reference-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"999\">\r\n            </app-reference-upload>\r\n          </div>\r\n        </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n</form>\r\n"
        },
        {
            "name": "TemplateReferenceComponent",
            "id": "component-TemplateReferenceComponent-0c8328ce01ecfa7178e040caa9081a26",
            "file": "src/app/modules/page-templates/template-reference/template-reference.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-template-reference",
            "styleUrls": [
                "./template-reference.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./template-reference.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-template-reference',\n  templateUrl: './template-reference.component.html',\n  styleUrls: ['./template-reference.component.scss']\n})\nexport class TemplateReferenceComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./template-reference.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>template-reference works!</p>\n"
        },
        {
            "name": "TemplateReferenceEditComponent",
            "id": "component-TemplateReferenceEditComponent-3009a43fc63ed3f17b28bc3ea972d5f1",
            "file": "src/app/modules/page-templates/template-reference/template-reference-edit/template-reference-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-template-reference-edit",
            "styleUrls": [
                "./template-reference-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./template-reference-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateOneFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "referenceOp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "websiteUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangAttachments",
                    "args": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { TemplateOneFieldsService } from '../../template-one/template-one-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-template-reference-edit',\r\n  templateUrl: './template-reference-edit.component.html',\r\n  styleUrls: ['./template-reference-edit.component.scss'],\r\n})\r\nexport class TemplateReferenceEditComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  pageForm: FormGroup;\r\n  pageId: number;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  websiteUrl = environment.apiUrl;\r\n  referenceOp;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    public fieldsService: TemplateOneFieldsService\r\n  ) {}\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      post_type: ['custom_page'],\r\n      post_status: [1],\r\n      post_template: ['template-reference'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', [Validators.required, Validators.maxLength(40)]],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: ['', Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: ['', Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.pageId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.pageData = response;\r\n        this.websiteUrl = `${this.websiteUrl}/${response.locale.sr.slug}`;\r\n\r\n        response.locale.sr.attachments.forEach((attachment) => {\r\n          this.getLangAttachments('sr').push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n\r\n          // Show old images\r\n          this.fileList.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n            fileName: attachment.name,\r\n          });\r\n        });\r\n\r\n        this.patchLangAttachments(response, 'en');\r\n        this.patchLangAttachments(response, 'de');\r\n\r\n        // this.pageData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.pageForm.getRawValue();\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.pageForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu stranicu.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.pageForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  patchLangAttachments(attachArray, langCode: string) {\r\n    attachArray.locale[langCode].attachments.forEach((attachment) => {\r\n      this.getLangAttachments(langCode).push(\r\n        this.fb.group({\r\n          title: [attachment.title],\r\n          alt: [attachment.alt],\r\n          name: [attachment.name],\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.pageData.locale[langCode].title,\r\n      content: this.pageData.locale[langCode].content,\r\n      slug: this.pageData.locale[langCode].slug,\r\n      meta_title: this.pageData.locale[langCode].meta_title,\r\n      meta_description: this.pageData.locale[langCode].meta_description,\r\n      meta_keywords: this.pageData.locale[langCode].meta_keywords,\r\n    });\r\n\r\n    this.pageForm.patchValue({\r\n      id: this.pageId,\r\n      post_status: this.pageData.post_status,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./template-reference-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-block-ui [loading]=\"loading\">\r\n  Obrada zahteva u toku. <br />\r\n  Molimo sačekajte.\r\n</app-block-ui>\r\n\r\n<form [formGroup]=\"pageForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"main-card\">\r\n    <div class=\"card-header\">\r\n      <a class=\"main-btn back-btn\" [routerLink]=\"['./../../']\"\r\n        ><i class=\"pi pi-angle-left p-m-0\"></i\r\n      ></a>\r\n      <section class=\"p-d-flex p-ai-center\">\r\n        <a\r\n          [href]=\"websiteUrl\"\r\n          target=\"_blank\"\r\n          class=\"main-btn main-btn-outlined p-mr-2\"\r\n        >\r\n          Pregledaj\r\n          <i class=\"pi pi-reply\"></i>\r\n        </a>\r\n        <button\r\n          class=\"main-btn\"\r\n          type=\"submit\"\r\n          [ngClass]=\"{ disabled: !pageForm.valid }\"\r\n          [disabled]=\"!pageForm.valid\"\r\n        >\r\n          Snimi <i class=\"pi pi-save\"></i>\r\n        </button>\r\n      </section>\r\n    </div>\r\n    <div class=\"p-d-flex p-jc-between card-title-section\">\r\n      <h2 class=\"card-title\">GENERAL</h2>\r\n      <div class=\"p-field p-flex-row p-ai-center p-m-0\" *ngIf=\"pageData\">\r\n        <label>Objavljena</label>\r\n        <p-inputSwitch\r\n          styleClass=\"p-ml-2\"\r\n          [ngModelOptions]=\"{ standalone: true }\"\r\n          [ngModel]=\"pageData.post_status === 1 ? true : false\"\r\n          (onChange)=\"onChangePageStatus($event, pageId)\"\r\n          [name]=\"pageData.post_name\"\r\n        ></p-inputSwitch>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card-body\">\r\n      <div class=\"p-grid\">\r\n        <div class=\"p-col-12 p-sm-10\">\r\n          <p-tabView>\r\n            <p-tabPanel header=\"Srpski\">\r\n              <app-form-builder\r\n                [form]=\"getLangFormGroup('sr')\"\r\n                [fields]=\"fieldsService.mainFields\"\r\n              ></app-form-builder>\r\n            </p-tabPanel>\r\n            <p-tabPanel header=\"Engleski\">\r\n              <app-form-builder\r\n                [form]=\"getLangFormGroup('en')\"\r\n                [fields]=\"fieldsService.mainFields\"\r\n              ></app-form-builder>\r\n            </p-tabPanel>\r\n            <p-tabPanel header=\"Nemački\">\r\n              <app-form-builder\r\n                [form]=\"getLangFormGroup('de')\"\r\n                [fields]=\"fieldsService.mainFields\"\r\n              ></app-form-builder>\r\n            </p-tabPanel>\r\n          </p-tabView>\r\n        </div>\r\n        <div class=\"p-col-12 p-sm-2\">\r\n          <p-panel header=\"Template\" styleClass=\"p-sm-mt-0\">\r\n            <div class=\"p-d-flex p-ai-center p-flex-column p-jc-center\">\r\n              <img src=\"assets/images/template-icons/template-reference.png\" />\r\n            </div>\r\n          </p-panel>\r\n        </div>\r\n        <div class=\"p-col-12\">\r\n          <div class=\"p-field\">\r\n            <label>Izaberi logo</label>\r\n            <app-reference-upload\r\n              [fileList]=\"fileList\"\r\n              [includeSeo]=\"true\"\r\n              [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n              [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n              [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n              [srAttachments]=\"getLangAttachments('sr')\"\r\n              [enAttachments]=\"getLangAttachments('en')\"\r\n              [deAttachments]=\"getLangAttachments('de')\"\r\n              [maxImages]=\"999\"\r\n              [options]=\"{\r\n                chosenFormGroup: getLangFormGroup('sr'),\r\n                chosenFormGroupEn: getLangFormGroup('en'),\r\n                chosenFormGroupDe: getLangFormGroup('de')\r\n              }\"\r\n            >\r\n            </app-reference-upload>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "TemplateThreeAddComponent",
            "id": "component-TemplateThreeAddComponent-8d43da72779af8878e460cd7879d157d",
            "file": "src/app/modules/page-templates/template-three/template-three-add/template-three-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-template-three-add",
            "styleUrls": [
                "./template-three-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./template-three-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateOneFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { TemplateOneFieldsService } from '../../template-one/template-one-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-template-three-add',\r\n  templateUrl: './template-three-add.component.html',\r\n  styleUrls: ['./template-three-add.component.scss'],\r\n})\r\nexport class TemplateThreeAddComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  pageForm: FormGroup;\r\n  pageId: number;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fd = new FormData();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    public fieldsService: TemplateOneFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      post_type: ['custom_page'],\r\n      post_status: [1],\r\n      post_template: ['template-3'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', [Validators.required,Validators.maxLength(40)]],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: ['',Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: ['',Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n        }),\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.pageForm.getRawValue();\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.pageForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu stranicu.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./template-three-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"GENERAL\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"pageForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-10\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n      <div class=\"p-col-12 p-sm-2\">\r\n        <p-panel header=\"Template\" styleClass=\"p-mt-6 p-sm-mt-0\">\r\n          <div class=\"p-d-flex p-ai-center p-flex-column p-jc-center\">\r\n            <img src=\"assets/images/template-icons/template-3.png\" />\r\n          </div>\r\n        </p-panel>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "TemplateThreeEditComponent",
            "id": "component-TemplateThreeEditComponent-cc1dc63e3482c469bfbaea47dc3b3ad2",
            "file": "src/app/modules/page-templates/template-three/template-three-edit/template-three-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-template-three-edit",
            "styleUrls": [
                "./template-three-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./template-three-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateOneFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "websiteUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangePageStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { environment } from 'src/environments/environment';\r\nimport { TemplateOneFieldsService } from '../../template-one/template-one-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-template-three-edit',\r\n  templateUrl: './template-three-edit.component.html',\r\n  styleUrls: ['./template-three-edit.component.scss'],\r\n})\r\nexport class TemplateThreeEditComponent implements OnInit {\r\n  loading = false;\r\n  pageForm: FormGroup;\r\n  pageId: number;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fd = new FormData();\r\n  websiteUrl = environment.apiUrl;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    public fieldsService: TemplateOneFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      id: [],\r\n      post_type: ['custom_page'],\r\n      post_status: [1],\r\n      post_template: ['template-3'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', [Validators.required, Validators.maxLength(40)]],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: ['', Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: ['', Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.pageId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.pageData = response;\r\n        this.websiteUrl = `${this.websiteUrl}/${response.locale.sr.slug}`;\r\n\r\n        // this.pageData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.pageForm.getRawValue();\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(postForm);\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu stranicu.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  onChangePageStatus(event, pageId: number) {\r\n    console.log(event);\r\n    const status = {\r\n      status: event.checked ? 1 : 0,\r\n    };\r\n    this.subscriptions.push(\r\n      this.postsService.updatePostStatus(pageId, status).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno menjanje statusa',\r\n            detail: 'Uspešno ste promenili vidljivost stranice.',\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.pageData.locale[langCode].title,\r\n      content: this.pageData.locale[langCode].content,\r\n      slug: this.pageData.locale[langCode].slug,\r\n      meta_title: this.pageData.locale[langCode].meta_title,\r\n      meta_description: this.pageData.locale[langCode].meta_description,\r\n      meta_keywords: this.pageData.locale[langCode].meta_keywords,\r\n    });\r\n\r\n    this.pageForm.patchValue({\r\n      id: this.pageId,\r\n      post_status: this.pageData.post_status,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./template-three-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"GENERAL\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"pageForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [pageData]=\"pageData\"\r\n  [skeletonLoad]=\"!pageData\"\r\n  [showPreviewButton]=\"true\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-10\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n      <div class=\"p-col-12 p-sm-2\">\r\n        <p-panel header=\"Template\" styleClass=\"p-mt-6 p-sm-mt-0\">\r\n          <div class=\"p-d-flex p-ai-center p-flex-column p-jc-center\">\r\n            <img src=\"assets/images/template-icons/template-3.png\" />\r\n          </div>\r\n        </p-panel>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "TemplateTwoAddComponent",
            "id": "component-TemplateTwoAddComponent-e858c8eb429572040a334d8960fe1a05",
            "file": "src/app/modules/page-templates/template-two/template-two-add/template-two-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-template-two-add",
            "styleUrls": [
                "./template-two-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./template-two-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateOneFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormArray, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { TemplateOneFieldsService } from '../../template-one/template-one-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-template-two-add',\r\n  templateUrl: './template-two-add.component.html',\r\n  styleUrls: ['./template-two-add.component.scss'],\r\n})\r\nexport class TemplateTwoAddComponent implements OnInit, OnDestroy {\r\n  loading = false;\r\n  pageForm: FormGroup;\r\n  pageId: number;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    public fieldsService: TemplateOneFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      post_type: ['custom_page'],\r\n      post_status: [1],\r\n      post_template: ['template-2'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', [Validators.required,Validators.maxLength(40)]],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: ['',Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: ['',Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.pageForm.getRawValue();\r\n    this.fileList.forEach((file) => {\r\n      this.fd.append('attachments[]', file.originalFile);\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.pageForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu stranicu.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.pageForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./template-two-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"GENERAL\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"pageForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"false\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-10\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n      <div class=\"p-col-12 p-sm-2\">\r\n        <p-panel header=\"Template\" styleClass=\"p-mt-6 p-sm-mt-0\">\r\n          <div class=\"p-d-flex p-ai-center p-flex-column p-jc-center\">\r\n            <img src=\"assets/images/template-icons/template-2.png\" />\r\n          </div>\r\n        </p-panel>\r\n      </div>\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Izaberi slike</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"10\"\r\n          >\r\n          </app-image-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "TemplateTwoEditComponent",
            "id": "component-TemplateTwoEditComponent-d39481ea5e5103fe82870e18c21ec5ac",
            "file": "src/app/modules/page-templates/template-two/template-two-edit/template-two-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-template-two-edit",
            "styleUrls": [
                "./template-two-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./template-two-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateOneFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pageData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "pageForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "pageId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "websiteUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangePageStatus",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangAttachments",
                    "args": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "attachArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormArray, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { environment } from 'src/environments/environment';\r\nimport { TemplateOneFieldsService } from '../../template-one/template-one-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-template-two-edit',\r\n  templateUrl: './template-two-edit.component.html',\r\n  styleUrls: ['./template-two-edit.component.scss'],\r\n})\r\nexport class TemplateTwoEditComponent implements OnInit {\r\n  loading = false;\r\n  pageForm: FormGroup;\r\n  pageId: number;\r\n  pageData;\r\n  subscriptions: Subscription[] = [];\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  websiteUrl = environment.apiUrl;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    public fieldsService: TemplateOneFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.pageId = +this.route.snapshot.params.id;\r\n\r\n    // Create page form\r\n    this.pageForm = this.fb.group({\r\n      id: [],\r\n      post_type: ['custom_page'],\r\n      post_status: [1],\r\n      post_template: ['template-2'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: ['', [Validators.required, Validators.maxLength(40)]],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        en: this.fb.group({\r\n          title: ['', Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n        de: this.fb.group({\r\n          title: ['', Validators.maxLength(40)],\r\n          slug: [''],\r\n          content: [''],\r\n          meta_title: [''],\r\n          meta_keywords: [''],\r\n          meta_description: [''],\r\n          attachments: this.fb.array([]),\r\n        }),\r\n      }),\r\n    });\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.pageId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.pageData = response;\r\n        this.websiteUrl = `${this.websiteUrl}/${response.locale.sr.slug}`;\r\n\r\n        response.locale.sr.attachments.forEach((attachment) => {\r\n          this.getLangAttachments('sr').push(\r\n            this.fb.group({\r\n              title: [attachment.title],\r\n              alt: [attachment.alt],\r\n              name: [attachment.name],\r\n            })\r\n          );\r\n\r\n          // Show old images\r\n          this.fileList.push({\r\n            originalFile: null,\r\n            imageLocalUrl: `${environment.mediaUrl}/${attachment.name}`,\r\n            fileName: attachment.name,\r\n          });\r\n        });\r\n\r\n        this.patchLangAttachments(response, 'en');\r\n        this.patchLangAttachments(response, 'de');\r\n\r\n        // this.pageData.post_status = response.post_status === 1 ? true : false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.pageForm.getRawValue();\r\n    this.fileList.forEach((file) => {\r\n      if (file.originalFile != null) {\r\n        this.fd.append('attachments[]', file.originalFile);\r\n      }\r\n    });\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(postForm);\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu stranicu.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.pageForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.pageForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  patchLangAttachments(attachArray, langCode: string) {\r\n    attachArray.locale[langCode].attachments.forEach((attachment) => {\r\n      this.getLangAttachments(langCode).push(\r\n        this.fb.group({\r\n          title: [attachment.title],\r\n          alt: [attachment.alt],\r\n          name: [attachment.name],\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  onChangePageStatus(event, pageId: number) {\r\n    console.log(event);\r\n    const status = {\r\n      status: event.checked ? 1 : 0,\r\n    };\r\n    this.subscriptions.push(\r\n      this.postsService.updatePostStatus(pageId, status).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno menjanje statusa',\r\n            detail: 'Uspešno ste promenili vidljivost stranice.',\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.pageData.locale[langCode].title,\r\n      content: this.pageData.locale[langCode].content,\r\n      slug: this.pageData.locale[langCode].slug,\r\n      meta_title: this.pageData.locale[langCode].meta_title,\r\n      meta_description: this.pageData.locale[langCode].meta_description,\r\n      meta_keywords: this.pageData.locale[langCode].meta_keywords,\r\n    });\r\n\r\n    this.pageForm.patchValue({\r\n      id: this.pageId,\r\n      post_status: this.pageData.post_status,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./template-two-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "TemplateOneFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"GENERAL\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"pageForm\"\r\n  [skeletonLoad]=\"!pageData\"\r\n  [pageData]=\"pageData\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showPreviewButton]=\"true\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12 p-sm-10\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Srpski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('sr')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Engleski\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('en')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Nemački\">\r\n            <app-form-builder\r\n              [form]=\"getLangFormGroup('de')\"\r\n              [fields]=\"fieldsService.mainFields\"\r\n            ></app-form-builder>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n      <div class=\"p-col-12 p-sm-2\">\r\n        <p-panel header=\"Template\" styleClass=\"p-mt-6 p-sm-mt-0\">\r\n          <div class=\"p-d-flex p-ai-center p-flex-column p-jc-center\">\r\n            <img src=\"assets/images/template-icons/template-2.png\" />\r\n          </div>\r\n        </p-panel>\r\n      </div>\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <label>Izaberi slike</label>\r\n          <app-image-upload\r\n            [fileList]=\"fileList\"\r\n            [includeSeo]=\"true\"\r\n            [chosenFormGroup]=\"getLangFormGroup('sr')\"\r\n            [chosenFormGroupEn]=\"getLangFormGroup('en')\"\r\n            [chosenFormGroupDe]=\"getLangFormGroup('de')\"\r\n            [srAttachments]=\"getLangAttachments('sr')\"\r\n            [enAttachments]=\"getLangAttachments('en')\"\r\n            [deAttachments]=\"getLangAttachments('de')\"\r\n            [maxImages]=\"10\"\r\n          >\r\n          </app-image-upload>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-69af877efd7769a7dd30d04e77bf2c46",
            "file": "src/app/shared/components/textarea/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-textarea",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [
                {
                    "name": "{\n    provide: ControlContainer, useExisting: FormGroupDirective,\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "TextareaField"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "controlContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlContainer",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "fieldOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextareaField",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": "'options'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ControlContainer, FormGroupDirective, FormGroup } from '@angular/forms';\r\nimport { TextareaField } from '../../models/textarea-field';\r\n\r\n@Component({\r\n  selector: 'app-textarea',\r\n  templateUrl: './textarea.component.html',\r\n  styleUrls: ['./textarea.component.scss'],\r\n  viewProviders: [\r\n    {\r\n      provide: ControlContainer,\r\n      useExisting: FormGroupDirective,\r\n    },\r\n  ],\r\n})\r\nexport class TextareaComponent implements OnInit {\r\n  @Input('options') fieldOptions: TextareaField;\r\n  errors: any = {};\r\n\r\n  constructor(public controlContainer: ControlContainer) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onChange(event: Event) {\r\n    const formGroup = this.controlContainer.control as FormGroup;\r\n    this.errors = formGroup.controls[this.fieldOptions.formControlName].errors;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-field w-100\" [ngClass]=\"fieldOptions.containerClass\">\r\n  <label>{{ fieldOptions.label }}</label>\r\n  <textarea\r\n  [rows]=\"fieldOptions.rows\"\r\n  [cols]=\"fieldOptions.cols\"\r\n  [placeholder]=\"fieldOptions.placeholder ?? ''\"\r\n  [formControlName]=\"fieldOptions.formControlName\"\r\n  pInputTextarea></textarea>\r\n\r\n  <ng-container *ngIf=\"errors\">\r\n    <small *ngIf=\"errors.maxlength\" class=\"p-error\">\r\n      Polje ima {{errors.maxlength.actualLength}} karaktera a mora biti ispod {{errors.maxlength.requiredLength}} karaktera.\r\n    </small>\r\n    <small *ngIf=\"errors.pattern\" class=\"p-error\">\r\n      {{fieldOptions.errorMessage}}\r\n    </small>\r\n    <small *ngIf=\"errors.required == true\" class=\"p-error\">\r\n      Ovo polje je obavezno!\r\n    </small>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "UserEditComponent",
            "id": "component-UserEditComponent-454d7f56b6aae961577fb17694c5418d",
            "file": "src/app/modules/users/user-edit/user-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-edit",
            "styleUrls": [
                "./user-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserData",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UsersFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isPassShown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "selectedRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "updateUserForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePassShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { UsersService } from 'src/app/core/services/users.service';\r\nimport { Role } from 'src/app/shared/models/role';\r\nimport { UserData } from 'src/app/shared/models/user-data';\r\nimport { UsersFieldsService } from '../users-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-user-edit',\r\n  templateUrl: './user-edit.component.html',\r\n  styleUrls: ['./user-edit.component.scss'],\r\n})\r\nexport class UserEditComponent implements OnInit, OnDestroy {\r\n  roles: any[];\r\n  selectedRole: Role;\r\n  updateUserForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  userId: number;\r\n  currentUser: UserData;\r\n  isPassShown = false;\r\n  loading = false;\r\n\r\n  constructor(\r\n    private usersService: UsersService,\r\n    private fb: FormBuilder,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private messService: MessServiceService,\r\n    public fieldsService: UsersFieldsService\r\n  ) {\r\n    this.roles = Object.entries(Role)\r\n      .filter((e) => !isNaN(e[0] as any))\r\n      .map((e) => ({ name: e[1], role_id: +e[0] }));\r\n  }\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Create form\r\n    this.updateUserForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      email: ['', Validators.required],\r\n      password: ['', Validators.required],\r\n      password_confirmation: ['', Validators.required],\r\n      phone: [''],\r\n      role_id: [this.roles[0].role_id, [Validators.required]],\r\n    });\r\n\r\n    // Get user ID\r\n    this.userId = +this.route.snapshot.params.id;\r\n\r\n    // Get current user data & update form\r\n    this.subscriptions.push(\r\n      this.usersService.getOne(this.userId).subscribe((response: UserData) => {\r\n        this.currentUser = response;\r\n        this.updateUserForm.patchValue({\r\n          name: response.name,\r\n          email: response.email,\r\n          role_id: response.role_id,\r\n          phone: response.phone,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Update user === //\r\n  onUpdateUser() {\r\n    const user = this.updateUserForm.getRawValue();\r\n    console.log(user);\r\n\r\n    this.usersService.update(this.currentUser.id, user).subscribe(\r\n      () => {\r\n        this.messService.addSuccess({\r\n          severity: 'success',\r\n          title: 'Uspešno ažuriranje',\r\n          detail: 'Ažurirali ste korisnika.',\r\n        });\r\n        this.router.navigate(['./../../'], { relativeTo: this.route });\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  togglePassShow() {\r\n    this.isPassShown = !this.isPassShown;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "UsersFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "UsersFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"KORISNICI - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [skeletonLoad]=\"!currentUser\"\r\n  [formGroup]=\"updateUserForm\"\r\n  (onSubmit)=\"onUpdateUser()\"\r\n>\r\n  <ng-container content>\r\n    <app-form-builder\r\n      styleClass=\"p-mt-2\"\r\n      [form]=\"updateUserForm\"\r\n      [fields]=\"fieldsService.mainFields\"\r\n    ></app-form-builder>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "UsersAddComponent",
            "id": "component-UsersAddComponent-a3304f4e0306db85de6488731072e91c",
            "file": "src/app/modules/users/users-add/users-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-users-add",
            "styleUrls": [
                "./users-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./users-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addUserForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UsersFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isPassShown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "selectedRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePassShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { UsersService } from 'src/app/core/services/users.service';\r\nimport { Role } from 'src/app/shared/models/role';\r\nimport { UsersFieldsService } from '../users-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-users-add',\r\n  templateUrl: './users-add.component.html',\r\n  styleUrls: ['./users-add.component.scss'],\r\n})\r\nexport class UsersAddComponent implements OnInit {\r\n  roles: any[];\r\n  selectedRole: Role;\r\n  addUserForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  isPassShown = false;\r\n\r\n  constructor(\r\n    private usersService: UsersService,\r\n    private fb: FormBuilder,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private messService: MessServiceService,\r\n    public fieldsService: UsersFieldsService\r\n  ) {\r\n    this.roles = Object.entries(Role)\r\n      .filter((e) => !isNaN(e[0] as any))\r\n      .map((e) => ({ name: e[1], role_id: +e[0] }));\r\n  }\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    this.addUserForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      email: ['', Validators.required],\r\n      password: ['', Validators.required],\r\n      password_confirmation: ['', Validators.required],\r\n      phone: [''],\r\n      role_id: [this.roles[0].role_id, [Validators.required]],\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n    this.messService.clearErrors();\r\n  }\r\n\r\n  // * Add user === //\r\n  onAddUser() {\r\n    let user = this.addUserForm.getRawValue();\r\n    this.subscriptions.push(\r\n      this.usersService.create(user).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novog korisnika.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          const errorObj = error.error;\r\n          const form = this.addUserForm;\r\n          const messService = this.messService;\r\n\r\n          Object.keys(errorObj).forEach(function (key) {\r\n            const formControl = form.get(key);\r\n            if (formControl) {\r\n              // If error exist set red border to field\r\n              formControl.setErrors({});\r\n            }\r\n            // Push toast error for every field\r\n            messService.addError({\r\n              severity: 'error',\r\n              title: 'Greška',\r\n              detail: errorObj[key],\r\n              sticky: true,\r\n            });\r\n          });\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  togglePassShow(){\r\n    this.isPassShown = !this.isPassShown;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./users-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "UsersFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "UsersFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"KORISNICI - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [formGroup]=\"addUserForm\"\r\n  (onSubmit)=\"onAddUser()\"\r\n>\r\n  <ng-container content>\r\n    <app-form-builder\r\n      styleClass=\"p-mt-2\"\r\n      [form]=\"addUserForm\"\r\n      [fields]=\"fieldsService.mainFields\"\r\n    ></app-form-builder>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "UsersPreviewComponent",
            "id": "component-UsersPreviewComponent-c154a0d9bc7c13578faf7c47fcf4f35f",
            "file": "src/app/modules/users/users-preview/users-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-users-preview",
            "styleUrls": [
                "./users-preview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./users-preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hideFilters",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "searchForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "searchInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchInput', {static: false}"
                        }
                    ]
                },
                {
                    "name": "showSkeleton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserData[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "userTypes",
                    "defaultValue": "[\r\n    { label: 'Svi', value: '' },\r\n    { label: 'Kupci', value: '&role[]=2' },\r\n    { label: 'Radnici', value: '&role[]=1&role[]=3' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteUser",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup.enter'"
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateUsersList",
                    "args": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keyup.enter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HostListener } from '@angular/core';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\nimport {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport {\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n} from 'rxjs/operators';\r\nimport { MenuToggleService } from 'src/app/core/services/menu-toggle.service';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { UsersService } from 'src/app/core/services/users.service';\r\nimport { PaginatorApi } from 'src/app/shared/models/paginator';\r\nimport { UserData } from 'src/app/shared/models/user-data';\r\n\r\n@Component({\r\n  selector: 'app-users-preview',\r\n  templateUrl: './users-preview.component.html',\r\n  styleUrls: ['./users-preview.component.scss'],\r\n})\r\nexport class UsersPreviewComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  loading = false;\r\n  showSkeleton = false;\r\n  users: UserData[];\r\n  subscriptions: Subscription[] = [];\r\n  paginator;\r\n  userTypes = [\r\n    { label: 'Svi', value: '' },\r\n    { label: 'Kupci', value: '&role[]=2' },\r\n    { label: 'Radnici', value: '&role[]=1&role[]=3' },\r\n  ];\r\n  searchForm: FormGroup;\r\n  hideFilters = true;\r\n  @ViewChild('searchInput', { static: false }) searchInput: ElementRef;\r\n\r\n  constructor(\r\n    private usersService: UsersService,\r\n    private messService: MessServiceService,\r\n    private menuToggle: MenuToggleService,\r\n    private confirmationService: ConfirmationService,\r\n    private fb: FormBuilder,\r\n    private cdr: ChangeDetectorRef\r\n  ) {}\r\n\r\n  @HostListener('keyup.enter')\r\n  onEnter() {\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  // * Lifecycles === //\r\n  ngOnInit(): void {\r\n    // Init search form\r\n    this.searchForm = this.fb.group({\r\n      name: [''],\r\n      role: [''],\r\n    });\r\n\r\n    if (window.innerWidth < 500) {\r\n      this.subscriptions.push(\r\n        this.menuToggle.currentState.subscribe((state) => {\r\n          if (state != null) {\r\n            this.hideFilters = true;\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      this.hideFilters = false;\r\n    }\r\n\r\n    this.subscriptions.push(\r\n      this.usersService.usersFilter.subscribe((response) => {\r\n        console.log('FILTER', response);\r\n        if (response) {\r\n          this.searchForm.patchValue({\r\n            name: response.name,\r\n            role: response.role,\r\n          });\r\n          this.onSearch();\r\n        } else {\r\n          // Get all users\r\n          this.updateUsersList(1);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    //Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.\r\n    //Add 'implements AfterViewInit' to the class.\r\n    // * Debounce search\r\n    fromEvent(this.searchInput.nativeElement, 'keyup')\r\n      .pipe(\r\n        // get value\r\n        map((event: any) => {\r\n          return event.target.value;\r\n        }),\r\n        // Time in milliseconds between key events\r\n        debounceTime(500),\r\n        // If previous query is diffent from current\r\n        distinctUntilChanged()\r\n        // subscription for response\r\n      )\r\n      .subscribe((text: string) => {\r\n        this.onSearch();\r\n        this.cdr.detectChanges();\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n    this.saveFilter();\r\n  }\r\n\r\n  // * Search === //\r\n  onSearch() {\r\n    console.log(this.searchForm.getRawValue());\r\n    const searchForm = this.searchForm.getRawValue();\r\n    // Get active users\r\n    this.loading = true;\r\n    this.showSkeleton = true;\r\n    this.subscriptions.push(\r\n      this.usersService\r\n        .getAll(`name=${searchForm.name}${searchForm.role}`)\r\n        .subscribe((users: PaginatorApi) => {\r\n          this.paginator = users;\r\n          this.users = users.data;\r\n          console.log(users);\r\n          this.loading = false;\r\n          this.showSkeleton = false;\r\n        })\r\n    );\r\n  }\r\n\r\n  // * Delete user === //\r\n  onDeleteUser(event: Event, userId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete korisnika?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.usersService.delete(userId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste korisnika.',\r\n              });\r\n              this.updateUsersList(1);\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Helpers === //\r\n  updateUsersList(pageIndex: number) {\r\n    // Get active users\r\n    this.loading = true;\r\n    this.showSkeleton = true;\r\n    this.subscriptions.push(\r\n      this.usersService\r\n        .getAll(`page=${pageIndex}`)\r\n        .subscribe((users: PaginatorApi) => {\r\n          this.paginator = users;\r\n          this.users = users.data;\r\n          console.log(users);\r\n          this.loading = false;\r\n          this.showSkeleton = false;\r\n        })\r\n    );\r\n  }\r\n\r\n  saveFilter() {\r\n    this.usersService.usersFilter.next(this.searchForm.getRawValue());\r\n  }\r\n\r\n  onPageChange(event) {\r\n    this.updateUsersList(event.page + 1);\r\n  }\r\n\r\n  resetFilter() {\r\n    this.searchForm.patchValue({\r\n      name: '',\r\n      role: '',\r\n    });\r\n    this.updateUsersList(1);\r\n    this.saveFilter();\r\n  }\r\n\r\n  toggleFilters() {\r\n    this.hideFilters = !this.hideFilters;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./users-preview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "usersService",
                        "type": "UsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuToggle",
                        "type": "MenuToggleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"main\"\r\n  headerTitle=\"Korisnici\"\r\n  [skeletonLoad]=\"showSkeleton\"\r\n>\r\n  <ng-container buttons>\r\n    <a\r\n      [routerLink]=\"['./add']\"\r\n      class=\"main-btn\"\r\n      type=\"button\"\r\n      (click)=\"saveFilter()\"\r\n    >\r\n      Dodaj korisnika <i class=\"pi pi-plus\"></i>\r\n    </a>\r\n  </ng-container>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <div class=\"p-field\">\r\n          <p-table\r\n            #dt1\r\n            [value]=\"users\"\r\n            dataKey=\"id\"\r\n            [rows]=\"10\"\r\n            [showCurrentPageReport]=\"true\"\r\n            [rowsPerPageOptions]=\"[10, 25, 50]\"\r\n            [loading]=\"loading\"\r\n            styleClass=\"p-datatable-customers p-datatable-gridlines p-datatable-responsive-demo\"\r\n            [paginator]=\"false\"\r\n            currentPageReportTemplate=\"Prikaz od {first}. do {last}. korisnika od ukupno {totalRecords}\"\r\n            [globalFilterFields]=\"['name']\"\r\n          >\r\n            <ng-template pTemplate=\"caption\">\r\n              <form\r\n                class=\"page-control\"\r\n                [formGroup]=\"searchForm\"\r\n                (ngSubmit)=\"onSearch()\"\r\n                [ngClass]=\"{ 'toggle-filters': hideFilters }\"\r\n              >\r\n                <section\r\n                  class=\"filter-dark-bg\"\r\n                  (click)=\"toggleFilters()\"\r\n                ></section>\r\n                <button\r\n                  class=\"close-bar\"\r\n                  type=\"button\"\r\n                  (click)=\"toggleFilters()\"\r\n                >\r\n                  <div class=\"bar\"></div>\r\n                </button>\r\n                <div class=\"input-fields\">\r\n                  <p-selectButton\r\n                    styleClass=\"p-mr-2 filter-item\"\r\n                    (onChange)=\"onSearch()\"\r\n                    [options]=\"userTypes\"\r\n                    formControlName=\"role\"\r\n                    optionLabel=\"label\"\r\n                    optionValue=\"value\"\r\n                  ></p-selectButton>\r\n                  <div class=\"p-inputgroup w-fit-content filter-item\">\r\n                    <span class=\"p-input-icon-left\">\r\n                      <i class=\"pi pi-search\"></i>\r\n                      <input\r\n                        #searchInput\r\n                        pInputText\r\n                        type=\"text\"\r\n                        formControlName=\"name\"\r\n                        placeholder=\"Pretraži ime\"\r\n                        class=\"w-100\"\r\n                      />\r\n                    </span>\r\n                    <button\r\n                      type=\"button\"\r\n                      (click)=\"searchForm.controls['name'].setValue('')\"\r\n                      pButton\r\n                      icon=\"pi pi-times\"\r\n                      styleClass=\"p-button-warn\"\r\n                    ></button>\r\n                  </div>\r\n                </div>\r\n                <div class=\"filter-buttons\">\r\n                  <button\r\n                    type=\"button\"\r\n                    (click)=\"resetFilter()\"\r\n                    icon=\"false\"\r\n                    pButton\r\n                    pTooltip=\"Resetuj filtere\"\r\n                    tooltipPosition=\"top\"\r\n                    class=\"main-btn only-icon-btn p-mr-1\"\r\n                  >\r\n                    <i class=\"pi pi-refresh\"></i>\r\n                  </button>\r\n                </div>\r\n              </form>\r\n              <button\r\n                class=\"main-btn w-100 toggle-filter-btn\"\r\n                type=\"button\"\r\n                (click)=\"toggleFilters()\"\r\n              >\r\n                Filteri <i class=\"pi pi-search\"></i>\r\n              </button>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"header\">\r\n              <tr>\r\n                <th>\r\n                  <div class=\"p-d-flex p-jc-between p-ai-center\">\r\n                    Ime i prezime\r\n                  </div>\r\n                </th>\r\n                <th>\r\n                  <div class=\"p-d-flex p-jc-between p-ai-center\">Uloga</div>\r\n                </th>\r\n                <th>\r\n                  <div class=\"p-d-flex p-jc-between p-ai-center\">Email</div>\r\n                </th>\r\n                <th>\r\n                  <div class=\"p-d-flex p-jc-between p-ai-center\">\r\n                    Broj telefona\r\n                  </div>\r\n                </th>\r\n                <th style=\"width: 8rem\">\r\n                  <div class=\"p-d-flex p-jc-center p-ai-center\">Akcija</div>\r\n                </th>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"body\" let-user>\r\n              <tr>\r\n                <td>\r\n                  <span class=\"p-column-title\">Ime i prezime</span>\r\n                  <span>{{ user.name }}</span>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Uloga</span>\r\n                  <span class=\"p-text-capitalize\">{{\r\n                    user.role.id | role\r\n                  }}</span>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Mail</span>\r\n                  <span>{{ user.email }}</span>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Broj telefona</span>\r\n                  <span>{{ user.phone }}</span>\r\n                </td>\r\n                <td>\r\n                  <span class=\"p-column-title\">Akcija</span>\r\n                  <a\r\n                    class=\"second-btn small-btn p-mr-2\"\r\n                    pTooltip=\"Izmeni\"\r\n                    tooltipPosition=\"top\"\r\n                    [routerLink]=\"['edit', user.id]\"\r\n                    (click)=\"saveFilter()\"\r\n                  >\r\n                    <i class=\"pi pi-pencil\"></i>\r\n                  </a>\r\n                  <button\r\n                    class=\"second-btn small-btn\"\r\n                    type=\"button\"\r\n                    pTooltip=\"Izbriši\"\r\n                    tooltipPosition=\"top\"\r\n                    (click)=\"onDeleteUser($event, user.id)\"\r\n                  >\r\n                    <i class=\"pi pi-trash\"></i>\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            </ng-template>\r\n\r\n            <ng-template pTemplate=\"emptymessage\">\r\n              <tr>\r\n                <td colspan=\"5\">Ni jedan korisnik nije pronađen.</td>\r\n              </tr>\r\n            </ng-template>\r\n          </p-table>\r\n          <p-paginator\r\n            *ngIf=\"paginator\"\r\n            [first]=\"1\"\r\n            [rows]=\"paginator.per_page\"\r\n            [showJumpToPageDropdown]=\"true\"\r\n            [showPageLinks]=\"true\"\r\n            [totalRecords]=\"paginator.total\"\r\n            (onPageChange)=\"onPageChange($event)\"\r\n            [showPageLinks]=\"false\"\r\n          ></p-paginator>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "WhyUsAddComponent",
            "id": "component-WhyUsAddComponent-1a72d04300cd4ef24fd091d01f2061ba",
            "file": "src/app/modules/sections/why-us/why-us-add/why-us-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-why-us-add",
            "styleUrls": [
                "./why-us-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./why-us-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WhyUsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "LocationStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { WhyUsFieldsService } from '../why-us-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-why-us-add',\r\n  templateUrl: './why-us-add.component.html',\r\n  styleUrls: ['./why-us-add.component.scss'],\r\n})\r\nexport class WhyUsAddComponent implements OnInit {\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  fd = new FormData();\r\n  LocationStrategy;\r\n  loading = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: WhyUsFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      parent: ['9'],\r\n      post_type: ['post'],\r\n      post_status: [1],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: [''],\r\n          number: [''],\r\n          subtitle: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          number: [''],\r\n          subtitle: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          number: [''],\r\n          subtitle: [''],\r\n        }),\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novu recenziju.',\r\n          });\r\n          this.router.navigate(['./../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./why-us-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "WhyUsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "WhyUsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"ZAŠTO MI - Dodaj\"\r\n  [backPath]=\"['./../']\"\r\n  [loading]=\"loading\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "WhyUsComponent",
            "id": "component-WhyUsComponent-a838bb832a6833b2f387478553f69ac4",
            "file": "src/app/modules/sections/why-us/why-us.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-why-us",
            "styleUrls": [
                "./why-us.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./why-us.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WhyUsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "mediaUrl",
                    "defaultValue": "environment.mediaUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "orderItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "postOrder",
                    "defaultValue": "{\r\n    posts: [],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "reorderData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReorderData[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "sectionsOrder",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePageView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { ReorderData } from 'src/app/shared/models/reorder-data';\r\nimport { environment } from 'src/environments/environment';\r\nimport { WhyUsFieldsService } from './why-us-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-why-us',\r\n  templateUrl: './why-us.component.html',\r\n  styleUrls: ['./why-us.component.scss'],\r\n})\r\nexport class WhyUsComponent implements OnInit, OnDestroy {\r\n  orderItems;\r\n  postForm: FormGroup;\r\n  postData;\r\n  loading = false;\r\n  postId: number;\r\n  subscriptions: Subscription[] = [];\r\n  mediaUrl = environment.mediaUrl;\r\n  sectionsOrder: { id: number }[] = [];\r\n  fd = new FormData();\r\n  postOrder = {\r\n    posts: [],\r\n  };\r\n  reorderData: ReorderData[] = [];\r\n\r\n  constructor(\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private confirmationService: ConfirmationService,\r\n    public fieldsService: WhyUsFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get page ID\r\n    this.postId = +this.route.snapshot.params.sectionId;\r\n\r\n    // Form init\r\n    this.postForm = this.fb.group({\r\n      id: ['9'],\r\n      post_type: ['post'],\r\n      post_name: ['statistics'],\r\n      parent: ['1'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.updatePageView();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Delete === //\r\n  onDelete(event: Event, postId: number) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      message: 'Da li ste sigurni da želite da obrišete unos?',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: 'Da',\r\n      rejectLabel: 'Ne',\r\n      accept: () => {\r\n        this.subscriptions.push(\r\n          this.postsService.deletePost(postId).subscribe(\r\n            () => {\r\n              this.messService.addSuccess({\r\n                severity: 'success',\r\n                title: 'Uspešno brisanje',\r\n                detail: 'Obrisali ste unos.',\r\n              });\r\n              this.updatePageView();\r\n            },\r\n            (error) => {\r\n              this.messService.addError({\r\n                severity: 'error',\r\n                title: 'Greška',\r\n                detail: 'Došlo je do greške, pokušajte ponovo!',\r\n              });\r\n            }\r\n          )\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  // * Submit\r\n  onSubmit() {\r\n    const pageForm = this.postForm.getRawValue();\r\n    pageForm.post_status = pageForm.post_status ? 1 : 0;\r\n    console.log(pageForm);\r\n\r\n    this.fd.append('data', JSON.stringify(pageForm));\r\n    console.log(this.fd.getAll('attachments[]'));\r\n    // console.log(this.fd.get('data'));\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.updatePost(this.fd).subscribe(\r\n        () => {\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešna izmena',\r\n            detail: 'Uspešno ste izmenili sekciju',\r\n          });\r\n          // this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  updatePageView() {\r\n    // Get page data\r\n    this.loading = true;\r\n    this.reorderData = [];\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n        this.orderItems = response.posts;\r\n        if (this.orderItems) {\r\n          this.orderItems.forEach((element) => {\r\n            this.postOrder.posts.push(element.id);\r\n\r\n            this.reorderData.push({\r\n              title: element.locale.sr.title,\r\n              subtitle: element.locale.sr.content,\r\n              post_status: element.post_status,\r\n              post_name: element.post_name,\r\n              id: element.id,\r\n              image: element.locale.sr.attachments\r\n                ? element.locale.sr.attachments[0].name\r\n                : null,\r\n            });\r\n          });\r\n        }\r\n        this.loading = false;\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./why-us.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "WhyUsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmationService",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "WhyUsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"ZAŠTO MI\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  [showAddButton]=\"true\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <div class=\"p-grid\">\r\n      <div class=\"p-col-12\">\r\n        <p-tabView>\r\n          <p-tabPanel header=\"Recenzije\">\r\n            <p-panel header=\"Sve recenzije\">\r\n              <app-post-reorder\r\n                [arrayForOrder]=\"postOrder\"\r\n                [orderItems]=\"reorderData\"\r\n                (itemDeleted)=\"updatePageView()\"\r\n              >\r\n              </app-post-reorder>\r\n            </p-panel>\r\n          </p-tabPanel>\r\n          <p-tabPanel header=\"Opis sekcije\">\r\n            <p-tabView>\r\n              <p-tabPanel header=\"Srpski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('sr')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Engleski\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('en')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n              <p-tabPanel header=\"Nemački\">\r\n                <app-form-builder\r\n                  [form]=\"getLangFormGroup('de')\"\r\n                  [fields]=\"fieldsService.sectionFields\"\r\n                ></app-form-builder>\r\n              </p-tabPanel>\r\n            </p-tabView>\r\n          </p-tabPanel>\r\n        </p-tabView>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        },
        {
            "name": "WhyUsEditComponent",
            "id": "component-WhyUsEditComponent-8d7b72229d0bd4411fa5ec1ace128c29",
            "file": "src/app/modules/sections/why-us/why-us-edit/why-us-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-why-us-edit",
            "styleUrls": [
                "./why-us-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./why-us-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fd",
                    "defaultValue": "new FormData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fieldsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WhyUsFieldsService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileList[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "postData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "postForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "srAttachments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getLangAttachments",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLangFormGroup",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchLangForm",
                    "args": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { MessServiceService } from 'src/app/core/services/mess-service.service';\r\nimport { PostsService } from 'src/app/core/services/posts.service';\r\nimport { fileList } from 'src/app/shared/models/file-list';\r\nimport { WhyUsFieldsService } from '../why-us-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-why-us-edit',\r\n  templateUrl: './why-us-edit.component.html',\r\n  styleUrls: ['./why-us-edit.component.scss'],\r\n})\r\nexport class WhyUsEditComponent implements OnInit {\r\n  postForm: FormGroup;\r\n  subscriptions: Subscription[] = [];\r\n  srAttachments: FormArray;\r\n  fileList: fileList[] = [];\r\n  fd = new FormData();\r\n  postId: number;\r\n  postData;\r\n  loading = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private postsService: PostsService,\r\n    private messService: MessServiceService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    public fieldsService: WhyUsFieldsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get post ID\r\n    this.postId = +this.route.snapshot.params.postId;\r\n\r\n    // Add blog form\r\n    this.postForm = this.fb.group({\r\n      id: [''],\r\n      parent: ['9'],\r\n      post_type: ['post'],\r\n      locale: this.fb.group({\r\n        sr: this.fb.group({\r\n          title: [''],\r\n          number: [''],\r\n          subtitle: [''],\r\n        }),\r\n        en: this.fb.group({\r\n          title: [''],\r\n          number: [''],\r\n          subtitle: [''],\r\n        }),\r\n        de: this.fb.group({\r\n          title: [''],\r\n          number: [''],\r\n          subtitle: [''],\r\n        }),\r\n      }),\r\n    });\r\n\r\n    this.srAttachments = this.postForm.get(\r\n      'locale.sr.attachments'\r\n    ) as FormArray;\r\n\r\n    // Get page data\r\n    this.subscriptions.push(\r\n      this.postsService.getPost(this.postId).subscribe((response: any) => {\r\n        console.log(response);\r\n        this.postData = response;\r\n\r\n        this.patchLangForm('sr');\r\n        this.patchLangForm('en');\r\n        this.patchLangForm('de');\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n  }\r\n\r\n  // * Submit form === //\r\n  onSubmit() {\r\n    this.loading = true;\r\n    const postForm = this.postForm.getRawValue();\r\n    postForm.post_status = postForm.post_status ? 1 : 0;\r\n    this.fd.append('data', JSON.stringify(postForm));\r\n    // console.log(this.fd.get('data'));\r\n    console.log(this.postForm.getRawValue());\r\n\r\n    this.subscriptions.push(\r\n      this.postsService.createPost(this.fd).subscribe(\r\n        () => {\r\n          this.loading = false;\r\n          this.messService.addSuccess({\r\n            severity: 'success',\r\n            title: 'Uspešno kreiranje',\r\n            detail: 'Uspešno ste dodali novo pitanje.',\r\n          });\r\n          this.router.navigate(['./../../'], { relativeTo: this.route });\r\n        },\r\n        (error) => {\r\n          this.loading = false;\r\n          console.log(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // * Helpers === //\r\n  getLangFormGroup(langCode: string) {\r\n    return <FormGroup>this.postForm.get(`locale.${langCode}`);\r\n  }\r\n\r\n  getLangAttachments(langCode: string) {\r\n    return this.postForm.get(`locale.${langCode}.attachments`) as FormArray;\r\n  }\r\n\r\n  patchLangForm(langCode: string) {\r\n    this.getLangFormGroup(langCode).patchValue({\r\n      title: this.postData.locale[langCode].title,\r\n      number: this.postData.locale[langCode].number,\r\n      subtitle: this.postData.locale[langCode].subtitle,\r\n    });\r\n    this.postForm.patchValue({\r\n      id: this.postId,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./why-us-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "WhyUsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messService",
                        "type": "MessServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "WhyUsFieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-content-layout\r\n  headerType=\"inner\"\r\n  headerTitle=\"ZAŠTO MI - Izmeni\"\r\n  [backPath]=\"['./../../']\"\r\n  [loading]=\"loading\"\r\n  [skeletonLoad]=\"!postData\"\r\n  [pageData]=\"postData\"\r\n  [formGroup]=\"postForm\"\r\n  (onSubmit)=\"onSubmit()\"\r\n  layoutType=\"section\"\r\n>\r\n  <ng-container content>\r\n    <p-tabView>\r\n      <p-tabPanel header=\"Srpski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('sr')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Engleski\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('en')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n      <p-tabPanel header=\"Nemački\">\r\n        <app-form-builder\r\n          [form]=\"getLangFormGroup('de')\"\r\n          [fields]=\"fieldsService.mainFields\"\r\n        ></app-form-builder>\r\n      </p-tabPanel>\r\n    </p-tabView>\r\n  </ng-container>\r\n</app-content-layout>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-c84ec46c1413c5fbfd1f379d1b0367d1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\n// * QUILL - TEXT EDITOR\r\nimport { QuillModule } from 'ngx-quill';\r\n\r\n// * PRIMENG IMPORTS\r\nimport { SortablejsModule } from 'ngx-sortablejs';\r\nimport { StyleModuleModule } from './shared/style-module/style-module.module';\r\nimport { ConfirmationService, MessageService } from 'primeng/api';\r\nimport { SharedComponentsModule } from './shared/components/shared-components.module';\r\n\r\n// * CUSTOM\r\nimport { CoreModule } from './core/core.module';\r\nimport { JwtInterceptor } from './core/interceptors/jwt.interceptor';\r\nimport { ErrorInterceptor } from './core/interceptors/error.interceptor';\r\nimport { MainLayoutComponent } from './includes/layout/main-layout/main-layout.component';\r\nimport { AuthLayoutComponent } from './includes/layout/auth-layout/auth-layout.component';\r\nimport { SidebarComponent } from './includes/sidebar/sidebar.component';\r\nimport { HeaderComponent } from './includes/header/header.component';\r\nimport { SectionsModule } from './modules/sections/sections.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MainLayoutComponent,\r\n    AuthLayoutComponent,\r\n    SidebarComponent,\r\n    HeaderComponent,\r\n  ],\r\n  imports: [\r\n    StyleModuleModule,\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    CoreModule,\r\n    FormsModule,\r\n    SharedComponentsModule,\r\n    SectionsModule,\r\n    SortablejsModule.forRoot({ animation: 150 }),\r\n    QuillModule.forRoot(),\r\n  ],\r\n  providers: [\r\n    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\r\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\r\n    { provide: LocationStrategy, useClass: HashLocationStrategy },\r\n    MessageService,\r\n    ConfirmationService,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ErrorInterceptor"
                        },
                        {
                            "name": "JwtInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "AuthLayoutComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "MainLayoutComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "SectionsModule"
                        },
                        {
                            "name": "StyleModuleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-21690fd1149712d144c7852358905073",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n// * CUSTOM\r\nimport { AuthGuard } from './core/guards/auth.guard';\r\nimport { MainLayoutComponent } from './includes/layout/main-layout/main-layout.component';\r\nimport { GlobalSectionsComponent } from './modules/global/global-sections/global-sections.component';\r\nimport { TemplateOneAddComponent } from './modules/page-templates/template-one/template-one-add/template-one-add.component';\r\nimport { TemplateOneEditComponent } from './modules/page-templates/template-one/template-one-edit/template-one-edit.component';\r\nimport { TemplateReferenceAddComponent } from './modules/page-templates/template-reference/template-reference-add/template-reference-add.component';\r\nimport { TemplateReferenceEditComponent } from './modules/page-templates/template-reference/template-reference-edit/template-reference-edit.component';\r\nimport { TemplateThreeAddComponent } from './modules/page-templates/template-three/template-three-add/template-three-add.component';\r\nimport { TemplateThreeEditComponent } from './modules/page-templates/template-three/template-three-edit/template-three-edit.component';\r\nimport { TemplateTwoAddComponent } from './modules/page-templates/template-two/template-two-add/template-two-add.component';\r\nimport { TemplateTwoEditComponent } from './modules/page-templates/template-two/template-two-edit/template-two-edit.component';\r\nimport { BannersAddComponent } from './modules/sections/banners/banners-add/banners-add.component';\r\nimport { BannersEditComponent } from './modules/sections/banners/banners-edit/banners-edit.component';\r\nimport { BannersComponent } from './modules/sections/banners/banners.component';\r\nimport { CompanyValueAddComponent } from './modules/sections/company-value/company-value-add/company-value-add.component';\r\nimport { CompanyValueEditComponent } from './modules/sections/company-value/company-value-edit/company-value-edit.component';\r\nimport { CompanyValueComponent } from './modules/sections/company-value/company-value.component';\r\nimport { CtaComponent } from './modules/sections/cta/cta.component';\r\nimport { FaqAddComponent } from './modules/sections/faq/faq-add/faq-add.component';\r\nimport { FaqEditComponent } from './modules/sections/faq/faq-edit/faq-edit.component';\r\nimport { FaqComponent } from './modules/sections/faq/faq.component';\r\nimport { HomeSliderAddComponent } from './modules/sections/home-slider/home-slider-add/home-slider-add.component';\r\nimport { HomeSliderEditComponent } from './modules/sections/home-slider/home-slider-edit/home-slider-edit.component';\r\nimport { HomeSliderComponent } from './modules/sections/home-slider/home-slider.component';\r\nimport { OurClientsAddComponent } from './modules/sections/our-clients/our-clients-add/our-clients-add.component';\r\nimport { OurClientsEditComponent } from './modules/sections/our-clients/our-clients-edit/our-clients-edit.component';\r\nimport { OurClientsComponent } from './modules/sections/our-clients/our-clients.component';\r\nimport { PopularCategoriesAddComponent } from './modules/sections/popular-categories/popular-categories-add/popular-categories-add.component';\r\nimport { PopularCategoriesEditComponent } from './modules/sections/popular-categories/popular-categories-edit/popular-categories-edit.component';\r\nimport { PopularCategoriesComponent } from './modules/sections/popular-categories/popular-categories.component';\r\nimport { PopularProductsAddComponent } from './modules/sections/popular-products/popular-products-add/popular-products-add.component';\r\nimport { PopularProductsEditComponent } from './modules/sections/popular-products/popular-products-edit/popular-products-edit.component';\r\nimport { PopularProductsComponent } from './modules/sections/popular-products/popular-products.component';\r\nimport { PopupsAddComponent } from './modules/sections/popups/popups-add/popups-add.component';\r\nimport { PopupsEditComponent } from './modules/sections/popups/popups-edit/popups-edit.component';\r\nimport { PopupsComponent } from './modules/sections/popups/popups.component';\r\nimport { ReviewsAddComponent } from './modules/sections/reviews/reviews-add/reviews-add.component';\r\nimport { ReviewsEditComponent } from './modules/sections/reviews/reviews-edit/reviews-edit.component';\r\nimport { ReviewsComponent } from './modules/sections/reviews/reviews.component';\r\nimport { TeamAddComponent } from './modules/sections/team/team-add/team-add.component';\r\nimport { TeamEditComponent } from './modules/sections/team/team-edit/team-edit.component';\r\nimport { TeamComponent } from './modules/sections/team/team.component';\r\nimport { WhyUsAddComponent } from './modules/sections/why-us/why-us-add/why-us-add.component';\r\nimport { WhyUsEditComponent } from './modules/sections/why-us/why-us-edit/why-us-edit.component';\r\nimport { WhyUsComponent } from './modules/sections/why-us/why-us.component';\r\nimport { Role } from './shared/models/role';\r\n\r\nconst routes = [\r\n  {\r\n    path: '',\r\n    component: MainLayoutComponent,\r\n    children: [\r\n      {\r\n        path: 'pages',\r\n        loadChildren: () =>\r\n          import('./modules/pages/pages.module').then((m) => m.PagesModule),\r\n      },\r\n\r\n      // ? HOMEPAGE SECTIONS\r\n      // Comapny value\r\n      {\r\n        path: 'pages/home/:id/company_value/:sectionId',\r\n        component: CompanyValueComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/company_value/:sectionId/add',\r\n        component: CompanyValueAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/company_value/:sectionId/edit/:postId',\r\n        component: CompanyValueEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Banners\r\n      {\r\n        path: 'pages/home/:id/banner/:sectionId',\r\n        component: BannersComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/banner/:sectionId/add',\r\n        component: BannersAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/banner/:sectionId/edit/:postId',\r\n        component: BannersEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Why us\r\n      {\r\n        path: 'pages/home/:id/statistics/:sectionId',\r\n        component: WhyUsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/statistics/:sectionId/add',\r\n        component: WhyUsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/statistics/:sectionId/edit/:postId',\r\n        component: WhyUsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Our clients\r\n      {\r\n        path: 'pages/home/:id/clients/:sectionId',\r\n        component: OurClientsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/clients/:sectionId/add',\r\n        component: OurClientsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/clients/:sectionId/edit/:postId',\r\n        component: OurClientsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Reviews\r\n      {\r\n        path: 'pages/home/:id/reviews/:sectionId',\r\n        component: ReviewsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/reviews/:sectionId/add',\r\n        component: ReviewsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/reviews/:sectionId/edit/:postId',\r\n        component: ReviewsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // FAQ\r\n      {\r\n        path: 'pages/home/:id/faq/:sectionId',\r\n        component: FaqComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/faq/:sectionId/add',\r\n        component: FaqAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/faq/:sectionId/edit/:postId',\r\n        component: FaqEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Slider\r\n      {\r\n        path: 'pages/home/:id/slider/:sectionId',\r\n        component: HomeSliderComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/slider/:sectionId/add',\r\n        component: HomeSliderAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/slider/:sectionId/edit/:postId',\r\n        component: HomeSliderEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Popular products\r\n      {\r\n        path: 'pages/home/:id/popular_products/:sectionId',\r\n        component: PopularProductsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/popular_products/:sectionId/add',\r\n        component: PopularProductsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/popular_products/:sectionId/edit/:postId',\r\n        component: PopularProductsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Popular categories\r\n      {\r\n        path: 'pages/home/:id/popular_categories/:sectionId',\r\n        component: PopularCategoriesComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/popular_categories/:sectionId/add',\r\n        component: PopularCategoriesAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/popular_categories/:sectionId/edit/:postId',\r\n        component: PopularCategoriesEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // ? ABOUT SECTIONS\r\n      // Team\r\n      {\r\n        path: 'pages/about/:id/team/:id',\r\n        component: TeamComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/about/:id/team/:id/add',\r\n        component: TeamAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/about/:id/team/:id/edit/:postId',\r\n        component: TeamEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n\r\n      // * USERS\r\n      {\r\n        path: 'users',\r\n        loadChildren: () =>\r\n          import('./modules/users/users.module').then((m) => m.UsersModule),\r\n      },\r\n\r\n      // * SETTINGS\r\n      {\r\n        path: 'settings',\r\n        loadChildren: () =>\r\n          import('./modules/settings/settings.module').then(\r\n            (m) => m.SettingsModule\r\n          ),\r\n      },\r\n\r\n      // * GLOBAL\r\n      {\r\n        path: 'global',\r\n        loadChildren: () =>\r\n          import('./modules/global/global.module').then((m) => m.GlobalModule),\r\n      },\r\n      // ? GLOBAL SECTIONS\r\n      // Cta\r\n      {\r\n        path: 'global/sections',\r\n        component: GlobalSectionsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'global/sections/cta/edit/:id',\r\n        component: CtaComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Popups\r\n      {\r\n        path: 'global/sections/popups/edit/:id',\r\n        component: PopupsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'global/sections/popups/edit/:id/add',\r\n        component: PopupsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'global/sections/popups/edit/:id/edit/:postId',\r\n        component: PopupsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n\r\n      // * PRODUCTS\r\n      // All products\r\n      {\r\n        path: 'products',\r\n        loadChildren: () =>\r\n          import('./modules/products/products.module').then(\r\n            (m) => m.ProductsModule\r\n          ),\r\n      },\r\n\r\n      // * ORDERS\r\n      {\r\n        path: 'orders',\r\n        loadChildren: () =>\r\n          import('./modules/orders/orders.module').then((m) => m.OrdersModule),\r\n      },\r\n\r\n      { path: '', redirectTo: 'orders', pathMatch: 'full' }, // Redirect to orders\r\n    ],\r\n  },\r\n  {\r\n    path: 'login',\r\n    loadChildren: () =>\r\n      import('./modules/login/login.module').then((m) => m.LoginModule),\r\n  },\r\n  { path: '**', redirectTo: 'pages' }, // redirect to home\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes, {\r\n      scrollPositionRestoration: 'top',\r\n      useHash: true,\r\n    }),\r\n  ],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-6a4c112fe888130e2f9f12342407669a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule],\r\n})\r\nexport class CoreModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GlobalModule",
            "id": "module-GlobalModule-682f01af841cf363e7be489ac47a8598",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/global/global.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n// * CUSTOM\r\nimport { GlobalRoutingModule } from './global-routing.module';\r\nimport { HeaderMenuComponent } from './header-menu/header-menu.component';\r\nimport { StyleModuleModule } from 'src/app/shared/style-module/style-module.module';\r\nimport { EditMenuItemComponent } from './header-menu/edit-menu-item/edit-menu-item.component';\r\nimport { FooterMenuComponent } from './footer-menu/footer-menu.component';\r\nimport { GlobalSectionsComponent } from './global-sections/global-sections.component';\r\nimport { SharedComponentsModule } from 'src/app/shared/components/shared-components.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    HeaderMenuComponent,\r\n    EditMenuItemComponent,\r\n    FooterMenuComponent,\r\n    GlobalSectionsComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    StyleModuleModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    SharedComponentsModule,\r\n    GlobalRoutingModule,\r\n  ],\r\n})\r\nexport class GlobalModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EditMenuItemComponent"
                        },
                        {
                            "name": "FooterMenuComponent"
                        },
                        {
                            "name": "GlobalSectionsComponent"
                        },
                        {
                            "name": "HeaderMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "GlobalRoutingModule"
                        },
                        {
                            "name": "StyleModuleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GlobalRoutingModule",
            "id": "module-GlobalRoutingModule-2f466372b2cc8c696895118c691d8f76",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/global/global-routing.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n// * CUSTOM\r\nimport { AuthGuard } from 'src/app/core/guards/auth.guard';\r\nimport { Role } from 'src/app/shared/models/role';\r\nimport { FooterMenuComponent } from './footer-menu/footer-menu.component';\r\nimport { HeaderMenuComponent } from './header-menu/header-menu.component';\r\n\r\nconst routes = [\r\n  {\r\n    path: 'header/:id',\r\n    component: HeaderMenuComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'footer/:id',\r\n    component: FooterMenuComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class GlobalRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "id": "module-LoginModule-bef5b7be16fc1b547461e777046efa58",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/login/login.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n// * CUSTOM\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginPageComponent } from './login-page/login-page.component';\r\nimport { StyleModuleModule } from 'src/app/shared/style-module/style-module.module';\r\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginPageComponent,\r\n    ForgetPasswordComponent,\r\n    ResetPasswordComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    StyleModuleModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    LoginRoutingModule,\r\n  ],\r\n  exports: [LoginPageComponent],\r\n})\r\nexport class LoginModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ForgetPasswordComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "ResetPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LoginRoutingModule"
                        },
                        {
                            "name": "StyleModuleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoginPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginRoutingModule",
            "id": "module-LoginRoutingModule-3d9103a413a274c66aa015e9061298cf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/login/login-routing.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n// * CUSTOM\r\nimport { AuthLayoutComponent } from 'src/app/includes/layout/auth-layout/auth-layout.component';\r\nimport { ForgetPasswordComponent } from './forget-password/forget-password.component';\r\nimport { LoginPageComponent } from './login-page/login-page.component';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\n\r\nconst routes = [\r\n  {\r\n    path: '',\r\n    component: AuthLayoutComponent,\r\n    children: [\r\n      { path: '', component: LoginPageComponent },\r\n      { path: 'forget-password', component: ForgetPasswordComponent },\r\n      { path: 'reset-password', component: ResetPasswordComponent },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class LoginRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OrdersModule",
            "id": "module-OrdersModule-f9b78c81f80e92874eb6e6cf2dc993d6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/orders/orders.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n// * CUSTOM\r\nimport { OrdersRoutingModule } from './orders-routing.module';\r\nimport { OrdersListComponent } from './orders-list/orders-list.component';\r\nimport { StyleModuleModule } from 'src/app/shared/style-module/style-module.module';\r\nimport { SharedComponentsModule } from 'src/app/shared/components/shared-components.module';\r\nimport { OrdersEditComponent } from './orders-edit/orders-edit.component';\r\n\r\n@NgModule({\r\n  declarations: [OrdersListComponent, OrdersEditComponent],\r\n  imports: [\r\n    CommonModule,\r\n    StyleModuleModule,\r\n    SharedComponentsModule,\r\n    RouterModule,\r\n    ReactiveFormsModule,\r\n    OrdersRoutingModule,\r\n  ],\r\n})\r\nexport class OrdersModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OrdersEditComponent"
                        },
                        {
                            "name": "OrdersListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "OrdersRoutingModule"
                        },
                        {
                            "name": "StyleModuleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OrdersRoutingModule",
            "id": "module-OrdersRoutingModule-5143c05503e4d017f39b879bf939032d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/orders/orders-routing.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n// * CUSTOM\r\nimport { AuthGuard } from 'src/app/core/guards/auth.guard';\r\nimport { Role } from 'src/app/shared/models/role';\r\nimport { OrdersEditComponent } from './orders-edit/orders-edit.component';\r\nimport { OrdersListComponent } from './orders-list/orders-list.component';\r\n\r\nconst routes = [\r\n  {\r\n    path: '',\r\n    component: OrdersListComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'edit/:id',\r\n    component: OrdersEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class OrdersRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PagesModule",
            "id": "module-PagesModule-24bc6a3e866842d42b7bc86e89910567",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/pages/pages.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n// * CUSTOM\r\nimport { EditorModule } from 'primeng/editor';\r\nimport { StyleModuleModule } from 'src/app/shared/style-module/style-module.module';\r\nimport { PagesRoutingModule } from './pages-routing.module';\r\nimport { PagesListComponent } from './pages-list/pages-list.component';\r\nimport { AboutComponent } from './about/about.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { DownloadComponent } from './download/download.component';\r\nimport { DownloadAddComponent } from './download/download-add/download-add.component';\r\nimport { ContactComponent } from './contact/contact.component';\r\nimport { HomepageComponent } from './homepage/homepage.component';\r\nimport { BlogComponent } from './blog/blog.component';\r\nimport { BlogAddComponent } from './blog/blog-add/blog-add.component';\r\nimport { SharedComponentsModule } from 'src/app/shared/components/shared-components.module';\r\nimport { ProductsComponent } from './products/products.component';\r\nimport { BlogEditComponent } from './blog/blog-edit/blog-edit.component';\r\nimport { DownloadEditComponent } from './download/download-edit/download-edit.component';\r\nimport { RenameSectionPipe } from 'src/app/shared/pipes/rename-section.pipe';\r\nimport { PageTemplatesModule } from '../page-templates/page-templates.module';\r\n\r\n// * QUILL\r\nimport { QuillModule } from 'ngx-quill';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PagesListComponent,\r\n    RenameSectionPipe,\r\n    AboutComponent,\r\n    DownloadComponent,\r\n    DownloadAddComponent,\r\n    ContactComponent,\r\n    HomepageComponent,\r\n    BlogComponent,\r\n    BlogAddComponent,\r\n    ProductsComponent,\r\n    BlogEditComponent,\r\n    DownloadEditComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    EditorModule,\r\n    StyleModuleModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    SharedComponentsModule,\r\n    QuillModule,\r\n    PagesRoutingModule,\r\n    PageTemplatesModule,\r\n  ],\r\n  exports: [PagesListComponent, AboutComponent],\r\n  providers: [RenameSectionPipe],\r\n})\r\nexport class PagesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AboutComponent"
                        },
                        {
                            "name": "BlogAddComponent"
                        },
                        {
                            "name": "BlogComponent"
                        },
                        {
                            "name": "BlogEditComponent"
                        },
                        {
                            "name": "ContactComponent"
                        },
                        {
                            "name": "DownloadAddComponent"
                        },
                        {
                            "name": "DownloadComponent"
                        },
                        {
                            "name": "DownloadEditComponent"
                        },
                        {
                            "name": "HomepageComponent"
                        },
                        {
                            "name": "PagesListComponent"
                        },
                        {
                            "name": "ProductsComponent"
                        },
                        {
                            "name": "RenameSectionPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PageTemplatesModule"
                        },
                        {
                            "name": "PagesRoutingModule"
                        },
                        {
                            "name": "StyleModuleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AboutComponent"
                        },
                        {
                            "name": "PagesListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PagesRoutingModule",
            "id": "module-PagesRoutingModule-42beaebf7a67a7b934efa4cfdc0f21b9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/pages/pages-routing.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n// * CUSTOM\r\nimport { AuthGuard } from 'src/app/core/guards/auth.guard';\r\nimport { Role } from 'src/app/shared/models/role';\r\nimport { AboutComponent } from './about/about.component';\r\nimport { BlogAddComponent } from './blog/blog-add/blog-add.component';\r\nimport { BlogEditComponent } from './blog/blog-edit/blog-edit.component';\r\nimport { BlogComponent } from './blog/blog.component';\r\nimport { ContactComponent } from './contact/contact.component';\r\nimport { DownloadAddComponent } from './download/download-add/download-add.component';\r\nimport { DownloadEditComponent } from './download/download-edit/download-edit.component';\r\nimport { DownloadComponent } from './download/download.component';\r\nimport { HomepageComponent } from './homepage/homepage.component';\r\nimport { PagesListComponent } from './pages-list/pages-list.component';\r\nimport { ProductsComponent } from './products/products.component';\r\n\r\nconst routes = [\r\n  // * ALL PAGES\r\n  {\r\n    path: '',\r\n    component: PagesListComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // About\r\n  {\r\n    path: 'about/:id',\r\n    component: AboutComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Download\r\n  {\r\n    path: 'download/:id',\r\n    component: DownloadComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'download/:id/add',\r\n    component: DownloadAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'download/:id/edit/:postId',\r\n    component: DownloadEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Contact\r\n  {\r\n    path: 'contact/:id',\r\n    component: ContactComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Homepage\r\n  {\r\n    path: 'home/:id',\r\n    component: HomepageComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Blog\r\n  {\r\n    path: 'blog/:id',\r\n    component: BlogComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'blog/:id/add',\r\n    component: BlogAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'blog/:id/edit/:postId',\r\n    component: BlogEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Products\r\n  {\r\n    path: 'products/:id',\r\n    component: ProductsComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class PagesRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PageTemplatesModule",
            "id": "module-PageTemplatesModule-b4471580fbdfda8ede7441873581c797",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/page-templates/page-templates.module.ts",
            "methods": [],
            "sourceCode": "import { PageTemplatesRoutingModule } from './page-templates-routing.module';\r\n// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n// * CUSTOM\r\nimport { TemplateOneAddComponent } from './template-one/template-one-add/template-one-add.component';\r\nimport { TemplateOneEditComponent } from './template-one/template-one-edit/template-one-edit.component';\r\nimport { StyleModuleModule } from 'src/app/shared/style-module/style-module.module';\r\nimport { SharedComponentsModule } from 'src/app/shared/components/shared-components.module';\r\nimport { TemplateTwoAddComponent } from './template-two/template-two-add/template-two-add.component';\r\nimport { TemplateTwoEditComponent } from './template-two/template-two-edit/template-two-edit.component';\r\nimport { TemplateThreeAddComponent } from './template-three/template-three-add/template-three-add.component';\r\nimport { TemplateThreeEditComponent } from './template-three/template-three-edit/template-three-edit.component';\r\nimport { TemplateReferenceComponent } from './template-reference/template-reference.component';\r\nimport { TemplateReferenceAddComponent } from './template-reference/template-reference-add/template-reference-add.component';\r\nimport { TemplateReferenceEditComponent } from './template-reference/template-reference-edit/template-reference-edit.component';\r\n\r\n// * QUILL\r\nimport { QuillModule } from 'ngx-quill';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TemplateOneAddComponent,\r\n    TemplateOneEditComponent,\r\n    TemplateTwoAddComponent,\r\n    TemplateTwoEditComponent,\r\n    TemplateThreeAddComponent,\r\n    TemplateThreeEditComponent,\r\n    TemplateReferenceComponent,\r\n    TemplateReferenceAddComponent,\r\n    TemplateReferenceEditComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    StyleModuleModule,\r\n    SharedComponentsModule,\r\n    RouterModule,\r\n    ReactiveFormsModule,\r\n    QuillModule,\r\n    PageTemplatesRoutingModule,\r\n  ],\r\n})\r\nexport class PageTemplatesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TemplateOneAddComponent"
                        },
                        {
                            "name": "TemplateOneEditComponent"
                        },
                        {
                            "name": "TemplateReferenceAddComponent"
                        },
                        {
                            "name": "TemplateReferenceComponent"
                        },
                        {
                            "name": "TemplateReferenceEditComponent"
                        },
                        {
                            "name": "TemplateThreeAddComponent"
                        },
                        {
                            "name": "TemplateThreeEditComponent"
                        },
                        {
                            "name": "TemplateTwoAddComponent"
                        },
                        {
                            "name": "TemplateTwoEditComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PageTemplatesRoutingModule"
                        },
                        {
                            "name": "StyleModuleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PageTemplatesRoutingModule",
            "id": "module-PageTemplatesRoutingModule-0e64610e1d45db79fb989c19f9fc7f5f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/page-templates/page-templates-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from 'src/app/core/guards/auth.guard';\nimport { Role } from 'src/app/shared/models/role';\nimport { TemplateOneAddComponent } from './template-one/template-one-add/template-one-add.component';\nimport { TemplateOneEditComponent } from './template-one/template-one-edit/template-one-edit.component';\nimport { TemplateReferenceAddComponent } from './template-reference/template-reference-add/template-reference-add.component';\nimport { TemplateReferenceEditComponent } from './template-reference/template-reference-edit/template-reference-edit.component';\nimport { TemplateThreeAddComponent } from './template-three/template-three-add/template-three-add.component';\nimport { TemplateThreeEditComponent } from './template-three/template-three-edit/template-three-edit.component';\nimport { TemplateTwoAddComponent } from './template-two/template-two-add/template-two-add.component';\nimport { TemplateTwoEditComponent } from './template-two/template-two-edit/template-two-edit.component';\n\nconst routes = [\n  // Template ONE\n  {\n    path: 'create/template-1',\n    component: TemplateOneAddComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  {\n    path: 'edit/template-1/:id',\n    component: TemplateOneEditComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  // Template TWO\n  {\n    path: 'create/template-2',\n    component: TemplateTwoAddComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  {\n    path: 'edit/template-2/:id',\n    component: TemplateTwoEditComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  // Template THREE\n  {\n    path: 'create/template-3',\n    component: TemplateThreeAddComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  {\n    path: 'edit/template-3/:id',\n    component: TemplateThreeEditComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  // Template REFERENCE\n  {\n    path: 'create/template-reference',\n    component: TemplateReferenceAddComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  {\n    path: 'edit/template-reference/:id',\n    component: TemplateReferenceEditComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PageTemplatesRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductsModule",
            "id": "module-ProductsModule-3f7c2e3274a53683b1c43758d94aa4a2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/products/products.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n// * CUSTOM\r\nimport { ProductsRoutingModule } from './products-routing.module';\r\nimport { StyleModuleModule } from 'src/app/shared/style-module/style-module.module';\r\nimport { ProductsListComponent } from './products-list/products-list.component';\r\nimport { CategoriesComponent } from './categories/categories.component';\r\nimport { TableModule } from 'primeng/table';\r\nimport { CategoryAddComponent } from './categories/category-add/category-add.component';\r\nimport { CategoryEditComponent } from './categories/category-edit/category-edit.component';\r\nimport { SharedComponentsModule } from 'src/app/shared/components/shared-components.module';\r\nimport { ProductAddComponent } from './products-list/product-add/product-add.component';\r\nimport { ProductEditComponent } from './products-list/product-edit/product-edit.component';\r\nimport { SubcategoriesComponent } from './subcategories/subcategories.component';\r\nimport { SubcategoriesAddComponent } from './subcategories/subcategories-add/subcategories-add.component';\r\nimport { SubcategoriesEditComponent } from './subcategories/subcategories-edit/subcategories-edit.component';\r\n\r\n// * QUILL\r\nimport { QuillModule } from 'ngx-quill';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProductsListComponent,\r\n    CategoriesComponent,\r\n    CategoryAddComponent,\r\n    CategoryEditComponent,\r\n    ProductAddComponent,\r\n    ProductEditComponent,\r\n    SubcategoriesComponent,\r\n    SubcategoriesAddComponent,\r\n    SubcategoriesEditComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    StyleModuleModule,\r\n    ReactiveFormsModule,\r\n    TableModule,\r\n    RouterModule,\r\n    SharedComponentsModule,\r\n    QuillModule,\r\n    ProductsRoutingModule,\r\n  ],\r\n})\r\nexport class ProductsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CategoriesComponent"
                        },
                        {
                            "name": "CategoryAddComponent"
                        },
                        {
                            "name": "CategoryEditComponent"
                        },
                        {
                            "name": "ProductAddComponent"
                        },
                        {
                            "name": "ProductEditComponent"
                        },
                        {
                            "name": "ProductsListComponent"
                        },
                        {
                            "name": "SubcategoriesAddComponent"
                        },
                        {
                            "name": "SubcategoriesComponent"
                        },
                        {
                            "name": "SubcategoriesEditComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ProductsRoutingModule"
                        },
                        {
                            "name": "StyleModuleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductsRoutingModule",
            "id": "module-ProductsRoutingModule-c4814870b9e804ca8fbc1f0a650c722e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/products/products-routing.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n// * CUSTOM\r\nimport { AuthGuard } from 'src/app/core/guards/auth.guard';\r\nimport { Role } from 'src/app/shared/models/role';\r\nimport { CategoriesComponent } from './categories/categories.component';\r\nimport { CategoryAddComponent } from './categories/category-add/category-add.component';\r\nimport { CategoryEditComponent } from './categories/category-edit/category-edit.component';\r\nimport { ProductAddComponent } from './products-list/product-add/product-add.component';\r\nimport { ProductEditComponent } from './products-list/product-edit/product-edit.component';\r\nimport { ProductsListComponent } from './products-list/products-list.component';\r\nimport { SubcategoriesAddComponent } from './subcategories/subcategories-add/subcategories-add.component';\r\nimport { SubcategoriesEditComponent } from './subcategories/subcategories-edit/subcategories-edit.component';\r\nimport { SubcategoriesComponent } from './subcategories/subcategories.component';\r\n\r\nconst routes = [\r\n  // Products\r\n  {\r\n    path: '',\r\n    component: ProductsListComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'add',\r\n    component: ProductAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'edit/:id',\r\n    component: ProductEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Categories\r\n  {\r\n    path: 'categories',\r\n    component: CategoriesComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'categories/add',\r\n    component: CategoryAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'categories/edit/:id',\r\n    component: CategoryEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Subcategories\r\n  {\r\n    path: 'subcategories',\r\n    component: SubcategoriesComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'subcategories/add',\r\n    component: SubcategoriesAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'subcategories/edit/:id',\r\n    component: SubcategoriesEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ProductsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SectionsModule",
            "id": "module-SectionsModule-70c70e2b04351c8c18139a6215261dcd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/sections/sections.module.ts",
            "methods": [],
            "sourceCode": "import { SectionsRoutingModule } from './sections-routing.module';\r\n// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n// * CUSTOM\r\nimport { CompanyValueComponent } from './company-value/company-value.component';\r\nimport { StyleModuleModule } from 'src/app/shared/style-module/style-module.module';\r\nimport { AppRoutingModule } from 'src/app/app-routing.module';\r\nimport { CompanyValueAddComponent } from './company-value/company-value-add/company-value-add.component';\r\nimport { BannersComponent } from './banners/banners.component';\r\nimport { BannersAddComponent } from './banners/banners-add/banners-add.component';\r\nimport { WhyUsComponent } from './why-us/why-us.component';\r\nimport { OurClientsComponent } from './our-clients/our-clients.component';\r\nimport { OurClientsAddComponent } from './our-clients/our-clients-add/our-clients-add.component';\r\nimport { ReviewsComponent } from './reviews/reviews.component';\r\nimport { ReviewsAddComponent } from './reviews/reviews-add/reviews-add.component';\r\nimport { FaqComponent } from './faq/faq.component';\r\nimport { FaqAddComponent } from './faq/faq-add/faq-add.component';\r\nimport { HomeSliderComponent } from './home-slider/home-slider.component';\r\nimport { HomeSliderAddComponent } from './home-slider/home-slider-add/home-slider-add.component';\r\nimport { PopularProductsComponent } from './popular-products/popular-products.component';\r\nimport { PopularProductsAddComponent } from './popular-products/popular-products-add/popular-products-add.component';\r\nimport { PopularCategoriesComponent } from './popular-categories/popular-categories.component';\r\nimport { PopularCategoriesAddComponent } from './popular-categories/popular-categories-add/popular-categories-add.component';\r\nimport { SharedComponentsModule } from 'src/app/shared/components/shared-components.module';\r\nimport { TeamComponent } from './team/team.component';\r\nimport { TeamAddComponent } from './team/team-add/team-add.component';\r\nimport { TeamEditComponent } from './team/team-edit/team-edit.component';\r\nimport { HomeSliderEditComponent } from './home-slider/home-slider-edit/home-slider-edit.component';\r\nimport { FaqEditComponent } from './faq/faq-edit/faq-edit.component';\r\nimport { BannersEditComponent } from './banners/banners-edit/banners-edit.component';\r\nimport { CompanyValueEditComponent } from './company-value/company-value-edit/company-value-edit.component';\r\nimport { OurClientsEditComponent } from './our-clients/our-clients-edit/our-clients-edit.component';\r\nimport { ReviewsEditComponent } from './reviews/reviews-edit/reviews-edit.component';\r\nimport { WhyUsAddComponent } from './why-us/why-us-add/why-us-add.component';\r\nimport { WhyUsEditComponent } from './why-us/why-us-edit/why-us-edit.component';\r\nimport { PopularProductsEditComponent } from './popular-products/popular-products-edit/popular-products-edit.component';\r\nimport { PopularCategoriesEditComponent } from './popular-categories/popular-categories-edit/popular-categories-edit.component';\r\nimport { CtaComponent } from './cta/cta.component';\r\nimport { PopupsComponent } from './popups/popups.component';\r\nimport { PopupsEditComponent } from './popups/popups-edit/popups-edit.component';\r\nimport { PopupsAddComponent } from './popups/popups-add/popups-add.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CompanyValueComponent,\r\n    CompanyValueAddComponent,\r\n    BannersComponent,\r\n    BannersAddComponent,\r\n    WhyUsComponent,\r\n    OurClientsComponent,\r\n    OurClientsAddComponent,\r\n    ReviewsComponent,\r\n    ReviewsAddComponent,\r\n    FaqComponent,\r\n    FaqAddComponent,\r\n    HomeSliderComponent,\r\n    HomeSliderAddComponent,\r\n    PopularProductsComponent,\r\n    PopularProductsAddComponent,\r\n    PopularCategoriesComponent,\r\n    PopularCategoriesAddComponent,\r\n    TeamComponent,\r\n    TeamAddComponent,\r\n    TeamEditComponent,\r\n    HomeSliderEditComponent,\r\n    FaqEditComponent,\r\n    BannersEditComponent,\r\n    CompanyValueEditComponent,\r\n    OurClientsEditComponent,\r\n    ReviewsEditComponent,\r\n    WhyUsAddComponent,\r\n    WhyUsEditComponent,\r\n    PopularProductsEditComponent,\r\n    PopularCategoriesEditComponent,\r\n    CtaComponent,\r\n    PopupsComponent,\r\n    PopupsEditComponent,\r\n    PopupsAddComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    StyleModuleModule,\r\n    ReactiveFormsModule,\r\n    SharedComponentsModule,\r\n    SectionsRoutingModule,\r\n  ],\r\n})\r\nexport class SectionsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BannersAddComponent"
                        },
                        {
                            "name": "BannersComponent"
                        },
                        {
                            "name": "BannersEditComponent"
                        },
                        {
                            "name": "CompanyValueAddComponent"
                        },
                        {
                            "name": "CompanyValueComponent"
                        },
                        {
                            "name": "CompanyValueEditComponent"
                        },
                        {
                            "name": "CtaComponent"
                        },
                        {
                            "name": "FaqAddComponent"
                        },
                        {
                            "name": "FaqComponent"
                        },
                        {
                            "name": "FaqEditComponent"
                        },
                        {
                            "name": "HomeSliderAddComponent"
                        },
                        {
                            "name": "HomeSliderComponent"
                        },
                        {
                            "name": "HomeSliderEditComponent"
                        },
                        {
                            "name": "OurClientsAddComponent"
                        },
                        {
                            "name": "OurClientsComponent"
                        },
                        {
                            "name": "OurClientsEditComponent"
                        },
                        {
                            "name": "PopularCategoriesAddComponent"
                        },
                        {
                            "name": "PopularCategoriesComponent"
                        },
                        {
                            "name": "PopularCategoriesEditComponent"
                        },
                        {
                            "name": "PopularProductsAddComponent"
                        },
                        {
                            "name": "PopularProductsComponent"
                        },
                        {
                            "name": "PopularProductsEditComponent"
                        },
                        {
                            "name": "PopupsAddComponent"
                        },
                        {
                            "name": "PopupsComponent"
                        },
                        {
                            "name": "PopupsEditComponent"
                        },
                        {
                            "name": "ReviewsAddComponent"
                        },
                        {
                            "name": "ReviewsComponent"
                        },
                        {
                            "name": "ReviewsEditComponent"
                        },
                        {
                            "name": "TeamAddComponent"
                        },
                        {
                            "name": "TeamComponent"
                        },
                        {
                            "name": "TeamEditComponent"
                        },
                        {
                            "name": "WhyUsAddComponent"
                        },
                        {
                            "name": "WhyUsComponent"
                        },
                        {
                            "name": "WhyUsEditComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SectionsRoutingModule"
                        },
                        {
                            "name": "StyleModuleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SectionsRoutingModule",
            "id": "module-SectionsRoutingModule-54eadf1386fbde82ed6fc300b9eb18fd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/sections/sections-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SectionsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsModule",
            "id": "module-SettingsModule-860e8782d992108eb875a5d6f71ad411",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/settings/settings.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n// * CUSTOM\r\nimport { SettingsRoutingModule } from './settings-routing.module';\r\nimport { StyleModuleModule } from 'src/app/shared/style-module/style-module.module';\r\nimport { SettingsPageComponent } from './settings-page/settings-page.component';\r\nimport { SharedComponentsModule } from 'src/app/shared/components/shared-components.module';\r\n\r\n@NgModule({\r\n  declarations: [SettingsPageComponent],\r\n  imports: [\r\n    CommonModule,\r\n    StyleModuleModule,\r\n    RouterModule,\r\n    ReactiveFormsModule,\r\n    SharedComponentsModule,\r\n    SettingsRoutingModule,\r\n  ],\r\n})\r\nexport class SettingsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SettingsPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SettingsRoutingModule"
                        },
                        {
                            "name": "StyleModuleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsRoutingModule",
            "id": "module-SettingsRoutingModule-ddc64543865011cd846040c2786314c4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/settings/settings-routing.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n// * CUSTOM\r\nimport { AuthGuard } from 'src/app/core/guards/auth.guard';\r\nimport { Role } from 'src/app/shared/models/role';\r\nimport { SettingsPageComponent } from './settings-page/settings-page.component';\r\n\r\nconst routes = [\r\n  {\r\n    path: '',\r\n    component: SettingsPageComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class SettingsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedComponentsModule",
            "id": "module-SharedComponentsModule-32fa44b61b418aab46b2af6508a9487c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/components/shared-components.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n// * CUSTOM\r\nimport { SkeletonComponent } from './skeleton/skeleton.component';\r\nimport { StyleModuleModule } from '../style-module/style-module.module';\r\nimport { ImageUploadComponent } from './image-upload/image-upload.component';\r\nimport { BlockUiComponent } from './block-ui/block-ui.component';\r\nimport { CloseIconComponent } from './close-icon/close-icon.component';\r\nimport { PageSeoComponent } from './page-seo/page-seo.component';\r\nimport { ReferenceUploadComponent } from './reference-upload/reference-upload.component';\r\nimport { PostReorderComponent } from './post-reorder/post-reorder.component';\r\nimport { FileUploadComponent } from './file-upload/file-upload.component';\r\nimport { FormBuilderComponent } from './form-builder/form-builder.component';\r\nimport { InputComponent } from './input/input.component';\r\nimport { TextareaComponent } from './textarea/textarea.component';\r\nimport { InputPasswordComponent } from './input-password/input-password.component';\r\nimport { RichEditorComponent } from './rich-editor/rich-editor.component';\r\nimport { DropdownComponent } from './dropdown/dropdown.component';\r\nimport { BreadcrumbComponent } from './breadcrumb/breadcrumb.component';\r\n\r\n// * QUILL\r\nimport { QuillModule } from 'ngx-quill';\r\nimport { ButtonComponent } from './button/button.component';\r\nimport { ContentLayoutComponent } from './templates/content-layout/content-layout.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SkeletonComponent,\r\n    ImageUploadComponent,\r\n    BlockUiComponent,\r\n    CloseIconComponent,\r\n    PageSeoComponent,\r\n    ReferenceUploadComponent,\r\n    PostReorderComponent,\r\n    FileUploadComponent,\r\n    FormBuilderComponent,\r\n    InputComponent,\r\n    TextareaComponent,\r\n    InputPasswordComponent,\r\n    RichEditorComponent,\r\n    DropdownComponent,\r\n    BreadcrumbComponent,\r\n    ButtonComponent,\r\n    ContentLayoutComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    StyleModuleModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    QuillModule,\r\n  ],\r\n  exports: [\r\n    SkeletonComponent,\r\n    ImageUploadComponent,\r\n    BlockUiComponent,\r\n    CloseIconComponent,\r\n    PageSeoComponent,\r\n    ReferenceUploadComponent,\r\n    PostReorderComponent,\r\n    FileUploadComponent,\r\n    FormBuilderComponent,\r\n    InputComponent,\r\n    TextareaComponent,\r\n    RichEditorComponent,\r\n    DropdownComponent,\r\n    BreadcrumbComponent,\r\n    ButtonComponent,\r\n    ContentLayoutComponent,\r\n  ],\r\n})\r\nexport class SharedComponentsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BlockUiComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CloseIconComponent"
                        },
                        {
                            "name": "ContentLayoutComponent"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "FileUploadComponent"
                        },
                        {
                            "name": "FormBuilderComponent"
                        },
                        {
                            "name": "ImageUploadComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "InputPasswordComponent"
                        },
                        {
                            "name": "PageSeoComponent"
                        },
                        {
                            "name": "PostReorderComponent"
                        },
                        {
                            "name": "ReferenceUploadComponent"
                        },
                        {
                            "name": "RichEditorComponent"
                        },
                        {
                            "name": "SkeletonComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "StyleModuleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BlockUiComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CloseIconComponent"
                        },
                        {
                            "name": "ContentLayoutComponent"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "FileUploadComponent"
                        },
                        {
                            "name": "FormBuilderComponent"
                        },
                        {
                            "name": "ImageUploadComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "PageSeoComponent"
                        },
                        {
                            "name": "PostReorderComponent"
                        },
                        {
                            "name": "ReferenceUploadComponent"
                        },
                        {
                            "name": "RichEditorComponent"
                        },
                        {
                            "name": "SkeletonComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StyleModuleModule",
            "id": "module-StyleModuleModule-3ff91ae144c59ceefa5ff939a9161fdb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/style-module/style-module.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\n\r\n// * PRIMENG IMPORTS\r\nimport { FileUploadModule } from 'primeng/fileupload';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\nimport { InputSwitchModule } from 'primeng/inputswitch';\r\nimport { PanelModule } from 'primeng/panel';\r\nimport { InputTextareaModule } from 'primeng/inputtextarea';\r\nimport { AccordionModule } from 'primeng/accordion';\r\nimport { TabViewModule } from 'primeng/tabview';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\r\nimport { MessagesModule } from 'primeng/messages';\r\nimport { MessageModule } from 'primeng/message';\r\nimport { SelectButtonModule } from 'primeng/selectbutton';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { ConfirmPopupModule } from 'primeng/confirmpopup';\r\nimport { SkeletonModule } from 'primeng/skeleton';\r\nimport { PaginatorModule } from 'primeng/paginator';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { TagModule } from 'primeng/tag';\r\nimport { ToggleButtonModule } from 'primeng/togglebutton';\r\nimport { MultiSelectModule } from 'primeng/multiselect';\r\nimport { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { SidebarModule } from 'primeng/sidebar';\r\nimport { ButtonModule } from 'primeng/button';\r\n\r\n// * SORTABLE JS\r\nimport { SortablejsModule } from 'ngx-sortablejs';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  exports: [\r\n    FileUploadModule,\r\n    SortablejsModule,\r\n    InputTextModule,\r\n    TableModule,\r\n    TooltipModule,\r\n    InputSwitchModule,\r\n    PanelModule,\r\n    InputTextareaModule,\r\n    AccordionModule,\r\n    TabViewModule,\r\n    RadioButtonModule,\r\n    DropdownModule,\r\n    ProgressSpinnerModule,\r\n    ToastModule,\r\n    MessagesModule,\r\n    MessageModule,\r\n    SelectButtonModule,\r\n    ConfirmPopupModule,\r\n    SkeletonModule,\r\n    PaginatorModule,\r\n    DialogModule,\r\n    TagModule,\r\n    ToggleButtonModule,\r\n    MultiSelectModule,\r\n    BreadcrumbModule,\r\n    SidebarModule,\r\n    ButtonModule,\r\n  ],\r\n})\r\nexport class StyleModuleModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersModule",
            "id": "module-UsersModule-0bdb2790ef63c50a676711f285afd46a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/users/users.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n// * CUSTOM\r\nimport { UsersRoutingModule } from './users-routing.module';\r\nimport { StyleModuleModule } from 'src/app/shared/style-module/style-module.module';\r\nimport { UsersPreviewComponent } from './users-preview/users-preview.component';\r\nimport { UsersAddComponent } from './users-add/users-add.component';\r\nimport { UserEditComponent } from './user-edit/user-edit.component';\r\nimport { SharedComponentsModule } from 'src/app/shared/components/shared-components.module';\r\nimport { RolesPipe } from 'src/app/shared/pipes/roles.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UsersPreviewComponent,\r\n    UsersAddComponent,\r\n    UserEditComponent,\r\n    RolesPipe,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    StyleModuleModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    SharedComponentsModule,\r\n    UsersRoutingModule,\r\n  ],\r\n})\r\nexport class UsersModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RolesPipe"
                        },
                        {
                            "name": "UserEditComponent"
                        },
                        {
                            "name": "UsersAddComponent"
                        },
                        {
                            "name": "UsersPreviewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "StyleModuleModule"
                        },
                        {
                            "name": "UsersRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersRoutingModule",
            "id": "module-UsersRoutingModule-31e8e1804a6490129b26f5a3f81e6e0c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/users/users-routing.module.ts",
            "methods": [],
            "sourceCode": "// * ANGULAR\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n// * CUSTOM\r\nimport { AuthGuard } from 'src/app/core/guards/auth.guard';\r\nimport { Role } from 'src/app/shared/models/role';\r\nimport { UserEditComponent } from './user-edit/user-edit.component';\r\nimport { UsersAddComponent } from './users-add/users-add.component';\r\nimport { UsersPreviewComponent } from './users-preview/users-preview.component';\r\n\r\nconst routes = [\r\n  {\r\n    path: '',\r\n    component: UsersPreviewComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'add',\r\n    component: UsersAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'edit/:id',\r\n    component: UserEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class UsersRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  apiUrl: 'https://printingoffice.itcentar.rs',\r\n  mediaUrl: 'https://printingoffice.itcentar.rs/storage/upload',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'https://printingoffice.itcentar.rs',\r\n  mediaUrl: 'https://printingoffice.itcentar.rs/storage/upload',\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/block-ui/block-ui.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  props: {\r\n    loading: true,\r\n  },\r\n  template: `<app-block-ui [loading]=\"true\">Please wait...</app-block-ui>`,\r\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/file-upload/file-upload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  props: {\r\n    fileList: [],\r\n  },\r\n  template: `\r\n  <app-file-upload\r\n  [fileList]=\"[]\"\r\n  [includeSeo]=\"true\"\r\n  [fileSize]=\"20\"\r\n  [maxFiles]=\"1\" >\r\n  </app-file-upload>`,\r\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  props: {\r\n    options: {\r\n      type: 'text',\r\n      containerClass: 'p-mb-0',\r\n      label: 'Page name',\r\n      placeholder: 'eg. Homepage',\r\n      formControlName: 'title',\r\n    },\r\n    customFormGroup: new FormGroup({\r\n      title: new FormControl(),\r\n    }),\r\n  },\r\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/page-seo/page-seo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  props: {\r\n    formGroup: new FormGroup({\r\n      slug: new FormControl(),\r\n      meta_title: new FormControl(),\r\n      meta_keywords: new FormControl(),\r\n      meta_description: new FormControl(),\r\n    }),\r\n  },\r\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/skeleton/skeleton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  props: {\r\n    label: 'Button',\r\n  },\r\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    path: '',\r\n    component: MainLayoutComponent,\r\n    children: [\r\n      {\r\n        path: 'pages',\r\n        loadChildren: () =>\r\n          import('./modules/pages/pages.module').then((m) => m.PagesModule),\r\n      },\r\n\r\n      // ? HOMEPAGE SECTIONS\r\n      // Comapny value\r\n      {\r\n        path: 'pages/home/:id/company_value/:sectionId',\r\n        component: CompanyValueComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/company_value/:sectionId/add',\r\n        component: CompanyValueAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/company_value/:sectionId/edit/:postId',\r\n        component: CompanyValueEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Banners\r\n      {\r\n        path: 'pages/home/:id/banner/:sectionId',\r\n        component: BannersComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/banner/:sectionId/add',\r\n        component: BannersAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/banner/:sectionId/edit/:postId',\r\n        component: BannersEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Why us\r\n      {\r\n        path: 'pages/home/:id/statistics/:sectionId',\r\n        component: WhyUsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/statistics/:sectionId/add',\r\n        component: WhyUsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/statistics/:sectionId/edit/:postId',\r\n        component: WhyUsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Our clients\r\n      {\r\n        path: 'pages/home/:id/clients/:sectionId',\r\n        component: OurClientsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/clients/:sectionId/add',\r\n        component: OurClientsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/clients/:sectionId/edit/:postId',\r\n        component: OurClientsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Reviews\r\n      {\r\n        path: 'pages/home/:id/reviews/:sectionId',\r\n        component: ReviewsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/reviews/:sectionId/add',\r\n        component: ReviewsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/reviews/:sectionId/edit/:postId',\r\n        component: ReviewsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // FAQ\r\n      {\r\n        path: 'pages/home/:id/faq/:sectionId',\r\n        component: FaqComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/faq/:sectionId/add',\r\n        component: FaqAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/faq/:sectionId/edit/:postId',\r\n        component: FaqEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Slider\r\n      {\r\n        path: 'pages/home/:id/slider/:sectionId',\r\n        component: HomeSliderComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/slider/:sectionId/add',\r\n        component: HomeSliderAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/slider/:sectionId/edit/:postId',\r\n        component: HomeSliderEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Popular products\r\n      {\r\n        path: 'pages/home/:id/popular_products/:sectionId',\r\n        component: PopularProductsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/popular_products/:sectionId/add',\r\n        component: PopularProductsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/popular_products/:sectionId/edit/:postId',\r\n        component: PopularProductsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Popular categories\r\n      {\r\n        path: 'pages/home/:id/popular_categories/:sectionId',\r\n        component: PopularCategoriesComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/popular_categories/:sectionId/add',\r\n        component: PopularCategoriesAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/popular_categories/:sectionId/edit/:postId',\r\n        component: PopularCategoriesEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // ? ABOUT SECTIONS\r\n      // Team\r\n      {\r\n        path: 'pages/about/:id/team/:id',\r\n        component: TeamComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/about/:id/team/:id/add',\r\n        component: TeamAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/about/:id/team/:id/edit/:postId',\r\n        component: TeamEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n\r\n      // * USERS\r\n      {\r\n        path: 'users',\r\n        loadChildren: () =>\r\n          import('./modules/users/users.module').then((m) => m.UsersModule),\r\n      },\r\n\r\n      // * SETTINGS\r\n      {\r\n        path: 'settings',\r\n        loadChildren: () =>\r\n          import('./modules/settings/settings.module').then(\r\n            (m) => m.SettingsModule\r\n          ),\r\n      },\r\n\r\n      // * GLOBAL\r\n      {\r\n        path: 'global',\r\n        loadChildren: () =>\r\n          import('./modules/global/global.module').then((m) => m.GlobalModule),\r\n      },\r\n      // ? GLOBAL SECTIONS\r\n      // Cta\r\n      {\r\n        path: 'global/sections',\r\n        component: GlobalSectionsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'global/sections/cta/edit/:id',\r\n        component: CtaComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Popups\r\n      {\r\n        path: 'global/sections/popups/edit/:id',\r\n        component: PopupsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'global/sections/popups/edit/:id/add',\r\n        component: PopupsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'global/sections/popups/edit/:id/edit/:postId',\r\n        component: PopupsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n\r\n      // * PRODUCTS\r\n      // All products\r\n      {\r\n        path: 'products',\r\n        loadChildren: () =>\r\n          import('./modules/products/products.module').then(\r\n            (m) => m.ProductsModule\r\n          ),\r\n      },\r\n\r\n      // * ORDERS\r\n      {\r\n        path: 'orders',\r\n        loadChildren: () =>\r\n          import('./modules/orders/orders.module').then((m) => m.OrdersModule),\r\n      },\r\n\r\n      { path: '', redirectTo: 'orders', pathMatch: 'full' }, // Redirect to orders\r\n    ],\r\n  },\r\n  {\r\n    path: 'login',\r\n    loadChildren: () =>\r\n      import('./modules/login/login.module').then((m) => m.LoginModule),\r\n  },\r\n  { path: '**', redirectTo: 'pages' }, // redirect to home\r\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/global/global-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    path: 'header/:id',\r\n    component: HeaderMenuComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'footer/:id',\r\n    component: FooterMenuComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/login/login-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    path: '',\r\n    component: AuthLayoutComponent,\r\n    children: [\r\n      { path: '', component: LoginPageComponent },\r\n      { path: 'forget-password', component: ForgetPasswordComponent },\r\n      { path: 'reset-password', component: ResetPasswordComponent },\r\n    ],\r\n  },\r\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/orders/orders-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    path: '',\r\n    component: OrdersListComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'edit/:id',\r\n    component: OrdersEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/page-templates/page-templates-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  // Template ONE\n  {\n    path: 'create/template-1',\n    component: TemplateOneAddComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  {\n    path: 'edit/template-1/:id',\n    component: TemplateOneEditComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  // Template TWO\n  {\n    path: 'create/template-2',\n    component: TemplateTwoAddComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  {\n    path: 'edit/template-2/:id',\n    component: TemplateTwoEditComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  // Template THREE\n  {\n    path: 'create/template-3',\n    component: TemplateThreeAddComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  {\n    path: 'edit/template-3/:id',\n    component: TemplateThreeEditComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  // Template REFERENCE\n  {\n    path: 'create/template-reference',\n    component: TemplateReferenceAddComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  {\n    path: 'edit/template-reference/:id',\n    component: TemplateReferenceEditComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/pages/pages-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  // * ALL PAGES\r\n  {\r\n    path: '',\r\n    component: PagesListComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // About\r\n  {\r\n    path: 'about/:id',\r\n    component: AboutComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Download\r\n  {\r\n    path: 'download/:id',\r\n    component: DownloadComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'download/:id/add',\r\n    component: DownloadAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'download/:id/edit/:postId',\r\n    component: DownloadEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Contact\r\n  {\r\n    path: 'contact/:id',\r\n    component: ContactComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Homepage\r\n  {\r\n    path: 'home/:id',\r\n    component: HomepageComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Blog\r\n  {\r\n    path: 'blog/:id',\r\n    component: BlogComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'blog/:id/add',\r\n    component: BlogAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'blog/:id/edit/:postId',\r\n    component: BlogEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Products\r\n  {\r\n    path: 'products/:id',\r\n    component: ProductsComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/products-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  // Products\r\n  {\r\n    path: '',\r\n    component: ProductsListComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'add',\r\n    component: ProductAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'edit/:id',\r\n    component: ProductEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Categories\r\n  {\r\n    path: 'categories',\r\n    component: CategoriesComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'categories/add',\r\n    component: CategoryAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'categories/edit/:id',\r\n    component: CategoryEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Subcategories\r\n  {\r\n    path: 'subcategories',\r\n    component: SubcategoriesComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'subcategories/add',\r\n    component: SubcategoriesAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'subcategories/edit/:id',\r\n    component: SubcategoriesEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/sections/sections-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/settings/settings-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    path: '',\r\n    component: SettingsPageComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/users/users-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    path: '',\r\n    component: UsersPreviewComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'add',\r\n    component: UsersAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'edit/:id',\r\n    component: UserEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n]"
            },
            {
                "name": "ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/includes/sidebar/sidebar-routes.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "RouteInfo[]",
                "defaultValue": "[\r\n  {\r\n    path: '/orders',\r\n    title: 'Upiti',\r\n    icon: 'pi pi-shopping-cart',\r\n    role: ['admin'],\r\n  },\r\n  { title: 'Upravljanje', type: 'title' },\r\n  { path: '/pages', title: 'Stranice', icon: 'pi pi-sitemap', role: ['admin'] },\r\n  {\r\n    opened: false,\r\n    title: 'Proizvodi',\r\n    type: 'dropdown',\r\n    icon: 'pi pi-inbox',\r\n    children: [\r\n      {\r\n        path: '/products',\r\n        title: 'Svi proizvodi',\r\n        icon: 'pi pi-search-plus',\r\n        role: ['admin'],\r\n      },\r\n      {\r\n        path: '/products/categories',\r\n        title: 'Kategorije',\r\n        icon: 'pi pi-tag',\r\n        role: ['admin'],\r\n      },\r\n      {\r\n        path: '/products/subcategories',\r\n        title: 'Podkategorije',\r\n        icon: 'pi pi-tags',\r\n        role: ['admin'],\r\n      },\r\n    ],\r\n    role: ['admin'],\r\n  },\r\n  {\r\n    opened: false,\r\n    title: 'Globalno',\r\n    type: 'dropdown',\r\n    icon: 'pi pi-globe',\r\n    children: [\r\n      {\r\n        path: 'global/header/1',\r\n        title: 'Header',\r\n        icon: 'pi pi-compass',\r\n        role: ['admin'],\r\n      },\r\n      {\r\n        path: 'global/footer/2',\r\n        title: 'Footer',\r\n        icon: 'pi pi-info-circle',\r\n        role: ['admin'],\r\n      },\r\n      {\r\n        path: 'global/sections',\r\n        title: 'Globalne sekcije',\r\n        icon: 'pi pi-sliders-h',\r\n        role: ['admin'],\r\n      },\r\n    ],\r\n    role: ['admin'],\r\n  },\r\n  { title: 'Opcije', type: 'title' },\r\n  { path: '/users', title: 'Korisnici', icon: 'pi pi-users', role: ['admin'] },\r\n  {\r\n    path: '/settings',\r\n    title: 'Podešavanja',\r\n    icon: 'pi pi-cog',\r\n    role: ['admin'],\r\n  },\r\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "Role",
                "childs": [
                    {
                        "name": "admin",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "korisnik",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2"
                    },
                    {
                        "name": "editor",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/models/role.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  apiUrl: 'https://printingoffice.itcentar.rs',\r\n  mediaUrl: 'https://printingoffice.itcentar.rs/storage/upload',\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'https://printingoffice.itcentar.rs',\r\n  mediaUrl: 'https://printingoffice.itcentar.rs/storage/upload',\r\n}"
                }
            ],
            "src/app/shared/components/block-ui/block-ui.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/block-ui/block-ui.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  props: {\r\n    loading: true,\r\n  },\r\n  template: `<app-block-ui [loading]=\"true\">Please wait...</app-block-ui>`,\r\n})"
                }
            ],
            "src/app/shared/components/file-upload/file-upload.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/file-upload/file-upload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  props: {\r\n    fileList: [],\r\n  },\r\n  template: `\r\n  <app-file-upload\r\n  [fileList]=\"[]\"\r\n  [includeSeo]=\"true\"\r\n  [fileSize]=\"20\"\r\n  [maxFiles]=\"1\" >\r\n  </app-file-upload>`,\r\n})"
                }
            ],
            "src/app/shared/components/input/input.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  props: {\r\n    options: {\r\n      type: 'text',\r\n      containerClass: 'p-mb-0',\r\n      label: 'Page name',\r\n      placeholder: 'eg. Homepage',\r\n      formControlName: 'title',\r\n    },\r\n    customFormGroup: new FormGroup({\r\n      title: new FormControl(),\r\n    }),\r\n  },\r\n})"
                }
            ],
            "src/app/shared/components/page-seo/page-seo.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/page-seo/page-seo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  props: {\r\n    formGroup: new FormGroup({\r\n      slug: new FormControl(),\r\n      meta_title: new FormControl(),\r\n      meta_keywords: new FormControl(),\r\n      meta_description: new FormControl(),\r\n    }),\r\n  },\r\n})"
                }
            ],
            "src/app/shared/components/skeleton/skeleton.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/skeleton/skeleton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  props: {\r\n    label: 'Button',\r\n  },\r\n})"
                }
            ],
            "src/app/app-routing.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    path: '',\r\n    component: MainLayoutComponent,\r\n    children: [\r\n      {\r\n        path: 'pages',\r\n        loadChildren: () =>\r\n          import('./modules/pages/pages.module').then((m) => m.PagesModule),\r\n      },\r\n\r\n      // ? HOMEPAGE SECTIONS\r\n      // Comapny value\r\n      {\r\n        path: 'pages/home/:id/company_value/:sectionId',\r\n        component: CompanyValueComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/company_value/:sectionId/add',\r\n        component: CompanyValueAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/company_value/:sectionId/edit/:postId',\r\n        component: CompanyValueEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Banners\r\n      {\r\n        path: 'pages/home/:id/banner/:sectionId',\r\n        component: BannersComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/banner/:sectionId/add',\r\n        component: BannersAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/banner/:sectionId/edit/:postId',\r\n        component: BannersEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Why us\r\n      {\r\n        path: 'pages/home/:id/statistics/:sectionId',\r\n        component: WhyUsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/statistics/:sectionId/add',\r\n        component: WhyUsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/statistics/:sectionId/edit/:postId',\r\n        component: WhyUsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Our clients\r\n      {\r\n        path: 'pages/home/:id/clients/:sectionId',\r\n        component: OurClientsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/clients/:sectionId/add',\r\n        component: OurClientsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/clients/:sectionId/edit/:postId',\r\n        component: OurClientsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Reviews\r\n      {\r\n        path: 'pages/home/:id/reviews/:sectionId',\r\n        component: ReviewsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/reviews/:sectionId/add',\r\n        component: ReviewsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/reviews/:sectionId/edit/:postId',\r\n        component: ReviewsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // FAQ\r\n      {\r\n        path: 'pages/home/:id/faq/:sectionId',\r\n        component: FaqComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/faq/:sectionId/add',\r\n        component: FaqAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/faq/:sectionId/edit/:postId',\r\n        component: FaqEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Slider\r\n      {\r\n        path: 'pages/home/:id/slider/:sectionId',\r\n        component: HomeSliderComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/slider/:sectionId/add',\r\n        component: HomeSliderAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/slider/:sectionId/edit/:postId',\r\n        component: HomeSliderEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Popular products\r\n      {\r\n        path: 'pages/home/:id/popular_products/:sectionId',\r\n        component: PopularProductsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/popular_products/:sectionId/add',\r\n        component: PopularProductsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/popular_products/:sectionId/edit/:postId',\r\n        component: PopularProductsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Popular categories\r\n      {\r\n        path: 'pages/home/:id/popular_categories/:sectionId',\r\n        component: PopularCategoriesComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/popular_categories/:sectionId/add',\r\n        component: PopularCategoriesAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/home/:id/popular_categories/:sectionId/edit/:postId',\r\n        component: PopularCategoriesEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // ? ABOUT SECTIONS\r\n      // Team\r\n      {\r\n        path: 'pages/about/:id/team/:id',\r\n        component: TeamComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/about/:id/team/:id/add',\r\n        component: TeamAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'pages/about/:id/team/:id/edit/:postId',\r\n        component: TeamEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n\r\n      // * USERS\r\n      {\r\n        path: 'users',\r\n        loadChildren: () =>\r\n          import('./modules/users/users.module').then((m) => m.UsersModule),\r\n      },\r\n\r\n      // * SETTINGS\r\n      {\r\n        path: 'settings',\r\n        loadChildren: () =>\r\n          import('./modules/settings/settings.module').then(\r\n            (m) => m.SettingsModule\r\n          ),\r\n      },\r\n\r\n      // * GLOBAL\r\n      {\r\n        path: 'global',\r\n        loadChildren: () =>\r\n          import('./modules/global/global.module').then((m) => m.GlobalModule),\r\n      },\r\n      // ? GLOBAL SECTIONS\r\n      // Cta\r\n      {\r\n        path: 'global/sections',\r\n        component: GlobalSectionsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'global/sections/cta/edit/:id',\r\n        component: CtaComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      // Popups\r\n      {\r\n        path: 'global/sections/popups/edit/:id',\r\n        component: PopupsComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'global/sections/popups/edit/:id/add',\r\n        component: PopupsAddComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n      {\r\n        path: 'global/sections/popups/edit/:id/edit/:postId',\r\n        component: PopupsEditComponent,\r\n        canActivate: [AuthGuard],\r\n        data: { roles: [Role.admin] },\r\n      },\r\n\r\n      // * PRODUCTS\r\n      // All products\r\n      {\r\n        path: 'products',\r\n        loadChildren: () =>\r\n          import('./modules/products/products.module').then(\r\n            (m) => m.ProductsModule\r\n          ),\r\n      },\r\n\r\n      // * ORDERS\r\n      {\r\n        path: 'orders',\r\n        loadChildren: () =>\r\n          import('./modules/orders/orders.module').then((m) => m.OrdersModule),\r\n      },\r\n\r\n      { path: '', redirectTo: 'orders', pathMatch: 'full' }, // Redirect to orders\r\n    ],\r\n  },\r\n  {\r\n    path: 'login',\r\n    loadChildren: () =>\r\n      import('./modules/login/login.module').then((m) => m.LoginModule),\r\n  },\r\n  { path: '**', redirectTo: 'pages' }, // redirect to home\r\n]"
                }
            ],
            "src/app/modules/global/global-routing.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/global/global-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    path: 'header/:id',\r\n    component: HeaderMenuComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'footer/:id',\r\n    component: FooterMenuComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n]"
                }
            ],
            "src/app/modules/login/login-routing.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/login/login-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    path: '',\r\n    component: AuthLayoutComponent,\r\n    children: [\r\n      { path: '', component: LoginPageComponent },\r\n      { path: 'forget-password', component: ForgetPasswordComponent },\r\n      { path: 'reset-password', component: ResetPasswordComponent },\r\n    ],\r\n  },\r\n]"
                }
            ],
            "src/app/modules/orders/orders-routing.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/orders/orders-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    path: '',\r\n    component: OrdersListComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'edit/:id',\r\n    component: OrdersEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n]"
                }
            ],
            "src/app/modules/page-templates/page-templates-routing.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/page-templates/page-templates-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  // Template ONE\n  {\n    path: 'create/template-1',\n    component: TemplateOneAddComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  {\n    path: 'edit/template-1/:id',\n    component: TemplateOneEditComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  // Template TWO\n  {\n    path: 'create/template-2',\n    component: TemplateTwoAddComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  {\n    path: 'edit/template-2/:id',\n    component: TemplateTwoEditComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  // Template THREE\n  {\n    path: 'create/template-3',\n    component: TemplateThreeAddComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  {\n    path: 'edit/template-3/:id',\n    component: TemplateThreeEditComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  // Template REFERENCE\n  {\n    path: 'create/template-reference',\n    component: TemplateReferenceAddComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n  {\n    path: 'edit/template-reference/:id',\n    component: TemplateReferenceEditComponent,\n    canActivate: [AuthGuard],\n    data: { roles: [Role.admin] },\n  },\n]"
                }
            ],
            "src/app/modules/pages/pages-routing.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/pages/pages-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  // * ALL PAGES\r\n  {\r\n    path: '',\r\n    component: PagesListComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // About\r\n  {\r\n    path: 'about/:id',\r\n    component: AboutComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Download\r\n  {\r\n    path: 'download/:id',\r\n    component: DownloadComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'download/:id/add',\r\n    component: DownloadAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'download/:id/edit/:postId',\r\n    component: DownloadEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Contact\r\n  {\r\n    path: 'contact/:id',\r\n    component: ContactComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Homepage\r\n  {\r\n    path: 'home/:id',\r\n    component: HomepageComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Blog\r\n  {\r\n    path: 'blog/:id',\r\n    component: BlogComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'blog/:id/add',\r\n    component: BlogAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'blog/:id/edit/:postId',\r\n    component: BlogEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Products\r\n  {\r\n    path: 'products/:id',\r\n    component: ProductsComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n]"
                }
            ],
            "src/app/modules/products/products-routing.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/products-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  // Products\r\n  {\r\n    path: '',\r\n    component: ProductsListComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'add',\r\n    component: ProductAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'edit/:id',\r\n    component: ProductEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Categories\r\n  {\r\n    path: 'categories',\r\n    component: CategoriesComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'categories/add',\r\n    component: CategoryAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'categories/edit/:id',\r\n    component: CategoryEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  // Subcategories\r\n  {\r\n    path: 'subcategories',\r\n    component: SubcategoriesComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'subcategories/add',\r\n    component: SubcategoriesAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'subcategories/edit/:id',\r\n    component: SubcategoriesEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n]"
                }
            ],
            "src/app/modules/sections/sections-routing.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/sections/sections-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[]"
                }
            ],
            "src/app/modules/settings/settings-routing.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/settings/settings-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    path: '',\r\n    component: SettingsPageComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n]"
                }
            ],
            "src/app/modules/users/users-routing.module.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/users/users-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    path: '',\r\n    component: UsersPreviewComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'add',\r\n    component: UsersAddComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n  {\r\n    path: 'edit/:id',\r\n    component: UserEditComponent,\r\n    canActivate: [AuthGuard],\r\n    data: { roles: [Role.admin] },\r\n  },\r\n]"
                }
            ],
            "src/app/includes/sidebar/sidebar-routes.config.ts": [
                {
                    "name": "ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/includes/sidebar/sidebar-routes.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouteInfo[]",
                    "defaultValue": "[\r\n  {\r\n    path: '/orders',\r\n    title: 'Upiti',\r\n    icon: 'pi pi-shopping-cart',\r\n    role: ['admin'],\r\n  },\r\n  { title: 'Upravljanje', type: 'title' },\r\n  { path: '/pages', title: 'Stranice', icon: 'pi pi-sitemap', role: ['admin'] },\r\n  {\r\n    opened: false,\r\n    title: 'Proizvodi',\r\n    type: 'dropdown',\r\n    icon: 'pi pi-inbox',\r\n    children: [\r\n      {\r\n        path: '/products',\r\n        title: 'Svi proizvodi',\r\n        icon: 'pi pi-search-plus',\r\n        role: ['admin'],\r\n      },\r\n      {\r\n        path: '/products/categories',\r\n        title: 'Kategorije',\r\n        icon: 'pi pi-tag',\r\n        role: ['admin'],\r\n      },\r\n      {\r\n        path: '/products/subcategories',\r\n        title: 'Podkategorije',\r\n        icon: 'pi pi-tags',\r\n        role: ['admin'],\r\n      },\r\n    ],\r\n    role: ['admin'],\r\n  },\r\n  {\r\n    opened: false,\r\n    title: 'Globalno',\r\n    type: 'dropdown',\r\n    icon: 'pi pi-globe',\r\n    children: [\r\n      {\r\n        path: 'global/header/1',\r\n        title: 'Header',\r\n        icon: 'pi pi-compass',\r\n        role: ['admin'],\r\n      },\r\n      {\r\n        path: 'global/footer/2',\r\n        title: 'Footer',\r\n        icon: 'pi pi-info-circle',\r\n        role: ['admin'],\r\n      },\r\n      {\r\n        path: 'global/sections',\r\n        title: 'Globalne sekcije',\r\n        icon: 'pi pi-sliders-h',\r\n        role: ['admin'],\r\n      },\r\n    ],\r\n    role: ['admin'],\r\n  },\r\n  { title: 'Opcije', type: 'title' },\r\n  { path: '/users', title: 'Korisnici', icon: 'pi pi-users', role: ['admin'] },\r\n  {\r\n    path: '/settings',\r\n    title: 'Podešavanja',\r\n    icon: 'pi pi-cog',\r\n    role: ['admin'],\r\n  },\r\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/shared/models/role.ts": [
                {
                    "name": "Role",
                    "childs": [
                        {
                            "name": "admin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "korisnik",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2"
                        },
                        {
                            "name": "editor",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/models/role.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/authentication/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/jwt.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/categories.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoriesService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/confirm.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfirmService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/helper.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HelperService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/menu-toggle.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuToggleService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/mess-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessServiceService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/orders.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrdersService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/posts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostsService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/products.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/settings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SettingsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/users.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsersService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/shared/pipes.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PipesPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/includes/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/includes/layout/auth-layout/auth-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/includes/layout/main-layout/main-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/includes/sidebar/sidebar-routes.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/includes/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/global/footer-menu/footer-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/global/global-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/global/global-sections/global-sections.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GlobalSectionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/global/header-menu/edit-menu-item/edit-menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditMenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/global/header-menu/header-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/login/forget-password/forget-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgetPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/login/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/login/login-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/login/reset-password/reset-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/orders/orders-edit/orders-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrdersEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/orders/orders-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrdersFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/orders/orders-list/orders-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrdersListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/orders/orders-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-templates/page-templates-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-templates/template-one/template-one-add/template-one-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TemplateOneAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-templates/template-one/template-one-edit/template-one-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TemplateOneEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-templates/template-one/template-one-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TemplateOneFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-templates/template-reference/template-reference-add/template-reference-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TemplateReferenceAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-templates/template-reference/template-reference-edit/template-reference-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TemplateReferenceEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-templates/template-reference/template-reference.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TemplateReferenceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-templates/template-three/template-three-add/template-three-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TemplateThreeAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-templates/template-three/template-three-edit/template-three-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TemplateThreeEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-templates/template-two/template-two-add/template-two-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TemplateTwoAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/page-templates/template-two/template-two-edit/template-two-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TemplateTwoEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/about/about-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AboutFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/about/about.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/blog/blog-add/blog-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlogAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/blog/blog-edit/blog-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlogEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/blog/blog-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BlogFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/blog/blog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/contact/contact-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ContactFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/contact/contact.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/download/download-add/download-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DownloadAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/download/download-edit/download-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DownloadEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/download/download-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DownloadFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/download/download.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DownloadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/homepage/homepage-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HomepageFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/homepage/homepage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomepageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/pages-list/pages-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagesListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/pages-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/products/products-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/pages/products/products.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/categories/categories-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoriesFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/categories/categories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/categories/category-add/category-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/categories/category-edit/category-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/products-list/product-add/product-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/products-list/product-edit/product-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/products-list/product-single-lang-form/product-single-lang-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductSingleLangFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/products-list/products-list-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsListFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/products-list/products-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/products-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/subcategories/subcategories-add/subcategories-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcategoriesAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/subcategories/subcategories-edit/subcategories-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcategoriesEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/subcategories/subcategories-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SubcategoriesFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/subcategories/subcategories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcategoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/banners/banners-add/banners-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BannersAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/banners/banners-edit/banners-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BannersEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/banners/banners-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BannersFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/banners/banners.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BannersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/company-value/company-value-add/company-value-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CompanyValueAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/company-value/company-value-edit/company-value-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CompanyValueEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/company-value/company-value-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CompanyValueFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/company-value/company-value.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CompanyValueComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/cta/cta-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CtaFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/cta/cta.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CtaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/faq/faq-add/faq-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FaqAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/faq/faq-edit/faq-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FaqEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/faq/faq-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FaqFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/faq/faq.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FaqComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/home-slider/home-slider-add/home-slider-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeSliderAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/home-slider/home-slider-edit/home-slider-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeSliderEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/home-slider/home-slider-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HomeSliderFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/home-slider/home-slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeSliderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/our-clients/our-clients-add/our-clients-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OurClientsAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/our-clients/our-clients-edit/our-clients-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OurClientsEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/our-clients/our-clients-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OurClientsFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/our-clients/our-clients.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OurClientsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/popular-categories/popular-categories-add/popular-categories-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopularCategoriesAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/popular-categories/popular-categories-edit/popular-categories-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopularCategoriesEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/popular-categories/popular-categories-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PopularCategoriesFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/popular-categories/popular-categories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopularCategoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/popular-products/popular-products-add/popular-products-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopularProductsAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/popular-products/popular-products-edit/popular-products-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopularProductsEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/popular-products/popular-products-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PopularProductsFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/popular-products/popular-products.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopularProductsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/popups/popups-add/popups-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupsAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/popups/popups-edit/popups-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupsEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/popups/popups-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PopupsFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/popups/popups.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/reviews/reviews-add/reviews-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReviewsAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/reviews/reviews-edit/reviews-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReviewsEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/reviews/reviews-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReviewsFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/reviews/reviews.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReviewsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/sections-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/team/team-add/team-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/team/team-edit/team-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/team/team-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TeamFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/team/team.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/why-us/why-us-add/why-us-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WhyUsAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/why-us/why-us-edit/why-us-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WhyUsEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/why-us/why-us-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WhyUsFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/sections/why-us/why-us.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WhyUsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/settings/settings-page/settings-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SettingsFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/settings/settings-page/settings-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/settings/settings-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/users/user-edit/user-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/users/users-add/users-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsersAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/users/users-fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsersFieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/users/users-preview/users-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsersPreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/users/users-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/block-ui/block-ui.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlockUiComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/block-ui/block-ui.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/close-icon/close-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CloseIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/file-upload/file-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/file-upload/file-upload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/form-builder/form-builder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormBuilderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/image-upload/image-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-password/input-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/page-seo/page-seo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageSeoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/page-seo/page-seo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/post-reorder/post-reorder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostReorderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/reference-upload/reference-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReferenceUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/rich-editor/rich-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RichEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/skeleton/skeleton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkeletonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/skeleton/skeleton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/templates/content-layout/content-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/file-list.ts",
                "type": "class",
                "linktype": "classe",
                "name": "fileList",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form-field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormField",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/input-field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "InputField",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/paginator.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaginatorApi",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/reorder-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReorderData",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/route-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouteInfo",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/textarea-field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TextareaField",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/user-data.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserData",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/rename-section.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RenameSectionPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/roles.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RolesPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}